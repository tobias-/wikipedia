[[Image:Programming-republic-of-perl.gif|right|framed|Programming Republic of [http://www.perl.com Perl] logo]]

'''Perl''', also '''Practical Extraction and Report Language''' (a [[backronym]], see [[#Name|below]]), is a [[programming language]] released by [[Larry Wall]] on [[December 18]], [[1987]] that borrows features from [[C programming language|C]], [[sed]], [[awk]], [[UNIX shell|shell]] scripting ([[UNIX shell|sh]]), and (to a lesser extent) from many other programming languages.

== Rationale  ==
Perl was designed to be a practical language to extract information from text files and to generate reports from that information. One of its mottoes is "There's more than one way to do it" (TMTOWTDI - pronounced 'Tim Toady'). Another is ''Perl: the Swiss Army Chainsaw of Programming Languages''. One stated design goal is to make easy tasks easy and difficult tasks possible. Its versatility permits versions of many programming paradigms: [[procedural programming|procedural]], [[functional programming|functional]], and [[Object Oriented Programming|object-oriented]] (though some claim that Perl is not a cleanly designed language because of its multiple paradigms). Perl has a powerful [[regular expression]] engine built directly into its syntax. Perl is often considered the archetypal [[scripting programming languages|scripting language]] and has been called the "glue that holds the web together", as it is one of the most popular [[Common Gateway Interface|CGI]] languages. Its function as a "glue language" can be described broadly as its ability to tie together different systems and interfaces that were not designed to interoperate.

Perl is one of the [[programming language]] components of the popular [[LAMP]] free software platform for web development.

Perl is [[free software movement|free software]], available under a combination of the ''[[Artistic License]]'' and the [[GPL]]. It is available for most [[operating system|operating systems]] but is particularly prevalent on [[Unix]] and [[Unix-like]] systems (such as [[Linux]] and [[FreeBSD]]), and is growing in popularity on [[Microsoft Windows]] systems. As an example of Perl in action, [[Wikipedia]] itself was a [[Common Gateway Interface|CGI]] script written in Perl until January [[2002]]. Another example is [[Slashdot]], which runs on the Perl-based [[Slashcode]] software. When used on the web, Perl is often used in conjunction with the [[Apache web server]] and its [[mod_perl]] module.

Perl is regarded by both its proponents and detractors as something of a grab bag of features and syntax. The difference between the two camps lies in whether this is seen as a virtue or a vice. Perl votaries maintain that this varied heritage is what makes the language so useful. Reference is often made to natural languages such as [[English language|English]] and to [[evolution]]. For example, Larry Wall has argued that:

:''... we often joke that a camel is a horse designed by a committee, but if you think about it, the camel is pretty well adapted for life in the desert. The camel has evolved to be relatively self-sufficient. On the other hand, the camel has not evolved to smell good. Neither has Perl.''

In recognition of its ugly-but-useful nature, Perl has adopted the [[camel]] as its mascot; and the O'Reilly manual on Perl, ''[[Programming Perl]]'', is known as the '''camel book''': so named because of the camel that graces its cover.

== Implementation ==
A huge collection of freely usable [[perl module]]s, ranging from advanced mathematics to database connectivity, networking and more, can be downloaded from a network of sites called [[CPAN]], an [[Acronym|acronym]] for Comprehensive Perl Archive Network. Most or all of the software on CPAN is also available under either the [[Artistic License]], the [[GPL]], or both. As of [[2004]], CPAN includes more than 7,000 modules, contributed by nearly 4,000 authors.

CPAN.pm is also the name of the Perl module that downloads and installs other Perl modules from one of the CPAN mirror sites: such installations can be done with interactive prompts, or can be fully automated.

Although Perl has most of the ease-of-use features of an interpreted language, it does not strictly interpret and execute source code one line at a time. Rather, perl (the program) first compiles an entire program into an internal form (a parse tree) which is then optimized before being run. This produces a number of differences from traditional interpreters. Any syntax errors are caught during the compile stage instead of later during execution. Subroutines calls can be placed in the file before the subroutines themselves are defined. And long-running programs are rather fast and efficient compared to strictly-interpreted languages, at the expense of short programs suffering the overhead of the compile-optimize stage. Since version 5.005 it has been possible to compile a Perl program to byte code to save the compilation stage on later executions, though the "interpreter" is still needed to execute that code. This could be seen as a precursor to [[Parrot virtual machine|Parrot]].

== Current version ==
The current version, 5.8.5, includes [[Unicode]] support. Development of the next major release, Perl 6, is also underway. It will run on [[Parrot virtual machine|Parrot]], a [[virtual machine]] which is being developed as a possible multi-language target architecture.

== Built-in data types ==

Perl has three built-in [[data type]]s: [[scalar]]s, [[array]]s, and [[hash table|hashes]]. A scalar holds a single value, such as a string, number, or reference. Arrays are ordered lists of scalars indexed by number starting at 0. Hashes, or [[associative array]]s, are unordered collections of scalar values indexed by their associated key.

Scalars, arrays, and hashes can be assigned to named variables. The first character of the variable name identifies the type of data held within the variable. The remaining part identifies the particular value the variable refers to.

Names of scalar values always begin with '$', regardless of whether the variable referred to belongs to an array or hash. For example,

  $months[11]           # the 12th element of the array @months
  $address{'Jim'}       # the 'Jim' element from hash %address

Arrays are named with '@', indicating that multiple values are to be returned. For example,

  @months               # ( $months[0], $months[1], ..., $months[n] )
  @months[2,3,4]        # same as ( $months[2], $months[3], $months[4] )
  @address{'Jim','Bob'} # same as ( $address{'Jim'}, $address{'Bob'} )

Entire hashes begin with '%', as in %address.

==Control structures==

The basic control structures are similar to those used in the [[C programming language|C]] or [[Java programming language|Java]] programming languages:

===Loops===

 ''label'' while ( ''expr'' ) ''block''
 ''label'' while ( ''expr'' ) ''block'' continue ''block''
 ''label'' for ( ''expr1'' ; ''expr2'' ; ''expr3'' ) ''block''
 ''label'' foreach ''var'' ( ''list'' ) ''block''
 ''label'' foreach ''var'' ( ''list'' ) ''block'' continue ''block''

where ''block'' is a sequence of one of more perl statements surrounded by braces:

 { ''statement(s)'' }

The label, which is terminated by a colon, is optional, but if it is present it can be used by loop control statements.

* The ''next'' statement moves to the next iteration of the loop identified by the label.
* The ''last'' statement immediately terminates execution of the loop identified by the label.
* The ''redo'' statement restarts the current iteration of the loop identified by the label.

When using nested loops, the use of the label with ''next'', ''redo'' and ''last'' enables control to move from in inner loop to an outer one, or out of the outer loop altogether.

In the ''for'' statement, the semantics are similar to [[C programming language|C]].  The first expression is evaluated prior to the first loop iteration, the second expression is evaluated prior to each iteration and the loop is terminated if it evaluates to boolean false, and the third expression is evaluated after each iteration prior to deciding whether to perform the next.

The ''continue'' forms of the ''while'' and ''foreach'' provide a block to be executed after each iteration.  This provides for code that must be executed before the next iteration, even if the current iteration has been cut short by a ''next'' statement.

In ''foreach'', the ''var'' is a scalar variable.  It is optional, and if it is omitted the default loop iterator variable $_ can be used instead.  

In addition any simple expression (that is, any non-block) can be executed repeatedly by following it by one of the qualifiers:
    while (''expr'')
    until (''expr'')

which have the expected meaning.

When combined with the ''do'' construct, this provides a form of looping:

  do ''block'' while (''expr'');
  do ''block'' until (''expr'');

The test is performed after each iteration, so that the block

Due to a linguistic foible of the Perl language these are not regarded as true loops; the ''next'', ''last'' and ''redo'' statements cannot be used inside 'do' block.

By itself, ''do'' executes a string of statements once, and evaluates to the value of the last statement:

  do ''block'';

===If-then statements===

 if ( ''Boolean expression'' ) {
     ''statement(s)''
 }

 unless ( ''Boolean expression'' ) {
     ''statement(s)''
 }

 if ( ''Boolean expression'' ) {
     ''statement(s)''
 } else {
     ''statement(s)''
 }

 if ( ''Boolean expression'' ) {
     ''statement(s)''
 } elsif ( ''Boolean expression'' ) {
     ''statement(s)''
 }

===Statement modifiers===

For simple statements, <code>while</code>, <code>until</code>, <code>if</code>, <code>unless</code> and <code>foreach</code> can also be used as statement modifiers:

 ''statement'' while ''Boolean expression'';
 ''statement'' until ''Boolean expression'';
 ''statement'' if ''Boolean expression'';
 ''statement'' unless ''Boolean expression'';
 ''statement'' foreach ''list'';

The above modifiers cannot be nested, so this would be incorrect:

 ''statement'' if ''expression'' for ''list'';

and should be written as:

 ''expression'' and ''statement'' for ''list'';

The keywords <code>for</code> and <code>foreach</code> are synonyms and are always interchangeable.

===Switch statement===

There is no explicit switch statement in [[#Perl 5|Perl 5]] similar to that used in C. Switch statements are built with general blocks:

 SWITCH: {
     if (''expression'') { ''statement(s)''; last SWITCH; }
     if (''expression'') { ''statement(s)''; last SWITCH; }
     ''default statement(s)'';
 }

or:

 SWITCH: {
     ''statement'', ''statement'', last SWITCH  if ''expression'';
     ''statement'', ''statement'', last SWITCH  if ''expression'';
     ''default statement(s)'';
 }

or using <code>elsif</code>:

 if (''expression'')
     { ''statement(s)'' }
 elsif (''expression'')
     { ''statement(s)'' }
 elsif (''expression'')
     { ''statement(s)'' }
 else
     { ''default statement(s)'' }

In [[#Perl 6|Perl 6]] the switch statement is built with the <code>given</code> topicalizer and <code>when</code> "smart match" statements:

 given ''expression'' {
     when ''expression'' { ''statement(s)'' }
     when ''expression'' { ''statement(s)'' }
     default { ''statement(s)'' }
 }

== Subroutines ==
[[Subroutine]]s in Perl can be specified with the [[keyword]] <code>sub</code>.  [[Variable]]s passed to a subroutine appear in the subroutine as elements of the local (to the subroutine) scalar array <code>@_</code>.  Calling a subroutine with three scalar variables results in a <code>@_</code> with three elements, usually referred to as the scalars <code>$_[0]</code>, <code>$_[1]</code>, and <code>$_[2]</code>. Also <code>shift</code> can be used, without specifying <code>@_</code>, to obtain each value.

Changes to elements in the <code>@_</code> array within the subroutine are reflected in the  elements in the calling program.

Subroutines naturally return the value of the last expression evaluated, though explicit use of the <code>return</code> statement is often encouraged for clarity.

An example subroutine definition and call follows:

<pre>
 sub cube
 {
   my $x = shift;
   return $x * $x * $x;
 }

 $z = -4;
 $y = cube($z);
 print "$y\n";
</pre>

Named parameters are often simulated by passing a hash. For example:

<pre>
 sub greeting
 {
   my %person = @_;
   return "Hello, $person{first} $person{last}!\n";
 }

 print greeting(
   first => 'Foo',
   last  => 'Bar'
 );
</pre>

==Perl and SQL databases==

[[DBI/DBD]] modules can be used to access most [[ANSI]] [[SQL]] databases,
including [[MySQL]], [[PostgreSQL]] and [[Oracle database|Oracle]].

== Perl 5 ==
Perl5, the most current production version of perl, is an interpreter which processes the text of a Perl script at runtime. Thus, the [[debugger]] is invoked directly from the command line with

  perl -dw ScriptName.pl Argument1 ... ...

Note that there is no limit to the number of arguments: Perl is polyadic;  any number of arguments can be passed to any Perl subroutine, in general. This concept of "no arbitrary limits" is present in most other parts of the language as well. Perl can read a ten million byte string into a variable, if the machine has the memory for it.

== Perl 6 ==

Perl 6 is currently under development, and is planned to separate parsing and runtime, making a virtual machine that is more attractive to developers looking to port other languages to the architecture.  Perl 6 plans to parse itself, and moreover expose its parser to the language itself.  That is, a module could alter the [[Context free grammar|grammar]] for the program that imported it.

[[Parrot virtual machine|Parrot]] is the Perl6 runtime, and can be programmed at a low level in [[Parrot assembly language]] (PASM) or [[Parrot IMC|Intermediate Code]] (IMC or PIR, for Parrot Intermediate Representation).

Parrot has existed in a limited form since December [[2003]]. An increasing number of languages can be compiled to Parrot assembly language. Besides a subset of the planned Perl6, these include [[BASIC programming language|BASIC]], [[Befunge]], [[Brainfuck]], [[Cola programming language|Cola]], [[Forth programming language|Forth]], [[Jako]], [[m4]], [[Miniperl]], [[Ook]], [[OpenComal]], [[PHP]], [[Plot programming language|Plot]], [[Python programming language|Python]], [[Ruby programming language|Ruby]], [[Scheme]], [[Tcl]], [[URM]] and [[YAL]]. Most of these other language implementations are currently still experimental.

== Perl code samples ==
The canonical "[[hello world]]" program would be:

 <nowiki>#</nowiki>!/usr/bin/perl -w
 
 print "Hello, world!\n";

The first line is the [[shebang]], which indicates the interpreter for Unix-like operating systems. (It is the most common, but not the only way of ensuring that the perl interpreter runs the program.) The second line prints the string 'Hello world' and a [[newline]] (like a person pressing 'Return' or 'Enter').

Some people (including [[Larry Wall]]) humorously claim that Perl stands for "Pathologically Eclectic Rubbish Lister" due to its philosophy that there should be many ways to do the same thing, its growth by accretion, and its origins in report writing. 

There are many other jokes, including the annual [[Obfuscated Perl contest]], which makes an arch virtue of Perl's [[syntax|syntactical]] flexibility. The following program, which prints a greeting that is modified by a [[regular expression]], is a mild example of this pastime:

 <nowiki>#</nowiki> A sample Perl program
 $_ =&nbsp;"Hello, world! The magic number is 234542354.\n";
 print;
 s/\d+/-1/;
 print;

Here is its output:

 Hello, world! The magic number is 234542354.
 Hello, world! The magic number is -1.

<center>
===Regular expressions with Perl examples===

<table BORDER CELLPADDING="5" WIDTH="80%">
<tr>
<th>Regular Expression</th>
<th>Description</th>
<th>Example
<br>Note that all the if statements return a TRUE value</th>
</tr>

<tr>
<td>'''.'''</td>
<td>Matches an arbitrary character, but not a newline.</td>
<td align="left">
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/...../) {
  print "$string1 has length >= 5\n";
}
</pre></td>
</tr>
    
<tr>
<td>( )</td>
<td>Groups a series of pattern elements to a single element.  When you match a pattern within parentheses, 
you can use any of $1, $2, 
... later to refer to the previously matched pattern.</td>
<td align="left">
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/(H..).(o..)/) {
  print "We matched '$1' and '$2'\n";
}

<B>Output:</B>
We matched 'Hel' and 'o W';
</pre></td>
</tr>

<tr>
<td>+</td>
<td>Matches the preceding pattern element one or more times.</td>
<td align="left">
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/l+/) {
  print "There are one or more consecutive l's in $string1\n";
}
</pre></td>
</tr>

<tr>
<td>?</td>
<td>Matches zero or one times.</td>
<td align="left">
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/H.?e/) {
  print "There is an 'H' and a 'e' separated by ";
  print "0-1 characters (Ex: He Hoe)\n";
}
</pre></td>
</tr>
    
<tr>
<td>?</td>
<td>Modifies the *, +, or {M,N}'d regexp that comes before
to match as few times as possible.</td>
<td align="left">
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/(l.+?o)/) {
  print "The non-greedy match with 'l' followed by one or ";
  print "more characters is 'llo' rather than 'llo wo'.\n";
}
</pre></td>
</tr>
    
<tr>
<td>*</td>
<td>Matches zero or more times.</td>
<td align="left">
<pre class="output">
$string1 = "Hello World\n";
if ($string =~ m/el*o/) {
  print "There is an 'e' followed by zero to many";
  print "'l' followed by 'o' (eo, elo, ello, elllo)\n";
}
</pre></td>
</tr>
    
<tr>
<td>{M,N}</td>
<td>Denotes the minimum M and the maximum N match count.</td>
<td align="left">
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/l{1,2}/) {
 print "There exists a substring with at least 1";
 print "and at most 2 l's in $string1\n";
}
</pre>
</td>
</tr>
    
<tr>
<td>[...]</td>
<TD>Denotes a set of possible character matches.</TD>
<td align="left">
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/[aeiou]+/) {
  print "$string1 contains one or more vowels.\n";
}
</pre></td>
</tr>
    
<tr>
<td>|</td>
<td>Separates alternate possibilities.</td>
<td align="left">
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/(Hello|Hi|Pogo)/) {
  print "At least one of Hello, Hi, or Pogo is ";
  print "contained in $string1.\n";
}
</pre></td>
</tr>
    
<tr>
<td>\b</td>
<td>Matches a word boundary.</td>
<td align="left">
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/llo\b/) {
  print "There is a word that ends with 'llo'\n";
} else {
  print "There are no words that end with 'llo'\n";
}
</pre></td>
</tr>
    
<tr>
<td>\w</td>
<td>Matches alphanumeric, including "_".</td>
<td align="left">
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/\w/) {
  print "There is at least one alphanumeric ";
  print "character in $string1 (A-Z, a-z, 0-9, _)\n";
}
</pre></td>
</tr>
    
<tr>
<td>\W</td>
<td>Matches a non-alphanumeric character.</td>
<td align="left">
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/\W/) {
  print "The space between Hello and ";
  print "World is not alphanumeric\n";
}
</pre></td>
</tr>

<tr>
<td>\s</td>
<td>Matches a whitespace character (space, tab, newline, form feed)</td>
<td align="left">
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/\s.*\s/) {
  print "There are TWO whitespace characters, which may";
  print " be separated by other characters, in $string1";
}
</pre></td>
</tr>
    
<tr>
<td>\S</td>
<td>Matches anything BUT a whitespace.</td>
<td align="left">
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/\S.*\S/) {
  print "There are TWO non-whitespace characters, which";
  print " may be separated by other characters, in $string1";
}
</pre></td>
</tr>
    
<tr>
<td>\d</td>
<td>Matches a digit, same as [0-9].</td>
<td align="left">
<pre class="output">
$string1 = "99 bottles of beer on the wall.";
if ($string1 =~ m/(\d+)/) {
  print "$1 is the first number in '$string1'\n";
}

<B>Output:</B>
99 is the first number in '99 bottles of beer on the wall.'
</pre></td>
</tr>
    
<tr>
<td>\D</td>
<td>Matches a non-digit.</td>
<td align="left">
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/\D/) {
  print "There is at least one character in $string1";
  print " that is not a digit.\n";
}
</pre></td>
</tr>
    
<tr>
<td>^</td>
<td>Matches the beginning of a line or string.</td>
<td align="left">
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/^He/) {
  print "$string1 starts with the characters 'He'\n";
}
</pre></td>
</tr>
    
<tr>
<td>$</td>
<td>Matches the end of a line or string.</td>
<td align="left">
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/rld$/) {
  print "$string1 is a line or string";
  print "that ends with 'rld'\n";
}
</pre></td>
</tr>

<tr>
<td>\A</td>
<td>Matches the beginning of a string (but not an internal line).</td>
<td align="left">
<pre class="output">
$string1 = "Hello\nWorld\n";
if ($string1 =~ m/\AH/) {
  print "$string1 is a string";
  print "that starts with 'H'\n";
}
</pre></td>
</tr>

<tr>
<td>\Z</td>
<td>Matches the end of a string (but not an internal line).</td>
<td align="left">
<pre class="output">
$string1 = "Hello\nWorld\n";
if ($string1 =~ m/d\n\Z/) {
  print "$string1 is a string";
  print "that ends with 'd\\n'\n";
}
</pre></td>
</tr>

<tr>
<td>[^...]</td>
<td>Matches every character except the ones inside brackets.</td>
<td align="left">
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/[^abc]/) {
  print "$string1 does not contain the characters ";
  print "a, b, and c\n";
}
</pre></td>
</tr>

</table></center>

The 'm' in the above regular expressions, for example m/[^abc]/, is not required in order for perl to recognize the expression as a 'match' (cf. 'substitute': s/a/b/); /[^abc]/ could just as easily be used without the preceding 'm'. The 'm' operator can be used to alter the delimiting character; for example, m{/} may be used to enhance the legibility of patterns such as /\//. See '[http://www.perldoc.com/perl5.8.4/pod/perlre.html perldoc perlre]' for more details.

==Name==

Perl was originally named "Pearl", after "the pearl of great price" of [[Gospel of Matthew|Matthew]] 13:46. Larry Wall wanted to give the language a short name with positive connotations, and claims he looked at (and rejected) every three- and four-letter word in the dictionary. He even thought of naming it after his wife Gloria. Before the language's official release, Wall discovered that there was already a programming language named [[Pearl programming language|Pearl]], and changed the spelling of the name.

Several [[backronym]]s have been suggested, including the humorous ''Pathologically Eclectic Rubbish Lister''. ''Practical Extraction and Report Language'' has prevailed in many of today's manuals, including the official Perl [[man page]]. It is also consistent with the old name "Pearl": ''Practical Extraction And Report Language''.

The name is normally capitalized (Perl) when referring to the language, and uncapitalized (perl) when referring to the interpreter program itself. (There is a saying in the Perl community: "Nothing but perl can parse Perl.") It is not appropriate to write "PERL" as it is not an [[acronym]].

== Fun with Perl ==
In common with [[C programming language|C]], [[obfuscated code]] competitions are a popular feature of Perl culture.
Similar to obfuscated code but with a different purpose, Perl [[Poetry]] is the practice of writing poems that can actually be compiled by perl. This hobby is more or less unique to Perl, due to the large number of regular English words used in the language. New poems are regularly published in the [[Perl Monks]] site's [http://www.perlmonks.org/index.pl?node=Perl%20Poetry Perl Poetry] section.

Another popular pastime is Perl golf. As with [[golf|the physical sport]], the objective is to reduce the number of strokes that it takes to complete a particular objective, but here "strokes" refers to keystrokes rather than swings of a golf club. A task, such as "scan an input string and return the longest [[palindrome]] that it contains", is proposed, and participants try to outdo each other by writing solutions that require fewer and fewer characters of Perl source code.

Another tradition among Perl [[hacker]]s is writing JAPHs, which are short obfuscated programs that print out the phrase "[[Just another Perl hacker]]," (including comma).

One of the most bizarre Perl modules is Lingua::Romana::Perligata. This module translates the source code of a script that uses it from Latin into Perl, allowing the programmer to write executable programs in Latin.

== Perl humor == 
*[http://wikibooks.org/wiki/Programming:Perl_humour Perl humour on wikibooks]
*[http://www.perl.com/pub/a/2003/07/16/soto2003.html State of the Onion 2003 (Larry Wall on Perl 6)]
*[http://www.cmpe.boun.edu.tr/~kosar/other/lwall.html Larry Wall quotes]
*[http://search.cpan.org/perldoc?Lingua::Romana::Perligata Lingua::Romana::Perligata - Write Perl in Latin!]
*[http://www.perlmonks.org/index.pl?node_id=253797 A tutorial on Perligata]
*[http://www.softpanorama.org/Bulletin/Humor/humor092.html Perl Purity Test]

== See also ==
* [[Obfuscated Perl contest]]
* [[POE]] -- Perl Object Environment
* [[Fibonacci number program]]
* [[Perl poetry]]
* [[List of Perl programs]]

==External links==

*[http://www.perl.org/ Perl.org] &ndash; The Perl Directory
*[http://www.perl.com/ Perl.com] &ndash; Perl on [[O'Reilly Network]]
*[http://www.perldoc.com/ Perldoc] &ndash; online Perl POD documentation

===User groups===

*[http://www.pm.org/ Perl Mongers] &ndash; local user groups in cities worldwide
*[http://www.perlmonks.org/ PerlMonks] &ndash; an active and popular online user group and discussion forum
*[http://use.perl.org/ use Perl;] &ndash; Perl news and community discussion

===Distributions===

*[http://www.cpan.org/ CPAN] &ndash; Comprehensive Perl Archive Network, Perl source distribution
*[http://search.cpan.org/ Search the Comprehensive Perl Archive Network]
*[http://www.activestate.com/ ActiveState] &ndash; Perl for [[Microsoft Windows]] platforms
*[http://www.indigostar.com/indigoperl.htm IndigoPerl] &ndash; another distribution of Perl for Microsoft Windows
*[http://www.cpan.org/ports/index.html#win32 Windows ports on CPAN] &ndash; more distributions of Perl for Microsoft Windows
*[http://www.cpan.org/ports/index.html CPAN ports] &ndash; binary distributions for other platforms

===Development===

*[http://dev.perl.org/perl5/ Perl 5 development]
*[http://dev.perl.org/perl6/ Perl 6 development]
*[http://www.parrotcode.org/ Parrot virtual machine]
*[http://www.poniecode.org/ Project Ponie] &ndash; Perl 5 running on top of Parrot

===History===

*[http://history.perl.org/PerlTimeline.html Perl Timeline]
*[http://groups.google.com/groups?selm=4628%40sdcrdcf.UUCP First reference to "Perl" on Usenet]
*[http://dev.perl.org/perl1/ The origin of Perl] &ndash; "Stability. Speed. Simplicity. perl1 is here."

===Miscellaneous===

*[http://dmoz.org/Computers/Programming/Languages/Perl/ Perl related websites] in the [[Open Directory Project]]
*[http://www.wired.com/wired/archive/8.10/cruise_pr.html ''Scripting on the Lido Deck'' by Steve Silberman, Wired Magazine article about Perl Whirl 2000]
*[http://www.linuxjournal.com/article.php?sid=3394 Interview with Larry Wall on Perl (May 01, 1999)]
*[http://www.perlmonks.org/index.pl?node=(Golf)%20Nearest%20Neighbors An example of a golf contest]
*[http://www.perlmonks.org/index.pl?node_id=292135 A script written in Piratese]

==Books==
{{book}}
*[[Programming Perl]] (also known as the ''Camel book'')
*[[Perl Cookbook]]
*[[Learning Perl]] (also called the ''Llama book'')

{{Major programming languages small}}

[[cs:Perl]] [[da:Perl]] [[de:Perl]] [[et:Perl]] [[es:Perl]] [[eo:Perl Komputillingvo]] [[fr:Perl (langage)]] [[it:Perl]] [[ja:Perl]] [[lb:Perl]] [[lt:Perl]] [[nl:Perl]] [[pl:Perl]] [[pt:Perl]] [[fi:Perl]] [[sv:Perl]] [[zh:Perl]]

[[Category:Curly bracket programming languages]][[Category:Free software]][[Category:NET programming languages]][[Category:Procedural programming languages]][[Category:Scripting languages]] [[Category:Text-oriented programming languages]]