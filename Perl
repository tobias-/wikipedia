{{about|the programming language}}
{{distinguish|Pearl}}
{{Use mdy dates|date=September 2014}}
{{good article}}
{{Infobox programming language
| name                   = Perl
| logo                   = [[File:Programming-republic-of-perl.png]]
| paradigm               = [[multi-paradigm]]: [[Functional programming|functional]], [[Imperative programming|imperative]], [[Object-oriented programming|object-oriented]] ([[Class-based programming|class-based]]), [[Reflective programming|reflective]], [[Procedural programming|procedural]], [[Event-driven programming|event-driven]], [[Generic programming|generic]]
| designer               = [[Larry Wall]]
| developer              = Larry Wall
| typing                 = Dynamic
| influenced             = [[CoffeeScript]],{{citation needed|date=January 2016}} [[ECMAScript]]/[[JavaScript]], [[Falcon (programming language)|Falcon]], [[Groovy (programming language)|Groovy]],{{citation needed|date=February 2016}} [[Julia (programming language)|Julia]], [[LPC (programming language)|LPC]], [[Perl 6]], [[PHP]], [[Python (programming language)|Python]], [[Ruby (programming language)|Ruby]], [[Windows PowerShell]]
| license                = [[Artistic License]] 1.0<ref name="artistic-1.0">[http://dev.perl.org/licenses/artistic.html The "Artistic License" - dev.perl.org]</ref><ref name="artistic-1.0-git">[http://perl5.git.perl.org/perl.git/blob/HEAD:/Artistic Artistic] - file on the Perl 5 git repository</ref> or [[GNU General Public License]]<ref name="licensing">{{cite web |url = http://dev.perl.org/licenses |title = Perl Licensing |accessdate = 2011-01-08 |publisher = dev.perl.org }}</ref>
| website                = {{url|https://www.perl.org}}
| wikibooks              = Perl Programming
| year                   = {{Start date and age|1987|12|18}}
| latest_release_version = 5.24.1 / {{Start date and age|mf=yes|2017|01|14}}<ref>{{cite web |url = http://www.nntp.perl.org/group/perl.perl5.porters/2017/01/msg242259.html |title = Perl 5.24.1 is now available! |accessdate = 2017-01-15 |publisher = www.nntp.perl.org }}</ref><br />5.22.3 / {{Start date and age|mf=yes|2017|01|14}}<ref>{{cite web |url = http://www.nntp.perl.org/group/perl.perl5.porters/2017/01/msg242258.html |title = Perl 5.22.3 is now available! |accessdate = 2017-01-18 |publisher = www.nntp.perl.org }}</ref>
| latest_release_date    = 
| latest_preview_version = 5.25.9<ref>{{cite web |url = http://www.nntp.perl.org/group/perl.perl5.porters/2017/01/msg242405.html |title = 5.25.9 is now available! |publisher = perl.org |date = 2017-01-20 |accessdate = 2017-01-22 }}</ref>
| latest_preview_date    = {{Start date and age|mf=yes|2016|12|20}}
| turing-complete        = Yes
| influenced_by          = [[AWK (programming language)|AWK]], [[Smalltalk 80]], [[Lisp (programming language)|Lisp]], [[C (programming language)|C]], [[C++]], [[sed]], [[Unix shell]], [[Pascal (programming language)|Pascal]]
| programming_language   = [[C (programming language)|C]]
| operating_system       = [[Cross-platform]]
| file_ext               = .pl .pm .t .pod
}}

'''Perl''' is a family of [[High-level programming language|high-level]], [[General-purpose programming language|general-purpose]], [[Interpreter (computing)|interpreted]], [[dynamic programming language]]s. The languages in this family include Perl 5 and [[Perl 6]].<ref>{{cite web |url = https://www.perl.org/about.html |title = About Perl |publisher = perl.org |quote = "Perl" is a family of languages, "Perl 6" is part of the family, but it is a separate language that has its own development team. Its existence has no significant impact on the continuing development of "Perl 5". |accessdate = 2013-04-20 }}</ref>

Though Perl is not officially an acronym,<ref>{{cite web |url = http://learn.perl.org/faq/perlfaq1.html#Whats-the-difference-between-perl-and-Perl |title = General Questions About Perl |last = Lapworth |first = Leo |publisher = Perl.org |work = Perl FAQ |accessdate = February 24, 2012 }}</ref> there are various [[backronym]]s in use, the best-known being "Practical [[Data extraction|Extraction]] and Reporting Language".<ref>{{cite web |url = http://linux.die.net/man/1/perl |title = perl(1): Practical Extraction/Report Language - Linux man page |date =  |publisher = Linux.die.net |accessdate = 2013-07-23 }}</ref> Perl was originally developed by [[Larry Wall]] in 1987 as a general-purpose [[Unix]] [[scripting language]] to make report processing easier.<ref name="sheppard00">{{cite web |url = http://www.perl.com/pub/2000/10/begperl1.html |title = Beginner's Introduction to Perl |last = Sheppard |first = Doug |date = 2000-10-16 |publisher = dev.perl.org |accessdate = 2011-01-08 }}</ref> Since then, it has undergone many changes and revisions. [[Perl 6]], which began as a redesign of Perl 5 in 2000, eventually evolved into a separate language. Both languages continue to be developed independently by different development teams and liberally borrow ideas from one another.

The Perl languages borrow features from other programming languages including [[C (programming language)|C]], [[shell script]] ([[Bourne shell|sh]]), [[AWK (programming language)|AWK]], and [[sed]].<ref name="perltimeline">{{cite web |url = http://history.perl.org/PerlTimeline.html |title = The Timeline of Perl and its Culture (v3.0_0505) |year = 1999 |author = Ashton, Elaine }}</ref> They provide powerful text processing facilities without the arbitrary data-length limits of many contemporary [[Unix commandline tools]],<ref name="programmingperl2">{{cite book |title = Programming Perl, Third Edition |date = July 2000 |publisher = [[O'Reilly Media]] |isbn = 0-596-00027-8 |author = [[Larry Wall|Wall, Larry]], Tom Christiansen and [[Jon Orwant]] }}</ref> facilitating easy manipulation of [[text file]]s. Perl 5 gained widespread popularity in the late 1990s as a [[Common Gateway Interface|CGI scripting]] language, in part due to its unsurpassed<ref>{{cite web |url = http://www.catb.org/esr/writings/taoup/html/ch14s04.html#perl |title = Language Evaluations |quote = Perl's strongest point is its extremely powerful built-in facilities for pattern-directed processing of textual, line-oriented data formats; it is unsurpassed at this. }}</ref><ref>{{cite web |url = http://www.cio.com/article/2437271/developer/you-used-perl-to-write-what--.html |title = You Used Perl to Write WHAT?! |quote = perl has always been the go-to language for any task that involves pattern-matching input }}</ref><ref>{{cite web |url = http://archive.oreilly.com/pub/a/oreilly/perl/news/importance_0498.html |title = The Importance of Perl |quote = Perl's unparalleled ability to process text... }}</ref>  [[regular expression]] and [[String (computing)|string]] [[parsing]] abilities.<ref name="roderick02">{{cite book |title = Advanced Linux Networking |date = June 21, 2002 |publisher = Addison-Wesley Professional |isbn = 978-0-201-77423-8 |page = 594 |last1 = Smith |first1 = Roderick W. }}</ref>

In addition to CGI, Perl 5 is used for [[Computer graphics (computer science)|graphics programming]], [[System administrator|system administration]], [[Computer network programming|network programming]], finance, [[bioinformatics]], and other applications. It has been nicknamed "the Swiss Army chainsaw <!-- Note to editors. This should read *chainsaw*, not knife. Check the ref -->of scripting languages" because of its flexibility and power,<ref>{{cite web |url = http://www.perl.com/pub/a/2000/10/begperl1.html |title = Beginner's Introduction to Perl |last = Sheppard |first = Doug |date = 2000-10-16 |publisher = [[O'Reilly Media]] |accessdate = 2008-07-27 }}</ref> and possibly also because of its "ugliness".<ref>{{cite web |url = http://www.catb.org/jargon/html/S/Swiss-Army-chainsaw.html |title = Swiss Army chainsaw |last = Raymond |first = Eric |date = 2003-12-23 |work = The Jargon File |accessdate = 2014-11-29 }}</ref> In 1998, it was also referred to as the "[[duct tape]] that holds the Internet together", in reference to both its ubiquitous use as a [[glue language]] and its perceived inelegance.<ref name="leonard98">{{cite web |url = http://www.salon.com/1998/10/13/feature_269/ |title = The joy of Perl |last = Leonard |first = Andrew |publisher = [[Salon.com]] |accessdate = 2012-06-05 }}</ref>

==History==

===Early versions===
[[Larry Wall]] began work on Perl in 1987, while working as a programmer at [[Unisys]],<ref name="programmingperl2" /> and released version 1.0 to the comp.sources.misc [[newsgroup]] on December 18, 1987.<ref>{{cite newsgroup |author = Larry Wall |title = v13i001: Perl, a "replacement" for awk and sed, Part01/10 |date = 1988-02-01 |newsgroup = comp.sources.unix |message-id =  |url = http://groups.google.com/group/comp.sources.unix/tree/browse_frm/month/1988-02?_done=%2Fgroup%2Fcomp.sources.unix%2Fbrowse_frm%2Fmonth%2F1988-02%3F& |accessdate = 2011-01-13 }}</ref> The language expanded rapidly over the next few years.

Perl 2, released in 1988, featured a better regular expression engine. Perl 3, released in 1989, added support for [[binary data]] streams.

Originally, the only documentation for Perl was a single (increasingly lengthy) [[man page]]. In 1991, ''[[Programming Perl]]'', known to many Perl programmers as the "Camel Book" because of its cover, was published and became the ''de facto'' reference for the language. At the same time, the Perl version number was bumped to 4, not to mark a major change in the language but to identify the version that was well documented by the book.

===Early Perl 5===
{{main article|Perl 5 version history}}

Perl 4 went through a series of [[maintenance release]]s, culminating in Perl 4.036 in 1993. At that point, Wall abandoned Perl 4 to begin work on Perl 5.  Initial design of Perl 5 continued into 1994. The ''perl5-porters'' [[mailing list]] was established in May 1994 to coordinate work on porting Perl 5 to different platforms. It remains the primary forum for development, maintenance, and porting of Perl 5.<ref>{{cite web |url = http://www.nntp.perl.org/group/perl.perl5.porters/ |title = perl.perl5.porters archive |accessdate = 2011-01-13 |publisher = perl.org }}</ref>

Perl 5.000 was released on October 17, 1994.<ref>{{cite web |url = http://perldoc.perl.org/perlhist.html |title = perlhist - the Perl history records |accessdate = 2011-01-21 |work = Perl 5 version 12.2 documentation |publisher = perldoc.perl.org }}</ref> It was a nearly complete rewrite of the [[interpreter (computing)|interpreter]], and it added many new features to the language, including [[Object (computer science)|objects]], [[Reference (computer science)|references]], [[Local variable|lexical (my) variables]], and [[Module (programming)|modules]]. Importantly, modules provided a mechanism for extending the language without modifying the interpreter. This allowed the core interpreter to stabilize, even as it enabled ordinary Perl programmers to add new language features.  Perl 5 has been in active development since then.

Perl 5.001 was released on March 13, 1995.  Perl 5.002 was released on February 29, 1996 with the new prototypes feature.  This allowed module authors to make [[subroutine]]s that behaved like Perl [[Shell builtin|builtins]].  Perl 5.003 was released June 25, 1996, as a security release.

One of the most important events in Perl 5 history took place outside of the language proper and was a consequence of its module support. On October 26, 1995, the [[Comprehensive Perl Archive Network]] (CPAN) was established as a [[Software repository|repository]] for [[Perl module]]s and Perl itself; as of June 2015, it carries over 150,775 modules in 31,896 distributions, written by more than 12,219 authors, and is mirrored worldwide at more than 253 locations.<ref>{{cite web |url = https://metacpan.org/ |title = CPAN |accessdate = 2015-06-02 |publisher = [[CPAN]] }}</ref>

Perl 5.004 was released on May 15, 1997, and included among other things the UNIVERSAL package, giving Perl a base object to which all [[Class (computer programming)|classes]] were automatically derived and the ability to require versions of modules. Another significant development was the inclusion of the [[CGI.pm]] module,<ref name="5004delta">{{cite web |url = http://perldoc.perl.org/perl5004delta.html |title = perl5004delta - what's new for perl5.004 |accessdate = 2011-01-08 |work = Perl 5 version 12.2 documentation |publisher = perldoc.perl.org }}</ref> which contributed to Perl's popularity as a [[Common Gateway Interface|CGI scripting language]].<ref name="patwardhan02">{{cite book |last1 = Patwardhan |first1 = Nathan |last2 = Siever |first2 = Ellen |last3 = Spainhour |first3 = Stephen |title = Perl in a Nutshell, Second Edition |publisher = O'Reilly Media |year = 2002 |isbn = 978-0-596-00241-1 }}</ref>

Perl is also now supported running under [[Microsoft Windows]] and several other operating systems.<ref name="5004delta" />

Perl 5.005 was released on July 22, 1998.  This release included several enhancements to the [[Regular expression|regex]] engine, new hooks into the backend through the <code>B::*</code> modules, the <code>qr//</code> regex quote operator, a large selection of other new core modules, and added support for several more operating systems, including [[BeOS]].<ref name="5005delta">{{cite web |url = http://perldoc.perl.org/perl5005delta.html |title = perl5005delta - what's new for perl5.005 |accessdate = 2011-01-21 |work = Perl 5 version 12.2 documentation |publisher = perldoc.perl.org }}</ref>

===2000–present===
{| class="wikitable floatright"
|-
! Major version
! Latest update
|-
| {{Version|o|5.5}}
| 2004-02-23<ref name="cpan-src">{{cite web |url = http://www.cpan.org/src/ |title = Perl Source |publisher = www.cpan.org |date =  |accessdate = 2015-12-01 }}</ref>
|-
| {{Version|o|5.6}}
| 2003-11-15<ref name="cpan-src" />
|-
| {{Version|o|5.8}}
| 2008-12-14<ref name="cpan-src" />
|-
| {{Version|o|5.10}}
| 2009-08-23<ref name="cpan-src" />
|-
| {{Version|o|5.12}}
| 2012-11-10<ref name="cpan-src" />
|-
| {{Version|o|5.14}}
| 2013-03-10<ref name="cpan-src" />
|-
| {{Version|o|5.16}}
| 2013-03-11<ref name="cpan-src" />
|-
| {{Version|o|5.18}}
| 2014-10-02<ref name="cpan-src" />
|-
| {{Version|o|5.20}}
| 2015-09-12<ref name="cpan-src" />
|-
| {{Version|co|5.22}}
| 2016-04-29<ref name="cpan-src" />
|-
| {{Version|c|5.24}}
| 2016-05-09<ref name="cpan-src" />
|-
| colspan="99" | <small>{{Version |lv |show=011101}}</small>
|}
Perl 5.6 was released on March 22, 2000.  Major changes included [[64-bit computing|64-bit]] support, [[Unicode]] string representation, large file support (i.e. files over 2 GiB) and the "our" keyword.<ref name="56delta">{{cite web |url = http://perldoc.perl.org/perl56delta.html |title = perl56delta - what's new for perl v5.6.0 |accessdate = 2011-01-21 |work = Perl 5 version 12.2 documentation |publisher = perldoc.perl.org }}</ref><ref name="561delta">{{cite web |url = http://perldoc.perl.org/perl561delta.html |title = perl56delta - what's new for perl v5.6.x |accessdate = 2011-01-21 |work = Perl 5 version 12.2 documentation |publisher = perldoc.perl.org }}</ref>  When developing Perl 5.6, the decision was made to switch the [[software versioning|versioning]] scheme to one more similar to other open source projects; after 5.005_63, the next version became 5.5.640, with plans for development versions to have odd numbers and stable versions to have even numbers.

In 2000, Wall put forth a call for suggestions for a new version of Perl from the community. The process resulted in 361 RFC (request for comments) documents that were to be used in guiding development of Perl 6. In 2001,<ref>{{cite web |url = http://dev.perl.org/perl6/doc/design/apo/A01.html |title = Apocalypse 1: The Ugly, the Bad, and the Good |accessdate = 2011-01-08 |last = Wall |first = Larry }}</ref> work began on the "Apocalypses" for [[Perl 6]], a series of documents meant to summarize the change requests and present the design of the next generation of Perl. They were presented as a digest of the RFCs, rather than a formal document. At this point, Perl 6 existed only as a description of a language.

Perl 5.8 was first released on July 18, 2002, and had nearly yearly updates since then. Perl 5.8 improved Unicode support, added a new I/O implementation, added a new thread implementation, improved numeric accuracy, and added several new modules.<ref name="perl58delta">{{cite web |url = http://perldoc.perl.org/perl58delta.html |title = perl58delta - what is new for perl v5.8.0 |accessdate = 2011-01-21 |work = Perl 5 version 12.2 documentation |publisher = perldoc.perl.org }}</ref> As of 2013 this version still remains the most popular version of Perl and is used by Red Hat 5, Suse 10, Solaris 10, HP-UX 11.31 and AIX 5.

In 2004, work began on the "Synopses" – documents that originally summarized the Apocalypses, but which became the specification for the Perl 6 language. In February 2005, [[Audrey Tang]] began work on [[Pugs]], a Perl 6 interpreter written in [[Haskell (programming language)|Haskell]].<ref>{{cite web |url = http://www.perl.com/pub/a/2005/03/03/pugs_interview.html |title = A Plan for Pugs |date = 2005-03-03 |publisher = [[O'Reilly Media]] |accessdate = 2011-01-27 }}</ref> This was the first concerted effort towards making Perl 6 a reality.  This effort stalled in 2006.<ref>{{cite web |url = http://www.perlmonks.org/?node_id=835936 |title = Re: How to Implement Perl 6 in Ten Years |accessdate = 2011-01-03 |last = Tang |first = Audrey |date = 2010-04-21 |publisher = [[PerlMonks]] }}</ref>

On December 18, 2007, the 20th anniversary of Perl 1.0, Perl 5.10.0 was released. Perl 5.10.0 included notable new features, which brought it closer to [[Perl 6]]. These included a [[switch statement]] (called "given"/"when"), regular expressions updates, and the smart match operator, "~~".<ref name="5100delta">{{cite web |url = http://perldoc.perl.org/perl5100delta.html |title = perl5100delta - what is new for perl 5.10.0 |accessdate = 2011-01-08 |work = Perl 5 version 12.2 documentation |publisher = perldoc.perl.org }}</ref><ref name="perlsyn-smart">{{cite web |url = http://perldoc.perl.org/perlsyn.html#Smart-matching-in-detail |title = perlsyn - Perl syntax |accessdate = 2011-01-21 |work = Perl 5 version 12.2 documentation |publisher = perldoc.perl.org }}</ref>
Around this same time, development began in earnest on another implementation of Perl 6 known as [[Rakudo Perl]], developed in tandem with the [[Parrot virtual machine]].  As of November 2009, Rakudo Perl has had regular monthly releases and now is the most complete implementation of [[Perl 6]].

A major change in the development process of Perl 5 occurred with Perl 5.11; the development community has switched to a monthly release cycle of development releases, with a yearly schedule of stable releases. By that plan, bugfix point releases will follow the stable releases every three months.

On April 12, 2010, Perl 5.12.0 was released. Notable core enhancements include new <code>package NAME VERSION</code> syntax, the Yada Yada operator (intended to mark placeholder code that is not yet implemented), implicit strictures<!-- "strictures" is not a typo -->, full [[Y2038]] compliance, regex conversion overloading, [[DTrace]] support, and [[Unicode]] 5.2.<ref name="5120delta">{{cite web |url = http://perldoc.perl.org/perl5120delta.html |title = perl5120delta - what is new for perl v5.12.0 |accessdate = 2011-01-08 |work = Perl 5 version 12.2 documentation |publisher = perldoc.perl.org }}</ref> On January 21, 2011, Perl 5.12.3 was released; it contains updated modules and some documentation changes.<ref name="5123delta">{{cite web |url = http://perldoc.perl.org/perl5123delta.html |title = perldelta - what is new for perl v5.12.3 |accessdate = 2011-01-08 |work = Perl 5 version 12.2 documentation |publisher = perldoc.perl.org }}</ref> Version 5.12.4 was released on June 20, 2011. The latest version of that branch, 5.12.5, was released on November 10, 2012.

On May 14, 2011, Perl 5.14 was released. [[JSON]] support is built-in as of 5.14.2. The latest version of that branch, 5.14.4, was released on March 10, 2013.

On May 20, 2012, Perl 5.16 was released. Notable new features include the ability to specify a given version of Perl that one wishes to emulate, allowing users to upgrade their version of Perl, but still run old scripts that would normally be incompatible.<ref name="5160delta_version">{{cite web |url = https://metacpan.org/module/RJBS/perl-5.16.0/pod/perldelta.pod |title = perldelta - what is new for perl v5.16.0 |accessdate = 2012-05-21 |work = Perl 5 version 16.0 documentation |publisher = metacpan.org }}</ref> Perl 5.16 also updates the core to support [[Unicode]] 6.1.<ref name="5160delta_version" />

On May 18, 2013, Perl 5.18 was released. Notable new features include the new dtrace hooks, lexical subs, more CORE:: subs, overhaul of the hash for security reasons, support for Unicode 6.2.<ref name="5180delta_version">{{cite web |url = https://metacpan.org/pod/release/RJBS/perl-5.18.1/pod/perl5180delta.pod |title = perl5180delta - what is new for perl v5.18.0 - Perl programming language |accessdate = 2013-10-27 |work = Perl 5 version 18.0 documentation |publisher = metacpan.org }}</ref>

On May 27, 2014, Perl 5.20 was released. Notable new features include subroutine signatures, hash slices/new slice syntax, postfix dereferencing (experimental), Unicode 6.3, rand() using consistent random number generator.<ref name="5200delta_version">{{cite web |url = https://metacpan.org/source/RJBS/perl-5.20.0/pod/perldelta.pod |title = perl5200delta - what is new for perl v5.20.0 - Perl programming language |accessdate = 2014-05-27 |work = Perl 5 version 20.0 documentation |publisher = metacpan.org }}</ref>

Some observers credit the release of Perl 5.10 with the start of the Modern Perl movement.<ref>[http://www.modernperlbooks.com/mt/2009/07/milestones-in-the-perl-renaissance.html Milestones in the Perl Renaissance - Modern Perl Programming]. Modernperlbooks.com. Retrieved on 2013-07-17.</ref> In particular, this phrase describes a style of development that embraces the use of the CPAN, takes advantage of recent developments in the language, and is rigorous about creating high quality code.<ref>[http://modernperlbooks.com/books/modern_perl/ Preface (Modern Perl 2011-2012)]. Modernperlbooks.com. Retrieved on 2013-07-17.</ref> While the book "Modern Perl"<ref>[http://onyxneon.com/books/modern_perl/ Modern Perl 2011-2012 edition by chromatic | Onyx Neon Press]. Onyxneon.com. Retrieved on 2013-07-17.</ref> may be the most visible standard-bearer of this idea, other groups such as the Enlightened Perl Organization<ref>http://www.enlightenedperl.org/</ref> have taken up the cause.

In late 2012 and 2013 several projects for alternative implementations for Perl 5 started: Perl5 in [[Perl6]] by the Rakudo Perl team,<ref>{{cite web |url = http://www.yapcna.org/yn2013/talk/4725 |title = YAPC::NA 2013 - June 3-5, Austin, Texas |publisher = Yapcna.org |date = 2013-06-04 |accessdate = 2014-04-11 }}</ref> ''moe'' by Stevan Little and friends,<ref>{{cite web |last = Little |first = Stevan |url = http://blogs.perl.org/users/stevan_little/2013/02/what-is-moe-a-clarification.html |title = What is Moe (a clarification) &#124; Stevan Little |publisher = Blogs.perl.org |date = 2013-02-08 |accessdate = 2014-04-11 }}</ref> ''p2''<ref>{{cite web |url = http://perl11.org/p2/ |title = p2 on potion |publisher = Perl11.org |date = 2004-02-07 |accessdate = 2014-04-11 }}</ref> by the Perl11 team under Reini Urban, ''gperl'' by goccy,<ref>{{cite web |url = https://github.com/goccy/gperl/ |title = goccy/gperl 路 GitHub |publisher = Github.com |date =  |accessdate = 2014-04-11 }}</ref> and ''rperl'' a kickstarter project led by Will Braswell and affiliated with the Perll11 project.<ref>{{cite web |url = http://rperl.org/faq.html |title = rperl |publisher = RPerl.org |date =  |accessdate = 2014-08-11 }}</ref>

===PONIE===
'''PONIE''' is an acronym for Perl On New Internal Engine. The PONIE Project existed from 2003 until 2006 and was to be a bridge between Perl 5 and [[Perl 6]]. It was an effort to rewrite the Perl 5 interpreter to run on [[Parrot virtual machine|Parrot]], the Perl 6 virtual machine. The goal was to ensure the future of the millions of lines of Perl 5 code at thousands of companies around the world.<ref>{{citation | title = OSCON 4.4: Inside Ponie, the Bridge from Perl 5 to Perl 6 | date = August 8, 2005 <!-- 8:52PM  --> | author =  Geoff Broadwell | url = http://www.oreillynet.com/onlamp/blog/2005/08/oscon_44_inside_ponie_the_brid.html | publisher = O'Reilly ONLamp Blog }}</ref>

The PONIE project ended in 2006 and is no longer being actively developed.  Some of the improvements made to the Perl 5 interpreter as part of PONIE were folded into that project.<ref>{{citation | title = Ponie has been put out to pasture | author = [[Jesse Vincent]] | date = August 23, 2006<!-- 10:40 PM -->| url = http://news.perlfoundation.org/2006/08/ponie_has_been_put_out_to_past.html | publisher = The Perl Foundation }}</ref>

===Name===
Perl was originally named "Pearl". Wall wanted to give the language a short name with positive connotations; he claims that he considered (and rejected) every three- and four-letter word in the dictionary. He also considered naming it after his wife Gloria. Wall discovered the existing [[PEARL (programming language)|PEARL]] programming language before Perl's official release and changed the spelling of the name.<ref name="richardson1999">{{cite journal |url = http://www.linuxjournal.com/article/3394 |title = Larry Wall, the Guru of Perl |accessdate = 2011-01-03 |last = Richardson |first = Marjorie |date = 1999-05-01 |work = [[Linux Journal]] }}</ref>

When referring to the language, the name is normally capitalized (''Perl'') as a proper noun. When referring to the interpreter program itself, the name is often uncapitalized (''perl'') because most Unix-like file systems are case-sensitive. Before the release of the first edition of ''Programming Perl'', it was common to refer to the language as ''perl''; [[Randal L. Schwartz]], however, capitalized the language's name in the book to make it stand out better when typeset. This case distinction was subsequently documented as canonical.<ref name="capitalization">{{cite web |url = http://perldoc.perl.org/perlfaq1.html#What's-the-difference-between-%22perl%22-and-%22Perl%22%3f |title = perlfaq1: What's the difference between "perl" and "Perl"? |work = perldoc.perl.org - Perl 5 version 12.2 documentation }}</ref>

The name is occasionally expanded as ''Practical Extraction and Report Language'', but this is a [[backronym]].<ref>{{cite book |last1 = Schwartz |first1 = Randal |authorlink1 = Randal Schwartz |last2 = foy |first2 = brian |authorlink2 = brian d foy |last3 = Phoenix |first3 = Tom |title = Learning Perl |publisher = O'Reilly Media, Inc. |date = June 16, 2011 |page = 4 |isbn = 978-1449313142 |quote = Perl is sometimes called the "Practical Extraction and Report Language," although it has also been called a "Pathologically Eclectic Rubbish Lister," among other expansions. It's actually a backronym, not an acronym, since Larry Wall, Perl’s creator, came up with the name first and the expansion later. That’s why "Perl" isn’t in all caps. There's no point in arguing that expansion is correct: Larry endorses both. }}</ref> Other expansions have been suggested as equally canonical, including Wall's own humorous ''Pathologically Eclectic Rubbish Lister''.<ref>{{cite web |last = Wall |first = Larry |authorlink = Larry Wall |title = perl - The Perl language interpreter |work = Perl 5 version 12.2 documentation |url = http://perldoc.perl.org/perl.html#BUGS |accessdate = 2011-01-26 }}</ref> Indeed, Wall claims that the name was intended to inspire many different expansions.<ref>{{cite web |last = Wall |first = Larry |authorlink = Larry Wall |title = Re^7: PERL as shibboleth and the Perl community |url = http://www.perlmonks.org/index.pl?node_id=511722 |publisher = [[PerlMonks]] |accessdate = 2011-01-02 }}</ref>

===Camel symbol===
[[File:Perl-camel-small.png|thumb|The Camel symbol used by O'Reilly Media]]
''Programming Perl'', published by [[O'Reilly Media]], features a picture of a [[camel|dromedary camel]] on the cover and is commonly called the "Camel Book".<ref name="schwartz01">{{cite book |last1 = Schwartz |first1 = Randal L |authorlink1 = Randal L. Schwartz |last2 = Phoenix |first2 = Tom |last3 = Foy |first3 = Brian |authorlink3 = Brian D Foy |title = Learning Perl, Third Edition |isbn = 978-0-596-00132-2 }}</ref> This image of a camel has become an unofficial symbol of Perl as well as a general [[Hacker (programmer subculture)|hacker]] emblem, appearing on T-shirts and other clothing items.

O'Reilly owns the image as a [[trademark]] but licenses it for [[non-commercial]] use, requiring only an acknowledgement and a link to www.perl.com. Licensing for commercial use is decided on a case by case basis.<ref name="camel">{{cite web |url = http://onlamp.com/pub/a/oreilly/perl/usage/ |title = The Perl Camel Usage and Trademark Information |accessdate = 2011-01-09 |publisher = [[O'Reilly Media]] }}</ref> O'Reilly also provides "Programming Republic of Perl" logos for non-commercial sites and "Powered by Perl" buttons for any site that uses Perl.<ref name="camel" />

===Onion symbol===
[[File:Onion 64x64.png|thumb|120x120px|The onion logo used by The Perl Foundation]]
[[The Perl Foundation]] owns an alternative symbol, an onion, which it licenses to its subsidiaries, [[Perl Mongers]], [[PerlMonks]], Perl.org, and others.<ref name="onion">{{cite web |url = http://www.perlfoundation.org/perl_trademark |title = Perl Trademark |accessdate = 2011-01-09 |publisher = [[The Perl Foundation]] }}</ref> The symbol is a [[visual pun]] on [[pearl onion]].<ref name="gillmore98">{{cite news |first = Dan |last = Gillmore |title = Republic Of Perl |date = 1998-10-25 |url = http://articles.chicagotribune.com/1998-10-25/news/9810250094_1_programmers-open-source-movement-programming-community |work = Chicago Tribune |accessdate = 2011-01-10 }}</ref>

==Overview==
{{Main article|Perl language structure}}
According to Wall, Perl has two slogans. The first is "[[There's more than one way to do it]]", commonly known as TMTOWTDI. The second slogan is "Easy things should be easy and hard things should be possible".<ref name="programmingperl2" />

===Features===
The overall structure of Perl derives broadly from C. Perl is [[procedural programming|procedural]] in nature, with [[variable (programming)|variable]]s, [[expression (programming)|expressions]], [[assignment statement]]s, [[bracket|brace]]-delimited [[block (programming)|block]]s, [[control structure]]s, and [[subroutine]]s.

Perl also takes features from shell programming. All variables are marked with leading [[sigil (computer programming)|sigils]], which allow variables to be [[Variable interpolation|interpolated]] directly into [[String (computer science)|strings]]. However, unlike the shell, Perl uses sigils on all accesses to variables, and unlike most other programming languages that use sigils, the sigil doesn't denote the type of the variable but the type of the expression. So for example, to access a list of values in a [[Associative array|hash]], the sigil for an [[Array data type|array]] ("@") is used, not the sigil for a hash ("%").
Perl also has many built-in functions that provide tools often used in shell programming (although many of these tools are implemented by programs external to the shell) such as [[Ascending order|sorting]], and calling [[operating system]] facilities.

Perl takes [[List (computing)|lists]] from [[Lisp (programming language)|Lisp]], [[associative array|hashes]] ("associative arrays") from [[AWK]], and [[regular expression]]s from [[sed]]. These simplify and facilitate many parsing, text-handling, and data-management tasks. Also shared with Lisp are the implicit [[Return statement|return]] of the last value in a block, and the fact that all statements have a value, and thus are also expressions and can be used in larger expressions themselves.

Perl 5 added features that support complex [[data structure]]s, [[first-class function]]s (that is, [[Closure (computer science)|closures]] as values), and an object-oriented programming model. These include [[reference (computer science)|references]], packages, class-based [[Dynamic dispatch|method dispatch]], and [[Scope (programming)|lexically scoped variables]], along with [[compiler directive]]s (for example, the <code>strict</code> pragma). A major additional feature introduced with Perl 5 was the ability to package code as reusable modules. Wall later stated that "The whole intent of Perl 5's module system was to encourage the growth of Perl culture rather than the Perl core."<ref>{{cite newsgroup |title = title unknown |author =  |date = 1997-05-10 |newsgroup =  |message-id = 199705101952.MAA00756@wall.org |url =  |accessdate = }}{{Dead link|date=November 2014}}</ref>

All versions of Perl do automatic [[Type system|data-typing]] and automatic [[memory management]]. The interpreter knows the type and [[Computer data storage|storage]] requirements of every data object in the program; it allocates and frees storage for them as necessary using [[reference counting]] (so it cannot deallocate [[Circular buffer|circular data structures]] without manual intervention). Legal [[type conversion]]s — for example, conversions from number to string — are done automatically at [[Run time (program lifecycle phase)|run time]]; illegal type conversions are fatal errors.

===Design===
The design of Perl can be understood as a response to three broad trends in the computer industry: falling hardware costs, rising labor costs, and improvements in [[compiler]] technology. Many earlier computer languages, such as [[Fortran]] and C, aimed to make efficient use of expensive computer hardware. In contrast, Perl was designed so that computer programmers could write programs more quickly and easily.

Perl has many features that ease the task of the programmer at the expense of greater [[CPU]] and memory requirements. These include automatic memory management; [[dynamic typing]]; strings, lists, and hashes; regular expressions; introspection; and an <code>eval()</code> function. Perl follows the theory of "no built-in limits",<ref name="schwartz01" /> an idea similar to the [[Zero One Infinity]] rule.

Wall was trained as a linguist, and the design of Perl is very much informed by [[linguistic]] principles. Examples include [[Huffman coding]] (common constructions should be short), good end-weighting (the important information should come first), and a large collection of [[language primitive]]s. Perl favors language constructs that are concise and natural for humans to write, even where they complicate the Perl interpreter.

Perl's [[Syntax (programming languages)|syntax]] reflects the idea that "things that are different should look different."<ref name="wall97">{{cite journal |url = http://www.linuxjournal.com/article/2070 |title = Wherefore Art, Thou? |accessdate = 2011-03-13 |last = Wall |first = Larry |date = 1997-03-01 |work = [[Linux Journal]] }}</ref> For example, scalars, arrays, and hashes have different leading sigils. Array indices and hash keys use different kinds of braces. Strings and regular expressions have different standard delimiters. This approach can be contrasted with a language such as [[Lisp (programming language)|Lisp]], where the same basic syntax, composed of simple and universal [[S-expression|symbolic expressions]], is used for all purposes.

Perl does not enforce any particular [[programming paradigm]] ([[Procedural programming|procedural]], [[Object-oriented programming|object-oriented]], [[Functional programming|functional]], or others) or even require the programmer to choose among them.

There is a broad practical bent to both the Perl language and the community and culture that surround it. The preface to ''Programming Perl'' begins: "Perl is a language for getting your job done."<ref name="programmingperl2" /> One consequence of this is that Perl is not a tidy language. It includes many features, tolerates exceptions to its rules, and employs [[heuristics]] to resolve syntactical ambiguities. Because of the forgiving nature of the compiler, bugs can sometimes be hard to find. Perl's function documentation remarks on the variant behavior of built-in functions in list and scalar contexts by saying, "In general, they do what you want, unless you want consistency."<ref name="perlfunc">{{cite web |url = http://perldoc.perl.org/perlfunc.html |title = perlfunc - Perl builtin functions |accessdate = 2011-01-10 |work = Perl 5 version 12.2 documentation |publisher = perldoc.perl.org }}</ref>

No written [[Formal specification|specification]] or standard for the Perl language exists for Perl versions through Perl 5, and there are no plans to create one for the current version of Perl. There has been only one implementation of the interpreter, and the language has evolved along with it. That interpreter, together with its functional tests, stands as a ''de facto'' specification of the language.  [[Perl 6]], however, started with a specification,<ref>{{cite web |url = http://www.perl6.org/specification |title = Perl 6 Specification |accessdate = 2011-01-27 |publisher = The Perl 6 Project }}</ref> and several projects<ref>{{cite web |url = http://www.perl6.org/compilers/ |title = Perl 6 Compilers |accessdate = 2011-01-27 |publisher = The Perl 6 Project }}</ref> aim to implement some or all of the specification.

===Applications===
Perl has many and varied applications, compounded by the availability of many standard and third-party modules.

Perl has chiefly been used to write [[Common Gateway Interface|CGI]] scripts: large projects written in Perl include [[cPanel]], [[Slash (weblog system)|Slash]], [[Bugzilla]], [[Request Tracker|RT]], [[TWiki]], and [[Movable Type]]; high-traffic websites that use Perl extensively include [[Priceline.com]], [[Craigslist]],<ref>{{cite book |last1 = Gilmore |first1 = W. J. |title = Beginning PHP and MySQL: From Novice to Professional, Fourth Edition |publisher = Apress |page = 484 |isbn = 978-1-4302-3114-1 }}</ref> [[Internet Movie Database|IMDb]],<ref>{{cite web |title = IMDb Helpdesk: What software/hardware are you using to run the site? |publisher = Internet Movie Database |url = http://www.imdb.com/help/search?domain=helpdesk_faq&index=1&file=techinfo |accessdate = 2011-02-12 }}</ref> [[LiveJournal]], [[DuckDuckGo]],<ref>DuckDuckGo handles a large amount of search queries at 4.5 million queries per day . https://duckduckgo.com/traffic.html</ref><ref>DuckDuckGo uses Perl https://news.ycombinator.com/item?id=1500487</ref> [[Slashdot]] and [[Ticketmaster]]. <!-- THIS IS ''not'' A LIST OF EVERY WEBSITE USING PERL. It's a listing of 'high traffic websites'. Please consider traffic volume before adding your own Web site to it. Refs for lesser known websites certainly needed. -->
It is also an optional component of the popular [[LAMP (software bundle)|LAMP]] technology stack for [[Web development]], in lieu of [[PHP]] or [[Python (programming language)|Python]].

Perl is often used as a [[glue language]], tying together systems and interfaces that were not specifically designed to interoperate, and for "[[data munging]]",<ref>{{cite web |url = http://books.perl.org/book/95 |title = Perl Books - Book: Data Munging with Perl |work = Perl.org |accessdate = December 30, 2010 }}</ref> that is, converting or processing large amounts of data for tasks such as creating reports. In fact, these strengths are intimately linked. The combination makes Perl a popular all-purpose language for [[system administrator]]s, particularly because short programs, often called "[[one-liner program]]s", can be entered and run on a single [[Command-line interface|command line]].

Perl code can be made portable across [[Microsoft Windows|Windows]] and Unix; such code is often used by suppliers of software (both [[Commercial off-the-shelf|COTS]] and bespoke) to simplify packaging and maintenance of software build- and deployment-scripts.

[[Graphical user interface]]s (GUIs) may be developed using Perl. For example, [[Tk (framework)|Perl/Tk]] and [[WxPerl]] are commonly used to enable user interaction with Perl scripts. Such interaction may be synchronous or asynchronous, using [[Callback (computer programming)|callbacks]] to update the GUI.

===Implementation===
Perl is implemented as a core interpreter, written in C, together with a large collection of modules, written in Perl and C. {{As of|2010}}, the interpreter is 150,000 lines of C code and compiles to a 1&nbsp;MB executable on typical machine architectures. Alternatively, the interpreter can be compiled to a link library and embedded in other programs. There are nearly 500 modules in the distribution, comprising 200,000 lines of Perl and an additional 350,000 lines of C code (much of the C code in the modules consists of [[character encoding]] tables).

The interpreter has an object-oriented architecture. All of the elements of the Perl language—scalars, arrays, hashes, coderefs, [[file handle]]s—are represented in the interpreter by [[struct (C programming language)|C structs]]. Operations on these structs are defined by a large collection of [[Macro (computer science)|macros]], [[typedef]]s, and functions; these constitute the Perl C [[application programming interface|API]]. The Perl API can be bewildering to the uninitiated, but its entry points follow a consistent [[naming scheme]], which provides guidance to those who use it.

The life of a Perl interpreter divides broadly into a compile phase and a run phase.<ref>A description of the Perl 5 interpreter can be found in ''Programming Perl'', 3rd Ed., chapter 18. See particularly page 467, which carefully distinguishes run phase and compile phase from [[Run time (program lifecycle phase)|run time]] and [[compile time]].  Perl "time" and "phase" are often confused.</ref>  In Perl, the '''phases''' are the major stages in the interpreter's life-cycle. Each interpreter goes through each phase only once, and the phases follow in a fixed sequence.

Most of what happens in Perl's compile phase is compilation, and most of what happens in Perl's run phase is execution, but there are significant exceptions. Perl makes important use of its capability to execute Perl code during the compile phase. Perl will also delay compilation into the run phase. The terms that indicate the kind of processing that is actually occurring at any moment are '''compile time''' and '''run time'''.  Perl is in compile time at most points during the compile phase, but compile time may also be entered during the run phase. The compile time for code in a string argument passed to the <code>[[eval]]</code> built-in occurs during the run phase. Perl is often in run time during the compile phase and spends most of the run phase in run time.  Code in <code>BEGIN</code> blocks executes at run time but in the compile phase.<!-- NOTE TO EDITORS:  There is something missing in the preceding sentence -- for one thing, a comma before the conjunction.  The sentence might reasonably read 'Code in BEGIN blocks executes NOT at run time, but in the compile phase,' but is that what the author intended? -->

At compile time, the interpreter parses Perl code into a [[Abstract syntax tree|syntax tree]]. At run time, it executes the program by [[Tree traversal|walking the tree]]. Text is parsed only once, and the syntax tree is subject to optimization before it is executed, so that execution is relatively efficient. Compile-time optimizations on the syntax tree include [[constant folding]] and context propagation, but [[peephole optimization]] is also performed.

Perl has a [[Turing-complete]] [[formal grammar|grammar]] because parsing can be affected by run-time code executed during the compile phase.<ref>{{cite web |last = Schwartz |first = Randal |authorlink = Randal L. Schwartz |title = On Parsing Perl |url = http://www.perlmonks.org/index.pl?node_id=44722 |accessdate = 2007-01-03 }}</ref> Therefore, Perl cannot be parsed by a straight [[Lex programming tool|Lex]]/[[Yacc]] [[Lexical analysis|lexer]]/[[parser]] combination. Instead, the interpreter implements its own lexer, which coordinates with a modified [[GNU bison]] parser to resolve ambiguities in the language.

It is often said that "Only perl can parse Perl",<ref>{{cite web |url = ftp://ftp.ora.com/pub/labs/tpj/tpj2.pdf |title = The Perl Journal #19/9.26 |accessdate = 2011-02-04 |publisher = [[O'Reilly Media]] }}</ref> meaning that only the Perl interpreter (''<code>perl</code>'') can parse the Perl language (''Perl''), but even this is not, in general, true. Because the Perl interpreter can simulate a Turing machine during its compile phase, it would need to decide the [[halting problem]] in order to complete parsing in every case. It is a long-standing result that the halting problem is undecidable, and therefore not even perl can always parse Perl. Perl makes the unusual choice of giving the user access to its full programming power in its own compile phase. The cost in terms of theoretical purity is high, but practical inconvenience seems to be rare.

Other programs that undertake to parse Perl, such as [[Static program analysis|source-code]] analyzers and [[Indent style|auto-indenters]], have to contend not only with ambiguous [[Language construct|syntactic constructs]] but also with the [[Recursive language|undecidability]] of Perl parsing in the general case. Adam Kennedy's PPI project focused on parsing Perl code as a document (retaining its integrity as a document), instead of parsing Perl as executable code (that not even Perl itself can always do). It was Kennedy who first conjectured that "parsing Perl suffers from the '[[halting problem]]'",<ref>{{cite web |url = https://metacpan.org/module/PPI |title = PPI—Parse, Analyze and Manipulate Perl (without perl) |author = Kennedy, Adam |year = 2006 |publisher = [[CPAN]] }}</ref> which was later proved.<ref>{{cite journal |authorlink = Jeffrey Kegler |title = Rice's Theorem |journal = The Perl Review |volume = 4 |issue = 3 |pages = 23–29 |date = Summer 2008 }} and {{cite journal |authorlink = Jeffrey Kegler |title = Perl is Undecidable |journal = The Perl Review |volume = 5 |issue = 0 |pages = 7–11 |date = Fall 2008 }}, available online at {{cite web |url = http://www.jeffreykegler.com/Home/perl-and-undecidability |title = Perl and Undecidability |author = Kegler, Jeffrey }}
</ref>

Perl is distributed with over 250,000 [[Functional testing|functional tests]] for core Perl language and over 250,000 [[Functional testing|functional tests]] for core modules. These run as part of the normal build process and extensively exercise the interpreter and its core modules. Perl developers rely on the functional tests to ensure that changes to the interpreter do not introduce [[software bug]]s; additionally, Perl users who see that the interpreter passes its functional tests on their system can have a high degree of confidence that it is working properly.

===Availability===
<!--Note to editors:
Perl is available on so many platforms that it doesn't make sense to keep a laundry list in this article.
Do not list a specific platform unless there are notable issues about running Perl on it.
-->
Perl is [[dual licensed]] under both the [[Artistic License]] 1.0<ref name="artistic-1.0" /><ref name="artistic-1.0-git" /> and the [[GNU General Public License]].<ref name="licensing" /> Distributions are available for most [[operating system]]s. It is particularly prevalent on [[Unix]] and [[Unix-like]] systems, but it has been ported to most modern (and many obsolete) platforms. With only six reported exceptions, Perl can be compiled from [[source code]] on all [[POSIX]]-compliant, or otherwise-Unix-compatible platforms.<ref name="cpanports">{{cite web |url = http://www.cpan.org/ports/ |title = Perl Ports (Binary Distributions) |publisher = CPAN.org |author = Hietaniemi, Jarkko |year = 1998 }}</ref>

Because of unusual changes required for the [[classic Mac OS]] environment, a special port called MacPerl was shipped independently.<ref name="macperl">{{cite web |url = http://www.macperl.com/ |title = The MacPerl Pages |year = 1997 |publisher = Prime Time Freeware }}</ref>

The [[CPAN|Comprehensive Perl Archive Network]] carries a complete list of supported platforms with links to the distributions available on each.<ref>{{cite web |url = http://www.cpan.org/ports/ |title = Perl Ports (Binary Distributions) |accessdate = 2011-01-27 |publisher = [[CPAN]] }}</ref> CPAN is also the source for publicly available Perl modules that are not part of the core Perl distribution.

====Windows====
Users of [[Microsoft Windows]] typically install one of the native binary distributions of Perl for Win32, most commonly [[Strawberry Perl]] or [[ActivePerl]]. Compiling Perl from [[source code]] under Windows is possible, but most installations lack the requisite C compiler and build tools. This also makes it difficult to install modules from the CPAN, particularly those that are partially written in C.

[[ActivePerl]] is a closed source distribution from [[ActiveState]] that has regular releases that track the core Perl releases.<ref name="activestate">{{cite web |url = http://www.activestate.com/activeperl |title = ActivePerl is Perl for Windows, Mac, Linux, AIX, HP-UX & Solaris |accessdate = 2011-01-09 |publisher = [[ActiveState|ActiveState Software]] }}</ref> The distribution also includes the [[Perl package manager]] (PPM),<ref name="activestateppm">{{cite web |url = http://docs.activestate.com/activeperl/5.12/faq/ActivePerl-faq2.html |title = Using PPM |accessdate = 2011-01-09 |publisher = [[ActiveState|ActiveState Software]] }}</ref> a popular tool for installing, removing, upgrading, and managing the use of common Perl modules.  Included also is [[PerlScript]], a [[Windows Script Host]] (WSH) engine implementing the Perl language.  [[Visual Perl]] is an ActiveState tool that adds Perl to the Visual Studio .NET development suite.

[[Strawberry Perl]] is an open source distribution for Windows.  It has had regular, quarterly releases since January 2008, including new modules as feedback and requests come in.  Strawberry Perl aims to be able to install modules like standard Perl distributions on other platforms, including compiling XS modules.

The [[Cygwin]] emulation layer is another way of running Perl under Windows. Cygwin provides a Unix-like environment on Windows, and both Perl and CPAN are available as standard pre-compiled packages in the Cygwin setup program. Since Cygwin also includes [[GNU Compiler Collection|gcc]], compiling Perl from source is also possible.

A perl executable is included in several Windows Resource kits in the directory with other scripting tools.

Implementations of Perl come with the [[MKS Toolkit]] and [[UWIN]].

==Database interfaces==
Perl's text-handling capabilities can be used for generating [[SQL]] queries; arrays, hashes, and automatic memory management make it easy to collect and process the returned data. For example, in Tim Bunce's [[Perl DBI]] [[application programming interface]] (API), the arguments to the API can be the text of SQL queries; thus it is possible to program in multiple languages at the same time (e.g., for generating a [[Web page]] using [[HTML]], [[JavaScript]], and SQL in a [[here document]]). The use of Perl [[variable interpolation]] to programmatically customize each of the SQL queries, and the specification of Perl arrays or hashes as the structures to programmatically hold the resulting [[data set]]s from each SQL query, allows a high-level mechanism for handling large amounts of data for post-processing by a Perl subprogram.<ref>{{cite book |last = Descartes |first = Alligator |title = Programming the Perl DBI : [database programming with Perl] |year = 2000 |publisher = O'Reilly |location = Beijing [u.a.] |isbn = 1-56592-699-4 |edition = 1 |author2 = Bunce, Tim }}</ref>
In early versions of Perl, database interfaces were created by relinking the interpreter with a [[client-side]] database library. This was sufficiently difficult that it was done for only a few of the most-important and most widely used databases, and it restricted the resulting <code>perl</code> executable to using just one database interface at a time.

In Perl 5, database interfaces are implemented by [[Perl DBI]] modules. The DBI (Database Interface) module presents a single, database-independent interface to Perl applications, while the DBD (Database Driver) modules handle the details of accessing some 50 different databases; there are DBD drivers for most [[American National Standards Institute|ANSI]] [[SQL]] databases.

DBI provides caching for database handles and queries, which can greatly improve performance in long-lived execution environments such as [[mod perl]],<ref>{{cite web |last = Bekman |first = Stas |title = Efficient Work with Databases under mod_perl |url = http://perl.apache.org/docs/1.0/guide/performance.html#Efficient_Work_with_Databases_under_mod_perl |accessdate = 2007-09-01 }}</ref> helping high-volume systems avert load spikes as in the [[Slashdot effect]].

In modern Perl applications, especially those written using [[web framework]]s such as [[Catalyst (software)|Catalyst]], the DBI module is often used indirectly via [[object-relational mapper]]s such as [[DBIx::Class]], [[Class::DBI]] or [[Rose::DB::Object]] that generate SQL queries and handle data transparently to the application author.

==Comparative performance==
The Computer Language Benchmarks Game, a project hosted by [[Alioth (Debian)|Alioth]], compares the performance of implementations of typical programming problems in several programming languages.<ref>{{cite web |url = http://alioth.debian.org/projects/benchmarksgame/ |title = Alioth: The Computer Language Benchmarks Game: Project Info |accessdate = 2011-01-13 |publisher = [[Alioth]] }}
</ref> The submitted Perl implementations typically perform toward the high end of the memory-usage spectrum and give varied speed results. Perl's performance in the benchmarks game is typical for interpreted languages.<ref>{{cite web |url = http://benchmarksgame.alioth.debian.org/u32/which-programs-are-fastest.php?v8=on&lua=on&jruby=on&php=on&python3=on&yarv=on&perl=on |title = Which programs are fastest? |accessdate = 2011-01-13 |work = Computer Language Benchmarks Game |publisher = [[Alioth]] }}</ref>

Large Perl programs start more slowly than similar programs in compiled languages because perl has to compile the source every time it runs. In a talk at the [[Yet Another Perl Conference|YAPC::Europe 2005]] conference and subsequent article "A Timely Start", Jean-Louis Leroy found that his Perl programs took much longer to run than expected because the perl interpreter spent significant time finding modules within his over-large include path.<ref>{{cite web |url = http://www.perl.com/pub/a/2005/12/21/a_timely_start.html |title = A Timely Start |author = Leroy, Jean-Louis |date = 2005-12-01 |publisher = O'Reilly }}</ref> Unlike Java, Python, and Ruby, Perl has only experimental support for pre-compiling.<ref>{{cite web |url = https://metacpan.org/module/NWCLARK/perl-5.8.8/ext/B/B/Bytecode.pm#KNOWN-BUGS |title = B::Bytecode Perl compiler's bytecode backend |author1 = Beattie, Malcolm |author2 = Enache Adrian |lastauthoramp = yes |year = 2003 |publisher = [[CPAN]] }}</ref> Therefore, Perl programs pay this overhead penalty on every execution. The run phase of typical programs is long enough that [[amortized]] startup time is not substantial, but benchmarks that measure very short execution times are likely to be skewed due to this overhead.

A number of tools have been introduced to improve this situation. The first such tool was Apache's [[mod perl]], which sought to address one of the most-common reasons that small Perl programs were invoked rapidly: [[Common Gateway Interface|CGI]] [[World Wide Web|Web]] development. [[ActiveState|ActivePerl]], via Microsoft [[ISAPI]], provides similar performance improvements.

Once Perl code is compiled, there is additional overhead during the execution phase that typically isn't present for programs written in compiled languages such as C or C++. Examples of such overhead include [[bytecode]] interpretation, reference-counting memory management, and dynamic type-checking.

===Optimizing===
Because Perl is an interpreted language, it can give problems when efficiency is critical; in such situations, the most critical routines can be written in other languages (such as [[C (programming language)|C]]), which can be connected to Perl via simple Inline modules or the more complex but flexible [[XS (Perl)|XS]] mechanism.<ref>{{cite web |url = https://metacpan.org/module/Inline |title = Inline - metacpan.org |accessdate = 2011-01-26 |last = Ingerson |first = Brian |publisher = [[CPAN]] |deadurl = yes |archiveurl = https://web.archive.org/web/20130613163723/https://metacpan.org/module/Inline |archivedate = June 13, 2013 }}</ref>

==Perl 6==
{{Main article|Perl 6}}
[[Image:Camelia.svg|thumb|right|200px|''Camelia'', the logo for the Perl 6 project.<ref>{{cite web |url = http://perl6.org/ |title = Perl 6 |accessdate = 2011-02-27 |publisher = The Perl 6 Project }}</ref>]]

At the 2000 [[O'Reilly Open Source Convention|Perl Conference]], [[Jon Orwant]] made a case for a major new language-initiative.<ref>
{{cite web |url = http://www.nntp.perl.org/group/perl.perl6.meta/2000/10/msg424.html |title = Transcription of Larry's talk |accessdate = 2011-01-25 |last = Torkington |first = Nathan |publisher = nntp.perl.org }}</ref> This led to a decision to begin work on a redesign of the language, to be called Perl 6. Proposals for new language features were solicited from the Perl community at large, which submitted more than 300 [[Request for Comments|RFCs]].

Wall spent the next few years digesting the RFCs and synthesizing them into a coherent framework for Perl 6. He has presented his design for Perl 6 in a series of documents called "apocalypses" - numbered to correspond to chapters in ''Programming Perl''. {{as of|2011|January}}, the developing specification of Perl 6 is encapsulated in design documents called Synopses - numbered to correspond to Apocalypses.<ref name="syn6">{{cite web |url = http://perlcabal.org/syn/ |title = Official Perl 6 Documentation |accessdate = 2011-01-25 |publisher = The Perl 6 Project }}</ref>

Perl 6 is not intended to be backward compatible, although there will be a compatibility mode. Perl 6 and Perl 5 are distinct languages with a common ancestry.<ref name="perl6dev">{{cite web |url = http://dev.perl.org/perl6/ |title = Perl 6 - dev.perl.org |accessdate = 2011-01-25 |publisher = dev.perl.org }}</ref>

Thesis work by [[Bradley M. Kuhn]], overseen by Wall, considered the possible use of the [[Java virtual machine]] as a runtime for Perl.<ref>{{cite journal |last = Kuhn |first = Bradley |authorlink = Bradley M. Kuhn |title = Considerations on Porting Perl to the Java Virtual Machine |publisher = University of Cincinnati |date = January 2001 |url = http://www.ebb.org/bkuhn/writings/technical/thesis/ |accessdate = 2008-06-28 }}
</ref>  Kuhn's thesis showed this approach to be problematic. In 2001, it was decided that Perl 6 would run on a cross-language [[virtual machine]] called [[Parrot virtual machine|Parrot]]. This will mean that other languages targeting the Parrot will gain native access to [[CPAN]], allowing some level of cross-language development.

In 2005, [[Audrey Tang]] created the [[pugs]] project, an implementation of Perl 6 in [[Haskell (programming language)|Haskell]]. This acted as, and continues to act as, a test platform for the Perl 6 language (separate from the development of the actual implementation) - allowing the language designers to explore. The pugs project spawned an active Perl/Haskell cross-language community centered around the [[freenode]] #perl6 IRC channel.

{{As of | 2012}}, a number of features in the Perl 6 language show similarities to Haskell.

{{As of | 2012}}, Perl 6 development centers primarily around two compilers:<ref>{{cite web |url = http://perl6.org/compilers/features |title = Feature comparison of Perl 6 compilers }}</ref>
# [[Rakudo Perl 6]], an implementation running on the [[Parrot virtual machine]] and the [[Java virtual machine]].<ref>{{cite web |last = Worthington |first = Jonathan |title = Rakudo JVM News: More tests, plus Thread and Promise prototypes |url = http://6guts.wordpress.com/2013/07/15/rakudo-jvm-news-more-tests-plus-thread-and-promise-prototypes/ |work = 6guts |accessdate = July 24, 2013 }}</ref>  Developers are also working on [[MoarVM]], a C language-based virtual machine designed specifically for Rakudo.<ref>{{cite web |last = Worthington |first = Jonathan |title = MoarVM: A virtual machine for NQP and Rakudo |url = http://6guts.wordpress.com/2013/05/31/moarvm-a-virtual-machine-for-nqp-and-rakudo/ |work = 6guts |accessdate = July 24, 2013 }}</ref>
# [[Niecza]], which targets the [[Common Language Runtime]].

==Future of Perl 5==
Development of Perl 5 is also continuing. Perl 5.12.0 was released in April 2010 with some new features influenced by the design of Perl 6,<ref name="5120delta" /><ref name="heise2010">{{cite web |url = http://www.h-online.com/open/news/item/Perl-5-12-0-released-Update-976919.html |archiveurl = https://web.archive.org/web/20100419023449/http://www.h-online.com/open/news/item/Perl-5-12-0-released-Update-976919.html |archivedate = April 19, 2010 |title = Perl 5.12.0 released - Update |accessdate = 2011-01-08 |date = 2010-04-13 |publisher = Heise Media UK }}</ref> followed by Perl 5.14.1 (released on June 17, 2011), Perl 5.16.1 (released on August 9, 2012.<ref>{{cite web |url = http://www.perlmonks.org/?node_id=986397 |accessdate = 2012-08-26 |date = 2012-08-09 |title = perl 5.16.1 released! }}</ref>), and Perl 5.18.0 (released on May 18, 2013). Perl 5 development versions are released on a monthly basis, with major releases coming out once per year.<ref>{{cite web |url = https://lwn.net/Articles/484297/ |accessdate = 2012-03-28 |date = 2012-02-29 |publisher = LWN.net |title = The unstoppable Perl release train? }}</ref>

Future plans for Perl 5 include making the core language easier to extend from modules, and providing a small, extensible [[meta-object protocol]] in core.<ref>{{cite web |url = https://lwn.net/Articles/487216/ |author = Dave Rolsky |date = 2012-03-12 |title = Perl 5.16 and beyond |publisher = [[LWN.net]] }}</ref>

The relative proportion of Internet searches for 'Perl programming', as compared with similar searches for other programming languages, steadily declined from about 10% in 2005 to about 2% in 2011, and has remained around the 2% level since.<ref>{{cite web |title = TIOBE Programming Community Index Perl |author = TIOBE Software Index |year = 2013 |url = http://www.tiobe.com/index.php/paperinfo/tpci/Perl.html |accessdate = 2013-10-10 }}</ref>

==Perl community==
Perl's culture and community has developed alongside the language itself. [[Usenet]] was the first public venue in which Perl was introduced, but over the course of its evolution, Perl's community was shaped by the growth of broadening Internet-based services including the introduction of the World Wide Web. The community that surrounds Perl was, in fact, the topic of Wall's first "State of the Onion" talk.<ref>{{cite web |url = http://grnlight.net/index.php/programming-articles/100-perl-culture |title = Perl Culture (AKA the first State of the Onion) |first = Larry |last = Wall |authorlink = Larry Wall |date = 2014-05-22 }}</ref>

===State of the Onion===
State of the Onion is the name for Wall’s yearly [[keynote]]-style summaries on the progress of Perl and its community.  They are characterized by his hallmark humor, employing references to Perl’s culture, the wider hacker culture, Wall’s linguistic background, sometimes his family life, and occasionally even his [[Christian]] background.<ref>{{cite web |title = 2nd State of the Onion |author = Larry Wall |url = http://www.wall.org/~larry/onion/onion.html |accessdate = 2012-10-12 }} (Search for 'church')</ref>

Each talk is first given at various Perl conferences and is eventually also published online.

===Perl pastimes===
; JAPHs
: In email, Usenet, and message board postings, "[[Just another Perl hacker]]" (JAPH) programs are a common trend, originated by [[Randal L. Schwartz]], one of the earliest professional Perl trainers.<ref>
{{cite newsgroup |author = [[Randal L. Schwartz]] |title = Who is Just another Perl hacker? |message-id = m1hfpvh2jq.fsf@halfdome.holdit.com |newsgroup = comp.lang.perl.misc |date = 1999-05-02 |url = https://groups.google.com/forum/#!msg/comp.lang.perl.misc/nK-lswsaMec/DBL87v4FxOwJ |accessdate = December 5, 2014 }}
</ref> In the parlance of Perl culture, Perl programmers are known as Perl hackers, and from this derives the practice of writing short programs to print out the phrase "Just another Perl hacker". In the spirit of the original concept, these programs are moderately obfuscated and short enough to fit into the signature of an email or Usenet message. The "canonical" JAPH as developed by Schwartz includes the comma at the end, although this is often omitted.<ref>{{cite web |url = http://www.perlmonks.org/bare/?node_id=443856 |title = Canonical JAPH |accessdate = 2011-05-16 |last = Schwartz |first = Randal |authorlink = Randal L. Schwartz |date = 2005-03-31 |publisher = [[PerlMonks]] }}</ref>
; Perl golf
: Perl "golf" is the pastime of reducing the number of characters (key "strokes") used in a Perl program to the bare minimum, much in the same way that [[golf]] players seek to take as few shots as possible in a round. The phrase's first use<ref name="perl-golf-coined">{{cite newsgroup |author = Greg Bacon |title = Re: Incrementing a value in a slice |message-id = 7imnti$mjh$1@info2.uah.edu |newsgroup = comp.lang.perl.misc |date = 1999-05-28 |url = http://groups.google.com/group/comp.lang.perl.misc/msg/7b97c434492c8d20 |accessdate = 2011-07-12 }}</ref> emphasized the difference between pedestrian code meant to teach a newcomer and terse hacks likely to amuse experienced Perl programmers, an example of the latter being [[JAPH]]s that were already used in signatures in Usenet postings and elsewhere. Similar stunts had been an unnamed pastime in the language [[APL (programming language)|APL]] in previous decades. The use of Perl to write a program that performed [[RSA (algorithm)|RSA]] encryption prompted a widespread and practical interest in this pastime.<ref name="rsa">
{{cite web |url = http://www.cypherspace.org/rsa/pureperl.html |title = RSA in 5 lines of perl |accessdate = 2011-01-10 |last = Back |first = Adam }}</ref> In subsequent years, the term "[[code golf]]" has been applied to the pastime in other languages.<ref>{{cite web |url = http://codegolf.com/ |title = Code Golf: What is Code Golf? |publisher = 29degrees |year = 2007 }}
</ref> A Perl Golf Apocalypse was held at Perl Conference 4.0 in Monterey, California in July 2000.
; Obfuscation
: As with C, [[obfuscated code]] competitions were a well known pastime in the late 1990s. The [[Obfuscated Perl Contest]] was a competition held by [[The Perl Journal]] from 1996 to 2000 that made an arch virtue of Perl's syntactic flexibility. Awards were given for categories such as "most powerful"—programs that made efficient use of space—and "best four-line signature" for programs that fit into four lines of 76 characters in the style of a Usenet [[signature block]].<ref name="gallo03">
{{cite book |last1 = Gallo |first1 = Felix |title = Games, diversions, and Perl culture: best of the Perl journal |chapter = The Zeroth Obfuscated Perl Contest |editors = Jon Orwant |publisher = O'Reilly Media |year = 2003 |url = http://oreilly.com/catalog/tpj3/chapter/ch43.pdf |accessdate = 2011-01-12 }}
</ref>
; Poetry
: Perl poetry is the practice of writing poems that can be compiled as legal Perl code, for example the piece known as [[Black Perl]]. Perl poetry is made possible by the large number of English words that are used in the Perl language. New poems are regularly submitted to the community at [[PerlMonks]].<ref>
{{cite web |url = http://www.perlmonks.org/?node_id=1590 |title = Perl Poetry |accessdate = 2011-01-27 |publisher = [[PerlMonks]] }}
</ref>

===Perl on IRC===
There are a number of [[Internet Relay Chat|IRC]] channels that offer support for the language and some modules.

{| class="wikitable"
|-
! IRC Network
! Channels
|-
| irc.freenode.net
| #perl #perl6 #cbstream #perlcafe #poe
|-
| irc.perl.org
| #moose #poe #catalyst #dbix-class #perl-help #distzilla #epo #corehackers #sdl #win32 #toolchain #padre #dancer
|-
| irc.slashnet.org
| #perlmonks
|-
| irc.oftc.net
| #perl
|-
| irc.efnet.net
| #perlhelp
|-
| irc.rizon.net
| #perl
|-
| irc.debian.org
| #debian-perl (packaging Perl modules for Debian)
|}

===CPAN Acme===
There are also many examples of code written purely for entertainment on the [[CPAN]]. <code>Lingua::Romana::Perligata</code>, for example, allows writing programs in [[Latin]].<ref>{{cite web |url = http://www.csse.monash.edu.au/~damian/papers/HTML/Perligata.html |title = Lingua::Romana::Perligata -- Perl for the XXI-imum Century |author = Conway, Damian }}</ref> Upon execution of such a program, the module translates its source code into regular Perl and runs it.

The Perl community has set aside the "[[Acme Corporation|Acme]]" namespace for modules that are fun in nature (but its scope has widened to include exploratory or experimental code or any other module that is not meant to ever be used in production). Some of the Acme modules are deliberately implemented in amusing ways. This includes <code>Acme::Bleach</code>, one of the first modules in the <code>Acme::</code> namespace,<ref>{{cite web |url = https://web.archive.org/web/20140522123044/http://grnlight.net/index.php/programming-articles/101-use-perl-journal-of-acme |title = use Perl; Journal of acme |date = 2014-05-22 |author = Brocard, Leon |publisher = GrnLight.net }}</ref> which allows the program's source code to be "whitened" (i.e., all characters replaced with whitespace) and yet still work.

==Example code==
In older versions of Perl, one would write the [[Hello World]] program as:

<source lang="perl">
print "Hello World!\n";
</source>

In later versions, which support the {{code|say}} statement, one can also write it as:

<source lang="perl">
use 5.010;
say "Hello World!";
</source>

Good Perl practices require more complex programs to add the {{code|use strict;}} and {{code|use warnings;}} [[Directive (programming)|pragmas]], leading into something like:

<source lang="perl">
use strict;
use warnings;

print "Hello World!\n";
</source>

Here is a more complex Perl program, that counts down the seconds up to a given threshold:

<source lang="perl">
#!/usr/bin/perl
use strict;
use warnings;
use IO::Handle;

my ( $remaining, $total );

$remaining = $total = shift(@ARGV);

STDOUT->autoflush(1);

while ( $remaining ) {
    printf ( "Remaining %s/%s \r", $remaining--, $total );
    sleep 1;
}

print "\n";
</source>

The perl interpreter can also be used for one-off scripts on the command line. The following example (as invoked from an sh-compatible shell, such as Bash) translates the string "Bob" in all files ending with .txt in the current directory to "Robert":

<source lang="bash">
$ perl -i.bak -lp -e 's/Bob/Robert/g' *.txt
</source>

==Criticism==
Perl has been referred to as "[[wikt:line noise|line noise]]" by some programmers who claim its syntax makes it a [[write-only language]]. The earliest such mention was in the first edition of the book ''[[Learning Perl]]'', a Perl 5 tutorial book written by [[Randal L. Schwartz]],<ref>{{cite journal |title = Developer Update|volume = 2 |journal = Dr. Dobb's Developer Update |publisher = Miller-Freeman |year = 1995 }}</ref><!-- page 15 --> in the first chapter of which he states: "Yes, sometimes Perl looks like line noise to the uninitiated, but to the seasoned Perl programmer, it looks like checksummed line noise with a mission in life."<ref name="LP">{{cite book |title = [[Learning Perl]], |last = Schwartz |first = Randal L. |authorlink = Randal L. Schwartz |publisher = O'Reilly & Associates |year = 1993 }}</ref> He also stated that the accusation that Perl is a write-only language could be avoided by coding with "proper care".<ref name="LP" /> The Perl overview document ''perlintro'' states that the names of built-in "magic" scalar [[Variable (computer science)|variables]] "look like punctuation or line noise".<ref>{{cite web |url = http://perldoc.perl.org/perlintro.html |title = perlintro |work = Perl 5 version 18.0 documentation |publisher = Perl 5 Porters and perldoc.perl.org |accessdate = 2013-06-30 }}</ref> The ''perlstyle'' document states that line noise in regular expressions could be mitigated using the <code>/x</code> modifier to add whitespace.<ref>{{cite web |url = http://perldoc.perl.org/perlstyle.html |title = perlstyle |work = Perl 5 version 18.0 documentation |publisher = Perl 5 Porters and perldoc.perl.org |accessdate = 2013-06-30 }}</ref>

According to the ''Perl 6 FAQ'', Perl 6 was designed to mitigate "the usual suspects" that elicit the "line noise" claim from Perl 5 critics, including the removal of "the majority of the punctuation variables" and the sanitization of the regex syntax.<ref name="P6FAQ">{{cite web |url = http://www.perl6.org/archive/faq.html |title = Perl 6 FAQ |publisher = Perl 6 Project |accessdate = 2013-06-30 }}</ref> The ''Perl 6 FAQ'' also states that what is sometimes referred to as Perl's line noise is "the actual syntax of the language" just as [[gerund]]s and [[Preposition and postposition|prepositions]] are a part of the [[English language]].<ref name="P6FAQ" /> In a December 2012 blog posting, despite claiming that "Rakudo Perl 6 has failed and will continue to fail unless it gets some adult supervision", [[chromatic (programmer)|chromatic]] stated that the design of Perl 6 has a "well-defined grammar" as well as an "improved type system, a unified object system with an intelligent metamodel, metaoperators, and a clearer system of context that provides for such niceties as pervasive laziness".<ref name="chromatic-blog">{{cite web |url = http://www.modernperlbooks.com/mt/2012/12/the-implementation-of-perl-5-versus-perl-6.html |title = The Implementation of Perl 5 versus Perl 6 |author = chromatic |authorlink = chromatic (programmer) |date = 2012-12-31 |accessdate = 2013-06-30 }}</ref> He also stated that "Perl 6 has a coherence and a consistency that Perl 5 lacks."<ref name="chromatic-blog" />

==See also==
{{Portal|Free software|Computer programming}}
* [[Outline of Perl]]
* [[Perl Data Language]]
* [[Perl Object Environment]]
* [[Plain Old Documentation]]

==References==
{{reflist|30em}}

==Further reading==
* [http://shop.oreilly.com/product/0636920018452.do Learning Perl] 6th Edition (2011), O'Reilly. Beginner-level introduction to Perl.
* [http://ofps.oreilly.com/titles/9781118013847/index.html Beginning Perl] 1st Edition (2012), Wrox. A beginner's tutorial for those new to programming or just new to Perl.
* [http://onyxneon.com/books/modern_perl/ Modern Perl] 2nd Edition (2012), Onyx Neon. Describes [[Modern Perl]] programming techniques.
* [http://shop.oreilly.com/product/9780596004927.do Programming Perl] 4th Edition (2012), O'Reilly. The definitive Perl reference.
* [http://www.pearsonhighered.com/educator/product/Effective-Perl-Programming-Ways-to-Write-Better-More-Idiomatic-Perl-2E/9780321496942.page Effective Perl Programming] 2nd Edition (2010), Addison-Wesley. Intermediate- to advanced-level guide to writing idiomatic Perl.
* ''[[Perl Cookbook]]'', ISBN 0-596-00313-7. Practical Perl programming examples.
* {{cite book |last = Dominus |first = Mark Jason |title = Higher Order Perl |url = http://hop.perl.plover.com/book/ |year = 2005 |publisher = Morgan Kaufmann |isbn = 1-55860-701-3 }} Functional programming techniques in Perl.

==External links==
{{Sister project links|commons=Category:Perl (programming language)|v=Topic:Perl|n=no|q=Perl|s=no|b=Perl Programming}}
<!--======================== {{No more links}} ============================
    | PLEASE BE CAUTIOUS IN ADDING MORE LINKS TO THIS ARTICLE. Wikipedia  |
    | is not a collection of links nor should it be used for advertising. |
    |                                                                     |
    |           Excessive or inappropriate links WILL BE DELETED.         |
    | See [[Wikipedia:External links]] & [[Wikipedia:Spam]] for details.  |
    |                                                                     |
    | If there are already plentiful links, please propose additions or   |
    | replacements on this article's discussion page, or submit your link |
    | to the relevant category at the Open Directory Project (dmoz.org)   |
    | and link back to that category using the {{dmoz}} template.         |
==={{No more links}}=========-->
<!-- Before adding any links, make sure you have read the External Links style guide, then stopped and reread it again. If you aren't absolutely sure the link is in compliance, ask on the talk page first!
-->
* {{Official website}}
* [https://metacpan.org/ MetaCPAN] - The new Comprehensive Perl Archive Network Web interface
* [http://www.cpan.org/ Comprehensive Perl Archive Network] - The canonical location for Perl code and modules
* [http://www.perlfoundation.org/ The Perl Foundation]
* [http://www.perlmonks.org/ PerlMonks] - A community committed to sharing Perl knowledge and coding tips

<!-- Before adding any links, make sure you have read the External Links style guide, then stopped and reread it again. If you aren't absolutely sure the link is in compliance, ask on the talk page first!
See [http://en.wikipedia.org/wiki/Wikipedia:External_links/Noticeboard#.27Perl.27_external_links]
-->
{{Perl}}
{{Programming languages}}
{{FOSS}}

{{Authority control}}

[[Category:Perl| ]]
[[Category:American inventions]]
[[Category:C programming language family]]
[[Category:Cross-platform software]]
[[Category:Dynamic programming languages]]
[[Category:Dynamically typed programming languages]]
[[Category:Free compilers and interpreters]]
[[Category:Free software programmed in C]]
[[Category:High-level programming languages]]
[[Category:Object-oriented programming languages]]
[[Category:Procedural programming languages]]
[[Category:Programming languages created in 1987]]
[[Category:Scripting languages]]
[[Category:Software using the Artistic license]]
[[Category:Text-oriented programming languages]]
[[Category:Unix programming tools]]
[[Category:Articles with example code]]