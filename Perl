{{Other uses}}
{{Infobox programming language
| name                   = Perl
| logo                   = [[File:Programming-republic-of-perl.png|100px]]
| paradigm               = [[multi-paradigm]]: [[Functional programming|functional]], [[Imperative programming|imperative]], [[Object-oriented programming|object-oriented]] ([[Class (computer science)|class-based]])
| year                   = 1987
| designer               = [[Larry Wall]]
| developer              = Larry Wall
| latest_release_version = 5.12.1
| latest_release_date    = {{release date|mf=yes|2010|05|16}}
| latest preview version = 5.13.4
| latest preview date    = {{release date|2010|08|20}}
| turing-complete        = Yes
| typing                 = Dynamic
| influenced_by          = [[AWK (programming language)|AWK]], [[Smalltalk 80]], [[Lisp (programming language)|Lisp]], [[C (programming language)|C]], [[C++]], [[sed]], [[Unix shell]], [[Pascal (programming language)|Pascal]]
| influenced             = [[Python (programming language)|Python]], [[PHP]], [[Ruby (programming language)|Ruby]], [[ECMAScript]], [[LPC (programming language)|LPC]], [[Windows PowerShell]],  [[JavaScript]], [[Falcon (programming language)|Falcon]]
| programming_language   = [[C (programming language)|C]]
| operating_system       = [[Cross-platform]]
| license                = [[GNU General Public License]], [[Artistic License]]
| website                = [http://www.perl.org/ www.perl.org]
| file_ext               = .pl
| wikibooks              = Perl Programming
}}

<!--

NOTES FOR EDITORS

* "Perl" is not an acronym (read the "Name" section below). Do not put that here.
* [[mod_perl]] is a correct link. Do not remove the underscore wherever you see it.
* Perl is described as the 'Swiss Army *chainsaw*', not the 'Swiss Army knife' of programming languages. Read the ref.

-->
'''Perl''' is a [[high-level programming language|high-level]], [[List of programming languages by category|general-purpose]], [[Interpreter (computing)|interpreted]], [[dynamic programming language]]. Perl was originally developed by [[Larry Wall]] in 1987 as a general-purpose [[Unix]] scripting language to make report processing easier.<ref>[http://perl.about.com/od/gettingstartedwithperl/p/whatisperl.htm What is Perl?]</ref><ref>[http://www.perl.com/pub/a/2000/10/begperl1.html Beginner's Introduction to Perl]</ref> Since then, it has undergone many changes and revisions and become widely popular amongst programmers. Larry Wall continues to oversee development of the core language, and its upcoming version, [[Perl 6]].

Perl borrows features from other programming languages including [[C (programming language)|C]], [[shell script]]ing ([[Bourne shell|sh]]), [[AWK (programming language)|AWK]], and [[sed]].<ref name="perltimeline">{{cite web | url=http://history.perl.org/PerlTimeline.html | title=The Timeline of Perl and its Culture (v3.0_0505) | author=Ashton, Elaine | year=1999}}</ref> The language provides powerful text processing facilities without the arbitrary data length limits of many contemporary Unix tools,<ref name="programmingperl">{{cite book | title=Programming Perl, Third Edition | author=[[Larry Wall|Wall, Larry]], [[Tom Christiansen]] and [[Jon Orwant]] | publisher=O'Reilly | month=July | year=2000 | isbn=0-596-00027-8}}</ref><!--Ref is from the forward of that book --> facilitating easy manipulation of [[text file]]s. It is also used for [[graphics|graphics programming]], [[System administrator|system administration]], [[computer network programming|network programming]], applications that require [[database]] access and  [[Common Gateway Interface|CGI programming]] on the [[World Wide Web|Web]]. Perl is nicknamed "the [[Swiss Army knife|Swiss Army chainsaw]] <!-- Note to editors. This should read *chainsaw*, not knife. Check the ref -->of programming languages" due to its flexibility and adaptability.<ref>{{cite web|url=http://www.perl.com/pub/a/2000/10/begperl1.html |title=Beginner's Introduction to Perl |accessdate=2008-07-27 |last=Sheppard |first=Doug |date=2000-10-16 |publisher=[[O'Reilly Media]] }}</ref>

== History ==
=== Early Perl versions ===

[[Larry Wall]] began work on Perl in 1987, while working as a programmer at [[Unisys]],<ref name="larry-wall-snippet">{{cite web|title=Larry Wall|url=http://www.perl.com/pub/au/Wall_Larry|accessdate=2006-08-20}}</ref> and released version 1.0 to the comp.sources.misc [[newsgroup]] on December 18, 1987.<ref>{{cite web | title = Perl, a "replacement" for awk and sed | url = http://groups.google.com/groups?selm=350@fig.bbn.com | accessdate = 2007-12-18 }}</ref> The language expanded rapidly over the next few years.

Perl 2, released in 1988, featured a better [[regular expression]] engine. Perl 3, released in 1989, added support for [[binary data]] streams.

Originally the only documentation for Perl was a single (increasingly lengthy) [[Manual page (Unix)|man page]]. In 1991, ''[[Programming Perl]]'' <!-- 1st edition title used lowercase "perl" --> (known to many Perl programmers as the "Camel Book" because of its cover) was published and became the ''de facto'' reference for the language. At the same time, the Perl version number was bumped to 4—not to mark a major change in the language but to identify the version that was documented by the book.

=== Early Perl 5 ===

Perl 4 went through a series of maintenance releases, culminating in Perl 4.036 in 1993. At that point, Wall abandoned Perl 4 to begin work on Perl 5.  Initial design of Perl 5 continued into 1994. The ''perl5-porters'' [[mailing list]] was established in May 1994 to coordinate work on porting Perl 5 to different platforms. It remains the primary forum for development, maintenance, and porting of Perl 5.<ref>[http://www.nntp.perl.org/group/perl.perl5.porters/ perl5-porters archive]</ref>

Perl 5.000 was released on October 17, 1994.<ref>http://perldoc.perl.org/perlhist.html</ref> It was a nearly complete rewrite of the [[interpreter (computing)|interpreter]], and it added many new features to the language, including objects, references, [[Local variable|lexical (my) variables]], and [[Module (programming)|modules]]. Importantly, modules provided a mechanism for extending the language without modifying the interpreter. This allowed the core interpreter to stabilize, even as it enabled ordinary Perl programmers to add new language features.  Perl 5 has been in active development since then.

Perl 5.001 was released on March 13, 1995.  Perl 5.002 was released on February 29, 1996 with the new prototypes feature.  This allowed module authors to make subroutines that behaved like Perl builtins.  Perl 5.003 was released June 25, 1996, as a security release.

One of the most important events in Perl 5 history took place outside of the language proper and was a consequence of its module support. On October 26, 1995, the [[Comprehensive Perl Archive Network]] (CPAN) was established as a [[Software repository|repository]] for [[Perl module]]s and Perl itself. At the time of writing, it carries over 20,000 modules by more than 8,000 authors<ref name="home">{{cite web |title=perl.org CPAN page|url=http://www.perl.org/cpan.html|accessdate=2010-05-09}}</ref>. CPAN is widely regarded as one of the greatest strengths of Perl in practice.

Perl 5.004 was released on May 15, 1997, and included among other things the UNIVERSAL package, giving Perl a base object to which all classes were automatically derived and the ability to require versions of modules.  In addition, Perl now supported running under Microsoft Windows and several other operating systems.<ref>http://perldoc.perl.org/perl5004delta.html</ref>

Perl 5.005 was released on July 22, 1998.  This release included several enhancements to the Regex engine, new hooks into the backend through the <code>B::*</code> modules, the <code>qr//</code> regex quote operator, a large selection of other new core modules, and added support for several more operating systems, including [[BeOS]].<ref>http://perldoc.perl.org/perl5005delta.html</ref>

=== 2000&mdash;present ===

Perl 5.6 was released on March 22, 2000.  Major changes included 64 bit support, unicode string representation, large file support (eg, files > 2 GiB) and the 'our' keyword.<ref>http://perldoc.perl.org/perl56delta.html</ref><ref>http://perldoc.perl.org/perl561delta.html</ref>  When developing Perl 5.6, the decision was made to switch the versioning scheme to one more similar to other open source projects; after 5.005_63, the next version became 5.5.640, with plans for development versions to have odd numbers and stable versions to have even numbers.

In 2000, Larry Wall put forth a call for suggestions for a new version of Perl from the community.  The process resulted in 361 [[Request for Comments|RFCs]] (Request for Comments) documents which were to be used in guiding development of Perl 6.  In 2001,<ref>http://dev.perl.org/perl6/doc/design/apo/A01.html</ref> work began on the apocalypses for [[Perl 6]], a series of documents meant to summarize the change requests and present the design of the next generation of Perl.  They were presented as a digest of the RFCs, rather than a formal document.  At this point, Perl 6 simply existed as a description of a language.

Perl 5.8 was first released on July 18, 2002, and had nearly yearly updates since then.  The latest version of Perl 5.8 is 5.8.9, released December 14, 2008.  Perl 5.8 improved unicode support, added a new IO implementation, added a new thread implementation, improved numeric accuracy, and added several new modules.<ref>http://perldoc.perl.org/perl58delta.html</ref>

In 2004, work began on the Synopses – originally documents that summarized the Apocalypes, but which became the specification for the Perl 6 language.  In February 2005, Audrey Tang began work on [[Pugs]], a Perl 6 interpreter written in [[Haskell (programming language)|Haskell]]<ref>[http://www.haskell.org/ HaskellWiki]</ref>.  This was the first real concerted effort towards making Perl 6 a reality.  This effort stalled in 2006.

On December 18, 2007, the 20th anniversary of Perl 1.0, Perl 5.10.0 was released. Perl 5.10.0 included notable new features, which brought it closer to [[Perl 6]]. Some of these new features were a new [[switch statement]] (called "given"/"when"), regular expressions updates, and the smart match operator, "~~".<ref>[http://search.cpan.org/~rgarcia/perl-5.10.0-RC2/pod/perl5100delta.pod perldelta: what is new for perl 5.10.0]</ref><ref>[http://search.cpan.org/~rgarcia/perl-5.10.0-RC2/pod/perlsyn.pod#Smart_matching_in_detail Smart matching in detail]</ref>

Around this same time, development began in earnest on another implementation of Perl 6 known as [[Rakudo Perl]], developed in tandem with the [[Parrot virtual machine]].  As of November 2009, Rakudo Perl has had regular monthly releases and now is the most complete implementation of [[Perl 6]].

A major change in the development process of Perl 5 occurred with Perl 5.11; the development community has switched to a monthly release cycle, with planned release dates three months ahead.

On April 12, 2010, Perl 5.12.0 was released. Notable core enhancements include new '''package NAME VERSION''' syntax, the Yada Yada operator (intended to mark placeholder code that is not yet implemented), implicit strictures<!-- "strictures" is not a typo -->, full [[Y2038]] compliance, regexp conversion overloading, [[DTrace]] support, and [[Unicode]] 5.2.
<ref>[http://search.cpan.org/~jesse/perl-5.12.0/pod/perl5120delta.pod]</ref>. On May 16, 2010, Perl 5.12.1 was released, it contains updated modules and some documentation changes.
<ref>[http://search.cpan.org/dist/perl/pod/perl5121delta.pod]</ref>

The latest development release of Perl 5 is 5.13.4, released by Florian Ragwitz on August 20, 2010<ref>[http://search.cpan.org/dist/perl-5.13.4/]</ref>.

=== Name ===

Perl was originally named "Pearl," after the [[Parable of the Pearl]] from the [[Gospel of Matthew]]. Larry Wall wanted to give the language a short name with positive connotations; he claims that he considered (and rejected) every three- and four-letter word in the dictionary. He also considered naming it after his wife Gloria. Wall discovered the existing [[PEARL (programming language)|PEARL]] programming language before Perl's official release and changed the spelling of the name.

When referring to the language, the name is normally capitalized (''Perl'') as a proper noun, as you would a spoken language (e.g. English or French). When referring to the interpreter program itself, the name is often uncapitalized (''perl'') because most Unix-like file systems are case-sensitive. Before the release of the first edition of ''Programming Perl'', it was common to refer to the language as ''perl''; [[Randal L. Schwartz]], however, capitalized the language's name in the book to make it stand out better when typeset. This case distinction was subsequently documented as canonical.<ref name="capitalization">{{cite web | url=http://perldoc.perl.org/perlfaq1.html#What's-the-difference-between-%22perl%22-and-%22Perl%22%3f | title=perlfaq1: What's the difference between "perl" and "Perl"?}}</ref>

There is some contention about the all-caps spelling "PERL," which the documentation declares incorrect<ref name="capitalization"/> and which some core community members consider a [[shibboleth|sign of outsiders]].<ref>{{cite web | last = Schwartz | first = Randal | authorlink = Randal L. Schwartz | title = PERL as shibboleth and the Perl community | url=http://www.perlmonks.org/index.pl?node_id=510594 | accessdate = 2007-06-01 }}</ref> The name is occasionally [[backronym]]ed as ''Practical Extraction and Report Language'' (which appears at the top of the documentation<ref>{{cite web | last = Wall | first = Larry | authorlink = Larry Wall | title = Larry Wall | url = http://www.linuxjournal.com/article/3394 | accessdate = 2008-10-02 }}</ref> and in some printed literature<ref>Steve McConnell (2004) ''Code Complete,'' 2nd ed., Microsoft Press, p. 65.</ref>). Several backronyms have been suggested as equally canonical, including Wall's own humorous ''Pathologically Eclectic Rubbish Lister''.<ref>{{cite web | last = Wall | first = Larry | authorlink = Larry Wall | title = BUGS | work = perl(1) [[man page]] | url = http://perldoc.perl.org/perl.html#BUGS | accessdate = 2006-10-13 }}</ref> Indeed, Wall claims that the name was intended to inspire many different expansions.<ref>{{cite web | last = Wall | first = Larry | authorlink = Larry Wall | title = Re^7: PERL as shibboleth and the Perl community | url =http://www.perlmonks.org/index.pl?node_id=511722 | accessdate = 2007-01-03 }}</ref>

=== The camel symbol ===
''[[Programming Perl]]'', published by [[O'Reilly Media]], features a picture of a [[camel]] on the cover and is commonly referred to as ''The Camel Book''.<ref name="larry-wall-snippet"/> This image of a camel has become a general symbol of Perl.  It is also a [[Hacker (computing)|hacker]] [[emblem]], appearing on some [[T-shirt]]s and other clothing items.

O'Reilly owns the image as a trademark but claims to use their legal rights only to protect the ''"integrity and impact of that symbol"''.<ref>[http://perl.oreilly.com/usage/ O'Reilly—The Perl Camel Usage and Trademark Information<!-- Bot generated title -->]</ref>
O'Reilly allows non-commercial use of the symbol and provides ''Programming Republic of Perl'' logos and ''Powered by Perl'' buttons.<ref>[http://www.oreillynet.com/images/perl/ Index of /images/perl<!-- Bot generated title -->]</ref> However, the Camel has never been meant to be an ''official'' Perl symbol, and if one is to be considered instead, it's ''an onion.''<ref>[http://www.perlfoundation.org/perl_trademark Perl Trademark, User Logos, Perl Marks and more]</ref>

== Overview ==
Perl is a general-purpose programming language originally developed for text manipulation, but {{as of | 2010 | lc = on}} used for a wide range of tasks including [[system administration]], [[web development]], [[Computer network programming|network programming]], games, [[bioinformatics]], and [[GUI]] development.

The language is intended to be practical (easy to use, efficient, complete) rather than beautiful (tiny, elegant, minimal).<ref>perlintro(1) [[man page]]</ref> Its major features include support for multiple [[programming paradigm]]s ([[procedural programming language|procedural]], [[Object-oriented programming|object-oriented]], and [[functional programming|functional]] styles), [[reference counting]] [[memory management]] (without a cycle-detecting garbage collector), built-in support for text processing, and a large collection of third-party [[Module (programming)|modules]].

According to Larry Wall, Perl has two slogans. The first is "[[There's more than one way to do it]]", commonly known as TMTOWTDI. The second slogan is "Easy things should be easy and hard things should be possible".

=== Features ===
The overall structure of Perl derives broadly from C. Perl is [[procedural programming|procedural]] in nature, with [[variable (programming)| variable]]s, [[expression (programming)|expressions]], [[assignment statement]]s, [[bracket|brace]]-delimited [[block (programming)|block]]s, [[control structure]]s, and [[subroutine]]s.

Perl also takes features from shell programming. All variables are marked with leading [[sigil (computer programming)|sigils]], which unambiguously identify the data type (for example, scalar, array, hash) of the variable in context. Importantly, sigils allow variables to be interpolated directly into strings. Perl has many built-in functions that provide tools often used in shell programming (although many of these tools are implemented by programs external to the shell) such as sorting, and calling on system facilities.

Perl takes [[List (computing)|lists]] from [[Lisp (programming language)|Lisp]], [[associative array]]s (hashes) from [[AWK]], and [[regular expression]]s from [[sed]]. These simplify and facilitate many parsing, text-handling, and data-management tasks.

Perl 5 added features that support complex [[data structure]]s, [[first-class function]]s (that is, [[Closure (computer science)|closures]] as values), and an object-oriented programming model. These include [[reference (computer science)|references]], packages, class-based method dispatch, and [[Scope (programming)|lexically scoped variables]], along with [[compiler directive]]s (for example, the <tt>strict</tt> pragma). A major additional feature introduced with Perl 5 was the ability to package code as reusable modules. Larry Wall later stated that "The whole intent of Perl 5's module system was to encourage the growth of Perl culture rather than the Perl core."<ref>Usenet post, May 10, 1997, with ID 199705101952.MAA00756@wall.org
</ref>

All versions of Perl do automatic data-typing and automatic memory-management. The interpreter knows the type and storage requirements of every data object in the program; it allocates and frees storage for them as necessary using [[reference counting]] (so it cannot deallocate circular data structures without manual intervention). Legal type-conversions — for example, conversions from number to string — are done automatically at run time; illegal type conversions are fatal errors.

=== Design ===
The design of Perl can be understood as a response to three broad trends in the computer industry: falling hardware costs, rising labor costs, and improvements in compiler technology. Many earlier computer languages, such as [[Fortran]] and C, aimed to make efficient use of expensive computer hardware. In contrast, Perl is designed to make efficient use of expensive computer-programmers.

Perl has many features that ease the programmer's task at the expense of greater CPU and memory requirements. These include automatic memory management; [[dynamic typing]]; strings, lists, and hashes; regular expressions; introspection; and an <tt>eval()</tt> function.

Wall was trained as a linguist, and the design of Perl is very much informed by linguistic principles. Examples include [[Huffman coding]] (common constructions should be short), good end-weighting (the important information should come first), and a large collection of language primitives. Perl favors language constructs that are concise and natural for humans to read and write, even where they complicate the Perl interpreter.

Perl syntax reflects the idea that "things that are different should look different". For example, scalars, arrays, and hashes have different leading [[Sigil (computer programming)|sigils]]. Array indices and hash keys use different kinds of braces. Strings and regular expressions have different standard delimiters. This approach can be contrasted with languages such as [[Lisp programming language|Lisp]], where the same [[S-expression]] construct and basic syntax are used for many different purposes.

Perl does not enforce any particular programming paradigm (procedural, object-oriented, functional, or others) or even require the programmer to choose among them.

There is a broad practical bent to both the Perl language and the community and culture that surround it. The preface to ''Programming Perl'' begins: "Perl is a language for getting your job done." One consequence of this is that Perl is not a tidy language. It includes many features, tolerates exceptions to its rules, and employs [[heuristics]] to resolve syntactical ambiguities. Because of the forgiving nature of the compiler, bugs can sometimes be hard to find. Discussing the variant behaviour of built-in functions in list and scalar contexts, the perlfunc(1) manual page says: "In general, they do what you want, unless you want consistency."

In addition to Larry Wall's two slogans mentioned above, Perl has several mottos that convey aspects of its design and use, including ''"Perl: the Swiss Army Chainsaw of Programming Languages"'' and ''"No unnecessary limits"''.  Perl has also been called ''"The Duct Tape of the Internet"''.<ref>
{{cite web | url = http://www.oreillynet.com/pub/a/oreilly/perl/news/importance_0498.html | title = The Importance of Perl | year = 1998 | month = April | publisher = O'Reilly & Associates, Inc. | quote = As Hassan Schroeder, Sun's first webmaster, remarked: “Perl is the duct tape of the Internet.” }}
</ref>

No written specification or standard for the Perl language exists for Perl versions through Perl 5, and there are no plans to create one for the current version of Perl. There has been only one implementation of the interpreter, and the language has evolved along with it. That interpreter, together with its functional tests, stands as a ''de facto'' specification of the language.  [[Perl 6]], however, started with a specification,<ref>See [http://www.perl6.org/specification/ Perl 6 Specification]</ref> and several projects<ref>[http://www.perl6.org/compilers/ Perl 6 Implementations]</ref> aim to implement some or all of the specification.

=== Applications ===
Perl has many and varied applications, compounded by the availability of many standard and third-party modules.

Ever since the early days of the Web, programmers have used Perl to write [[Common Gateway Interface|CGI]] scripts. Perl is known as one of "the three Ps" (along with [[Python (programming language)|Python]] and [[PHP]]), the most popular dynamic languages for writing Web applications. It is also an integral component of the popular [[LAMP (software bundle)|LAMP]] [[solution stack]] for web development. Large projects written in Perl include [[cPanel]], [[Slash (weblog system)|Slash]], [[Bugzilla]], [[Request Tracker|RT]], [[TWiki]], and [[Movable Type]]. Many high-traffic websites use Perl extensively. Examples include [[Amazon.com]], [[bbc.co.uk]], [[Priceline.com]], [[Craigslist]], [[Internet Movie Database|IMDb]],<ref>{{cite web | title = IMDb Helpdesk: What software/hardware are you using to run the site? | url = http://www.imdb.com/help/search?domain=helpdesk_faq&index=1&file=techinfo | accessdate = 2007-09-01 }}</ref> [[LiveJournal]], [[Slashdot]] and [[Ticketmaster]]. <!-- THIS IS NOT A LIST OF EVERY WEBSITE USING PERL. It's a listing of 'high traffic websites'. Please consider traffic volume before adding your own web site to it. Refs for lesser known websites certainly needed. -->

Perl is often used as a [[glue language]], tying together systems and interfaces that were not specifically designed to interoperate, and for "data munging",<ref>[http://books.perl.org/book/95 Data Mungin with Perl]</ref> that is, converting or processing large amounts of data for tasks such as creating reports. In fact, these strengths are intimately linked. The combination makes Perl a popular all-purpose language for [[system administrator]]s, particularly because short programs can be entered and run on a single command line.

With a degree of care, Perl code can be made portable across [[Microsoft Windows|Windows]] and Unix. Portable Perl code is often used by suppliers of software (both [[Commercial off-the-shelf|COTS]] and bespoke) to simplify packaging and maintenance of software build- and deployment-scripts.

Graphical user interfaces (GUIs) may be developed using Perl. For example, Perl/Tk is commonly used to enable user interaction with Perl scripts. Such interaction may be synchronous or asynchronous, using callbacks to update the GUI. For more information about the technologies involved, see [[Tk (computing)|Tk]], [[Tcl]] and [[WxPerl]].

Perl is also widely used in finance and in [[bioinformatics]], where it is valued for rapid application development and deployment and for its capability to handle large data-sets.

=== Implementation ===
Perl is implemented as a core interpreter, written in C, together with a large collection of modules, written in Perl and C. The source distribution is, {{As of|2009|lc=on}}, 13.5&nbsp;[[megabyte|MB]] when packaged in a [[Tar (file format)|tar file]] and [[data compression|compressed]].<ref>http://www.cpan.org/src</ref> The interpreter is 150,000 lines of C code and compiles to a 1&nbsp;MB executable on typical machine architectures. Alternatively, the interpreter can be compiled to a link library and embedded in other programs. There are nearly 500 modules in the distribution, comprising 200,000 lines of Perl and an additional 350,000 lines of C code. (Much of the C code in the modules consists of character-encoding tables.)

The interpreter has an object-oriented architecture. All of the elements of the Perl language—scalars, arrays, hashes, coderefs, file handles—are represented in the interpreter by C structs. Operations on these structs are defined by a large collection of macros, typedefs, and functions; these constitute the Perl C API. The Perl API can be bewildering to the uninitiated, but its entry points follow a consistent naming-scheme, which provides guidance to those who use it.

The life of a Perl interpreter divides broadly into a compile phase and a run phase.<ref>A description of the Perl 5 interpreter can be found in ''Programming Perl'', 3rd Ed., chapter 18. See particularly page 467, which carefully distinguishes run phase and compile phase from run time and compile time.  Perl "time" and "phase" are often confused.</ref>  In Perl, the '''phases''' are the major stages in the interpreter's life-cycle. Each interpreter goes through each phase only once, and the phases follow in a fixed sequence.

Most of what happens in Perl's compile phase is compilation, and most of what happens in Perl's run phase is execution, but there are significant exceptions. Perl makes important use of its capability to execute Perl code during the compile phase. Perl will also delay compilation into the run phase. The terms that indicate the kind of processing that is actually occurring at any moment are '''compile time''' and '''run time'''.  Perl is in compile time at most points during the compile phase, but compile time may also be entered during the run phase. The compile time for code in a string argument passed to the <code>[[eval]]</code> built-in occurs during the run phase. Perl is often in run time during the compile phase and spends most of the run phase in run time.  Code in <code>BEGIN</code> blocks executes at run time but in the compile phase.<!-- NOTE TO EDITORS:  There is something missing in the preceding sentence -- for one thing, a comma before the conjunction.  The sentence might reasonably read 'Code in BEGIN blocks executes NOT at run time, but in the compile phase,' but is that what the author intended? -->

At compile time, the interpreter parses Perl code into a [[syntax tree]]. At run time, it executes the program by [[Tree traversal|walking the tree]]. Text is parsed only once, and the syntax tree is subject to optimization before it is executed, so that execution is relatively efficient. Compile-time optimizations on the syntax tree include [[constant folding]] and context propagation, but [[peephole optimization]] is also performed.

Perl has a [[Turing-complete]] [[formal grammar|grammar]] because parsing can be affected by run-time code executed during the compile phase.<ref>{{cite web | last = Schwartz | first = Randal | authorlink = Randal L. Schwartz | title = On Parsing Perl | url =http://www.perlmonks.org/index.pl?node_id=44722 | accessdate = 2007-01-03 }}</ref> Therefore, Perl cannot be parsed by a straight [[Lex programming tool|Lex]]/[[Yacc]] [[lexer]]/[[parser]] combination. Instead, the interpreter implements its own lexer, which coordinates with a modified [[GNU bison]] parser to resolve ambiguities in the language.

It is often said that "Only perl can parse Perl," meaning that only the Perl interpreter (''<code>perl</code>'') can parse the Perl language (''Perl''), but even this is not, in general, true. Because the Perl interpreter can simulate a Turing machine during its compile phase, it would need to decide the [[Halting Problem]] in order to complete parsing in every case. It's a long-standing result that the Halting Problem is undecidable, and therefore not even perl can always parse Perl. Perl makes the unusual choice of giving the user access to its full programming power in its own compile phase. The cost in terms of theoretical purity is high, but practical inconvenience seems to be rare.

Other programs that undertake to parse Perl, such as source-code analyzers and auto-indenters, have to contend not only with ambiguous syntactic constructs but also with the undecidability of Perl parsing in the general case. Adam Kennedy's PPI project focused on parsing Perl code as a document (retaining its integrity as a document), instead of parsing Perl as executable code (which not even Perl itself can always do). It was Kennedy who first conjectured that, "parsing Perl suffers from the '[[Halting problem|Halting Problem]]'."<ref>The quote is from {{cite web | url=http://search.cpan.org/~adamk/PPI-1.201/lib/PPI.pm | title=PPI—Parse, Analyze and Manipulate Perl (without perl) | author=Kennedy, Adam | year=2006 | publisher=[[CPAN]]}}</ref> and this was later proved.<ref>{{cite journal
  | authorlink = Jeffrey Kegler
  | title = Rice's Theorem
  | journal = The Perl Review
  | volume = 4
  | issue = 3
  | pages = 23–29
  | date = Summer 2008}} and {{cite journal
  | authorlink = Jeffrey Kegler
  | title = Perl is Undecidable
  | journal = The Perl Review
  | volume = 5
  | issue = 0
  | pages = 7–11
  | date = Fall 2008}}, available online at {{cite web | url=http://www.jeffreykegler.com/Home/perl-and-undecidability | title=Perl and Undecidability | author=Kegler, Jeffrey}}
</ref>

Perl is distributed with some 120,000 functional tests. These run as part of the normal build process and extensively exercise the interpreter and its core modules. Perl developers rely on the functional tests to ensure that changes to the interpreter do not introduce bugs; conversely, Perl users who see that the interpreter passes its functional tests on their system can have a high degree of confidence that it is working properly.

Maintenance of the Perl interpreter has become increasingly difficult over the years. The code base has undergone continuous development since 1994. The code has been optimized for performance at the expense of simplicity, clarity, and strong internal interfaces. New features have been added, yet virtually complete backward compatibility with earlier versions is maintained. Major releases of Perl were coordinated by Perl pumpkings, <ref>http://www.perlfoundation.org/perl5/index.cgi?pumpking</ref> which handled integrating patch submissions and bug fixes, but the language has since changed to a rotating, monthly release cycle.  Development discussion takes place via the perl5_porters mailing list.  As of Perl 5.11, development efforts have included refactoring certain core modules known as 'dual lifed' modules out of the Perl core<ref>[http://search.cpan.org/~jesse/perl-5.11.1/pod/perl5110delta.pod Perl 5.11.0 delta]</ref> to help alleviate some of these problems.

=== Availability ===
<!--Note to editors:
Perl is available on so many platforms that it doesn't make sense to keep a laundry list in this article.
Do not list a specific platform unless there are notable issues about running Perl on it.

-->Perl is [[free software]] and is licensed under both the [[Artistic License]] and the [[GNU General Public License]]. Distributions are available for most [[operating system]]s. It is particularly prevalent on [[Unix]] and [[Unix-like]] systems, but it has been ported to most modern (and many obsolete) platforms. With only six reported exceptions, Perl can be compiled from [[source code]] on all Unix-like, [[POSIX]]-compliant, or otherwise-Unix-compatible platforms.<ref name="cpanports">{{cite web | url=http://www.cpan.org/ports/ | title=Perl Ports (Binary Distributions) | publisher=CPAN.org | author=Hietaniemi, Jarkko | year=1998}}</ref> However, this is rarely necessary, because Perl is included in the default installation of many popular operating systems.

Because of unusual changes required for the [[Mac OS history|Mac OS Classic]] environment, a special port called MacPerl was shipped independently.<ref name="macperl">{{cite web | url=http://www.macperl.com/ | title=The MacPerl Pages | year=1997 | publisher=Prime Time Freeware}}</ref>

The ''Comprehensive Perl Archive Network'' ([http://www.cpan.org/ CPAN]) carries a complete list of supported platforms with links to the distributions available on each.<ref>[http://www.cpan.org/ports/ CPAN/ports<!-- Bot generated title -->]</ref> CPAN is also the source for publicly available Perl modules that are not part of the core Perl distribution.

==== Windows ====

Users of [[Microsoft Windows]] typically install one of the native binary distributions of Perl for Win32,<ref>{{cite web | url=http://win32.perl.org/wiki/index.php?title=Win32_Distributions#Perl_Distributions | title=Win32 Distributions | publisher=Win32 Perl Wiki}}</ref> most commonly [[Strawberry Perl]] or [[ActivePerl]]. Compiling Perl from [[source code]] under Windows is possible, but most installations lack the requisite C compiler and build tools. This also makes it difficult to install modules from the CPAN, particularly those that are partially written in C.  Users of the ActivePerl binary distribution are, therefore, dependent on the repackaged modules provided in [[ActiveState]]’s module repository, which are precompiled and can be installed with [[Perl package manager|PPM]]. Limited resources to maintain this repository have been cause for various long-standing problems.<ref>{{cite web | url=http://www.mail-archive.com/perl-qa@perl.org/msg05407.html | title=Activestate and Scalar-List-Utils | author=Golden, David | year=2006}}</ref><ref>{{cite web | url=http://use.perl.org/~Alias/journal/35219 | title=ActivePerl PPM repository design flaw goes critical | author=Kennedy, Adam | year=2007}}</ref>

[[Strawberry Perl]],<ref>[http://strawberryperl.com/ Strawberry Perl website]</ref> is an open source distribution for Windows.  It has had regular, quarterly releases since January 2008, including new modules as feedback and requests come in.  Strawberry Perl aims to be able to install modules like standard Perl distributions on other platforms, including compiling XS modules. Strawberry Perl started as a way in part to address the flaws in ActiveState's distribution and resolve other problems of Perl on the Windows platform.

A community project<ref>[http://win32.perl.org/ win32.perl.org/]</ref> was launched by [[Adam Kennedy (Programmer)|Adam Kennedy]] on behalf of [[The Perl Foundation]] in June 2006. A community website for "all things Windows and Perl." A major aim of this project is to provide production-quality alternative Perl distributions that include an embedded C compiler and build tools, so as to enable Windows users to install modules directly from the CPAN.  A related version with research and experimental work was done in the Vanilla Perl distribution.<ref>[http://vanillaperl.com/ Vanilla Perl website]</ref>

The [[Cygwin]] emulation layer is another popular way of running Perl under Windows. Cygwin provides a Unix-like environment on Windows, and both perl and cpan are conveniently available as standard pre-compiled packages in the Cygwin setup program. Because Cygwin also includes the [[GNU Compiler Collection|gcc]], compiling Perl from source is also possible.

== Language structure ==
In Perl, the minimal [[Hello world]] program may be written as follows:
<source lang="perl">
print "Hello, world!\n"
</source>
This [[Input/output|prints]] the [[String (computer science)|string]] ''Hello, world!'' and a [[newline]], symbolically expressed by an <code>n</code> character whose interpretation is altered by the preceding [[escape character]] (a backslash).

The canonical form of the program is slightly more verbose:

<source lang="perl">
#!/usr/bin/perl
print "Hello, world!\n";
</source>

The hash mark character introduces a [[comment (computer programming)|comment]] in Perl, which runs up to the end of the line of code and is ignored by the compiler. The comment used here is of a special kind: it’s called the [[Shebang (Unix)|shebang]] line. This tells Unix-like operating systems where to find the Perl interpreter, making it possible to invoke the program without explicitly mentioning <code>perl</code>. (Note that, on [[Microsoft Windows]] systems, Perl programs are typically invoked by associating the <code>.pl</code> [[Filename extension|extension]] with the Perl interpreter. In order to deal with such circumstances, <code>perl</code> detects the shebang line and parses it for switches;<ref name="perlrun">{{cite web | url=http://perldoc.perl.org/perlrun.html#DESCRIPTION | title=perlrun manpage}}</ref> therefore, it is not strictly true that the shebang line is ignored by the compiler.)

The second line in the canonical form includes a semicolon, which is used to separate statements in Perl. With only a single statement in a block or file, a separator is unnecessary, so it can be omitted from the minimal form of the program—or more generally from the final statement in any block or file. The canonical form includes it because it is common to terminate every statement even when it is unnecessary to do so, as this makes editing easier: code can be added to, or moved away from, the end of a block or file without having to adjust semicolons.

Version 5.10 of Perl introduces a <code>say</code> function that implicitly appends a newline character to its output, making the minimal "Hello world" program even shorter:

<source lang="perl">
use 5.010; # must be present to import the new 5.10 functions, notice that it is 5.010 not 5.10
say 'Hello, world!'
</source>

===Data types===

Perl has a number of fundamental [[data type]]s. The most commonly used and discussed are [[Scalar (computing)|scalars]], [[Array data type|array]]s, [[Hash table|hashes]], [[filehandle]]s, and [[subroutines]]:

{| class="wikitable"
|-
! Type
! Sigil
! Example
! Description
|-
|[[Scalar (computing)|Scalar]]
|$
|$foo
|a single value; it may be a number, a [[String (computer science)|string]], a file handle, or a [[Reference (computer science)|reference]].
|-
|[[Array data type|Array]]
|@
|@foo
|An ordered collection of scalars.
|-
|[[Associative array]]
|%
|%foo
|A map from strings to scalars; the strings are called ''keys'', and the scalars are called ''values''.  Also known as a ''hash''.
|-
|[[File handle]]
|none
|$foo or FOO
|A map to a file, device, pipe, or scalar that is open for reading, writing, or both.
|-
|[[Subroutine]]
|&
|&foo
|A piece of code that may be passed arguments, be executed, and return data.
|-
|[[Perl#Typeglob_values|Typeglob]]
|*
|*foo
|The symbol table entry for all types with the name 'foo'.
|}

====Scalar values====
String values (literals) must be enclosed by quotes. Enclosing a string in double quotes allows the values of variables whose names appear in the string to automatically replace the variable name (or be '''[[Variable_interpolation#Interpolation|interpolated]]''') in the string. Enclosing a string in single quotes prevents variable interpolation. If $name is "Jim", print("My name is $name") will print "My name is Jim", but print('My name is $name') will print "My name is $name".

To include a double quotation mark in a string, precede it with a backslash or enclose the string in single quotes. To include a single quotation mark, precede it with a backslash or enclose the string in double quotes. Strings can also be quoted with the q and qq quote-like operators. 'this' is identical to q(this) and "$this" is identical to qq($this).

Finally, multiline strings can be defined using [[here document]]s:

<source lang="perl">
$multilined_string = <<EOF;
This is my multilined string
note that I am terminating it with the word "EOF".
EOF
</source>

Numbers (numeric constants) do not require quotation. Perl will convert numbers into strings and vice versa depending on the context in which they are used. When strings are converted into numbers, trailing non-numeric parts of the strings are discarded. If no leading part of a string is numeric, the string will be converted to the number 0. In the following example, the strings $n and $m are treated as numbers. This code prints the number '5'. The values of the variables remain the same. Note that in Perl, <code>+</code> is always the numeric addition operator. The string concatenation operator is the period.

<source lang="perl">
$n = '3 apples';
$m = '2 oranges';
print $n + $m;
</source>
Functions are provided for the [[rounding]] of fractional values to integer values: <code>int</code> chops off the fractional part, rounding towards zero; <code>POSIX::ceil</code> and <code>POSIX::floor</code> round always up and always down, respectively.  The number-to-string conversion of <code>printf "%f"</code> or <code>sprintf "%f"</code> round out even, use [[Rounding#Round half to even|bankers' rounding]].

Perl also has a boolean context that it uses in evaluating conditional statements. The following values all evaluate as false in Perl:

<source lang="perl">
$false = 0; # the number zero
$false = 0.0; # the number zero as a float
$false = 0b0; # the number zero in binary
$false = 0x0; # the number zero in hexadecimal
$false = '0'; # the string zero
$false = ""; # the empty string
$false = undef; # the return value from undef
$false = 2-3+1  # computes to 0 which is converted to "0" so it is false
</source>

All other (non-zero evaluating) values evaluate to true. This includes the odd self-describing literal string of "0 but true", which in fact is 0 as a number, but true when used as a boolean. All non-numeric strings also have this property, but this particular string is truncated by Perl without a numeric warning. A less explicit but more conceptually portable version of this string is '0E0' or '0e0', which does not rely on characters being evaluated as 0, because '0E0' is literally zero times ten to the power zero.

Evaluated boolean expressions are also scalar values. The documentation does not promise which ''particular'' value of true or false is returned. Many boolean operators return 1 for true and the empty-string for false. The ''defined()'' function determines whether a variable has any value set. In the above examples, ''defined($false)'' is true for every value except ''undef''.

If either 1 or 0 are specifically needed, an explicit conversion can be done using the [[conditional operator]]:

<source lang="perl">
my $real_result = $boolean_result ? 1 : 0;
</source>

====Array values====
An [[Array data type|array value]] (or list) is specified by listing its elements, separated by commas, enclosed by parentheses (at least where required by operator precedence).

<source lang="perl">
@scores = (32, 45, 16, 5);
</source>

The qw() quote-like operator allows the definition of a list of strings without typing of quotes and commas. Almost any delimiter can be used instead of parentheses. The following lines are equivalent:

<source lang="perl">
@names = ('Billy', 'Joe', 'Jim-Bob');
@names = qw(Billy Joe Jim-Bob);
</source>

The split function returns a list of strings, which are split from a string expression using a delimiter string or regular expression.

<source lang="perl">
@scores = split(',', '32,45,16,5');
</source>

Individual elements of a list are accessed by providing a numerical index in square brackets. The scalar sigil must be used. Sublists (array slices) can also be specified, using a range or list of numeric indices in brackets. The array sigil is used in this case. For example, $month[3] is "March", and @month[4..6] is ("April", "May", "June").

====Hash values====
A hash (or [[associative array]]) may be initialized from a list of key/value pairs. If the keys are separated from the values with the <code>=></code> operator (sometimes called a [[fat comma]]), rather than a comma, they may be unquoted (barewords<ref>
{{cite book
|last= Wainwright
|first= Peter
|title= Pro Perl
|url= http://books.google.com/books?id=1bbjLxkBLaMC
|accessdate= 2010-08-03
|series= Pro to Expert Series
|year= 2005
|publisher= Apress
|isbn= 9781590594384
|page= 64
|pages= 1037
|quote= [...] a string without quotes, known as a bareword string [...]
}}
</ref>). The following lines are equivalent:

<source lang="perl">
%favorite = ('joe', "red", 'sam', "blue");
%favorite = (joe => 'red', sam => 'blue');
</source>

Individual values in a hash are accessed by providing the corresponding key, in curly braces. The <code>$</code> sigil identifies the accessed element as a scalar. For example, $favorite{joe} equals 'red'. A hash can also be initialized by setting its values individually:

<source lang="perl">
$favorite{joe}   = 'red';
$favorite{sam}   = 'blue';
$favorite{oscar} = 'green';
</source>

Multiple elements may be accessed using the <code>@</code> sigil instead (identifying the result as a list). For example,
@favorite{'joe', 'sam'} equals ('red', 'blue').

====File Handles====
File Handles provide read and write access to resources.  These are most often files on disk, but can also be a device, a [[Pipeline (Unix)|pipe]], or even a scalar value.

Originally, File Handles could only be created with package variables, using the ALL_CAPS convention to distinguish it from other variables.  Perl 5.6 and newer also accept a scalar variable, which will be set ([[Autovivification|autovivified]]) to a reference to an anonymous file handle, in place of a named file handle.  Using the ALL_CAPS method for file handles is considered deprecated by the community.<ref>[http://www.modernperlbooks.com/mt/2010/04/three-arg-open-migrating-to-modern-perl.html Three Arg Open: Migrating to Modern Perl]</ref>

====Typeglob values====
A typeglob value is a symbol table entry. The main use of typeglobs is creating symbol table aliases. For example:

<source lang="perl">
*PI = \3.141592653; # creating constant scalar $PI
*this = *that; # creating aliases for all data types 'this' to all data types 'that'
</source>

====Array functions====
The number of elements in an array can be determined either by evaluating the array in scalar context or with the help of the <code>$#</code> sigil. The latter gives the index of the last element in the array, not the number of elements. The expressions scalar(@array) and ($#array&nbsp;+&nbsp;1) are equivalent.

====Hash functions====
There are a few functions that operate on entire hashes. The ''keys'' function takes a hash and returns the list of its keys. Similarly, the ''values'' function returns a hash's values. Note that the keys and values are returned in a consistent but arbitrary order.

<source lang="perl">
# Every call to each returns the next key/value pair.
# All values will be eventually returned, but their order
# cannot be predicted.
while (($name, $address) = each %addressbook) {
 print "$name lives at $address\n";
}

# Similar to the above, but sorted alphabetically
foreach my $next_name (sort keys %addressbook) {
 print "$next_name lives at $addressbook{$next_name}\n";
}
</source>

=== Control structures ===
{{Main|Perl control structures}}

Perl has several kinds of control structures.

It has block-oriented control structures, similar to those in the C, [[Javascript]], and [[Java (programming language)|Java]] programming languages. Conditions are surrounded by parentheses, and controlled blocks are surrounded by braces:

 ''label'' while ( ''cond'' ) { ... }
 ''label'' while ( ''cond'' ) { ... } continue { ... }
 ''label'' for ( ''init-expr'' ; ''cond-expr'' ; ''incr-expr'' ) { ... }
 ''label'' foreach ''var'' ( ''list'' ) { ... }
 ''label'' foreach ''var'' ( ''list'' ) { ... } continue { ... }
 if ( ''cond'' ) { ... }
 if ( ''cond'' ) { ... } else { ... }
 if ( ''cond'' ) { ... } elsif ( ''cond'' ) { ... } else { ... }

Where only a single statement is being controlled, statement modifiers provide a more-concise syntax:

 ''statement'' if ''cond'' ;
 ''statement'' unless ''cond'' ;
 ''statement'' while ''cond'' ;
 ''statement'' until ''cond'' ;
 ''statement'' foreach ''list'' ;

[[Short-circuit evaluation|Short-circuit logical operators]] are commonly used to affect control flow at the expression level:

 ''expr'' and ''expr''
 ''expr'' && ''expr''
 ''expr'' or ''expr''
 ''expr'' <nowiki>||</nowiki> ''expr''

(The "and" and "or" operators are similar to && and <nowiki>||</nowiki> but have lower [[Order of operations|precedence]], which makes it easier to use them to control entire statements.)

The flow control keywords <code>next</code> (corresponding to C's <code>continue</code>), <code>last</code> (corresponding to C's <code>break</code>), <code>return</code>, and <code>redo</code> are expressions, so they can be used with short-circuit operators.

Perl also has two implicit looping constructs, each of which has two forms:

 ''results'' = grep { ... } ''list''
 ''results'' = grep ''expr'', ''list''
 ''results'' = map { ... } ''list''
 ''results'' = map ''expr'', ''list''

<code>grep</code> returns all elements of ''list'' for which the controlled block or expression evaluates to true. <code>map</code> evaluates the controlled block or expression for each element of ''list'' and returns a list of the resulting values. These constructs enable a simple [[functional programming]] style.

Up until the 5.10.0 release, there was no [[switch statement]] in Perl 5. From 5.10.0 onward, a multi-way branch statement called <code>given</code>/<code>when</code> is available, which takes the following form:

 use v5.10; # must be present to import the new 5.10 functions
 given ( ''expr'' ) { when ( ''cond'' ) { ... } default { ... } }

Syntactically, this structure behaves similarly to [[switch statement]]s found in other languages, but with a few important differences. The largest is that unlike switch/case structures, given/when statements break execution after the first successful branch, rather than waiting for explicitly defined break commands. Conversely, explicit continues are instead necessary to emulate switch behavior.

For those not using Perl 5.10, the Perl documentation describes a half-dozen ways to achieve the same effect by using other control structures. There is also a Switch module, which provides functionality modeled on the forthcoming [[Perl 6]] re-design. It is implemented using a [[source filter]], so its use is unofficially discouraged.<ref>[http://www.perlmonks.org/?node_id=496084 using switch<!-- Bot generated title -->]</ref>

Perl includes a <code>goto label</code> statement, but it is rarely used. Situations where a <code>goto</code> is called for in other languages don't occur as often in Perl because of its breadth of flow control options.

There is also a <code>goto &sub</code> statement that performs a [[tail call]]. It terminates the current subroutine and immediately calls the specified <code>''sub''</code>. This is used in situations where a caller can perform more-efficient [[Call stack|stack]] management than Perl itself (typically because no change to the current stack is required), and in deep recursion, tail calling can have substantial positive impact on performance because it avoids the overhead of scope/stack management on return.

=== Subroutines ===
[[Subroutine]]s are defined with the <code>sub</code> keyword and are invoked simply by naming them. If the subroutine in question has not yet been declared, invocation requires either parentheses after the function name or an ampersand ('''&''') before it. But using '''&''' without parentheses will also implicitly pass the arguments of the current subroutine to the one called, and using '''&''' with parentheses will bypass prototypes.

<source lang="perl">
# Calling a subroutine

# Parentheses are required here if the subroutine is defined later in the code
foo();
&foo; # (this also works, but has other consequences regarding arguments passed to the subroutine)

# Defining a subroutine
sub foo { ... }

foo; # Here parentheses are not required
</source>

A list of arguments may be provided after the subroutine name. Arguments may be scalars, lists, or hashes.

<source lang="perl">
foo $x, @y, %z;
</source>
The parameters to a subroutine do not need to be declared as to either number or type; in fact, they may vary from call to call. Any validation of parameters must be performed explicitly inside the subroutine.

Arrays are expanded to their elements; hashes are expanded to a list of key/value pairs; and the whole lot is passed into the subroutine as one flat list of scalars.

Whatever arguments are passed are available to the subroutine in the special array <code>@_</code>. The elements of <code>@_</code> are references to the actual arguments; changing an element of <code>@_</code> changes the corresponding argument.

Elements of <code>@_</code> may be accessed by subscripting it in the usual way.

<source lang="perl">
$_[0], $_[1]
</source>

However, the resulting code can be difficult to read, and the parameters have [[Evaluation strategy#Call by reference|pass-by-reference]] semantics, which may be undesirable.

One common idiom is to assign <code>@_</code> to a list of named variables.

<source lang="perl">
 my ($x, $y, $z) = @_;
</source>

This provides mnemonic parameter names and implements [[Evaluation strategy#Call by value|pass-by-value]] semantics. The <code>my</code> keyword indicates that the following variables are lexically scoped to the containing block.

Another idiom is to shift parameters off of <code>@_</code>. This is especially common when the subroutine takes only one argument or for handling the <code>$self</code> argument in object-oriented modules.

<source lang="perl">
my $x = shift;
</source>

Subroutines may assign <code>@_</code> to a hash to simulate named arguments; this is recommended in ''Perl Best Practices'' for subroutines that are likely to ever have more than three parameters.<ref>
Damian Conway, ''[http://www.oreilly.com/catalog/perlbp/chapter/ch09.pdf Perl Best Practices]'', p.182</ref>

<source lang="perl">
sub function1 {
 my %args = @_;
 print "'x' argument was '$args{x}'\n";
}
function1( x => 23 );
</source>

Subroutines may return values.

<source lang="perl">
return 42, $x, @y, %z;
</source>

If the subroutine does not exit via a <code>return</code> statement, then it returns the last expression evaluated within the subroutine body. Arrays and hashes in the return value are expanded to lists of scalars, just as they are for arguments.

The returned expression is evaluated in the calling context of the subroutine; this can surprise the unwary.

<source lang="perl">
sub list { (4, 5, 6) }
sub array { @x = (4, 5, 6); @x }

$x = list; # returns 6 - last element of list
$x = array; # returns 3 - number of elements in list
@x = list; # returns (4, 5, 6)
@x = array; # returns (4, 5, 6)
</source>

A subroutine can discover its calling context with the <code>wantarray</code> function.

<source lang="perl">
sub either {
 return wantarray ? (1, 2) : 'Oranges';
}

$x = either; # returns "Oranges"
@x = either; # returns (1, 2)
</source>

===Regular expressions===
The Perl language includes a specialized syntax for writing [[regular expression]]s (RE, or regexes), and the interpreter contains an engine for matching strings to regular expressions. The regular-expression engine uses a [[backtracking]] algorithm, extending its capabilities from simple pattern matching to string capture and substitution. The regular-expression engine is derived from regex written by [[Henry Spencer]].

The Perl regular-expression syntax was originally taken from Unix Version 8 regular expressions. However, it diverged before the first release of Perl and has since grown to include far more features. Many other languages and applications are now adopting [[PCRE|Perl compatible regular expressions]] over [[POSIX]] regular expressions, such as [[PHP]], [[Ruby programming language|Ruby]], [[Java (programming language)|Java]], Microsoft's [[.NET Framework]],<ref>Microsoft Corp., ".NET Framework Regular Expressions", ''.NET Framework Developer's Guide'', [http://msdn2.microsoft.com/en-us/library/hs600312(VS.71).aspx]</ref> and the [[Apache HTTP server]].

Regular-expression syntax is extremely compact, owing to history. The first regular-expression dialects were only slightly more expressive than [[Glob (programming)|globs]], and the syntax was designed so that an expression would resemble the text that it matches.{{Citation needed|date=June 2007}} This meant using no more than a single punctuation character or a pair of delimiting characters to express the few supported assertions. Over time, the expressiveness of regular expressions grew tremendously, but the syntax design was never revised and continues to rely on punctuation. As a result, regular expressions can be cryptic and extremely dense.

====Uses====
The <code>m//</code> (match) operator introduces a regular-expression match. (If it is delimited by slashes, as in all of the examples here, then the leading <code>m</code> may be omitted for brevity. If the <code>m</code> is present, as in all of the following examples, other delimiters can be used in place of slashes.) In the simplest case, an expression such as

<source lang="perl">
$x =~ /abc/;
</source>

evaluates to true [[if and only if]] the string <code>$x</code> matches the regular expression <code>abc</code>.

The <code>s///</code> (substitute) operator, on the other hand, specifies a search-and-replace operation:

<source lang="perl">
$x =~ s/abc/aBc/; # upcase the b
</source>

Another use of regular expressions is to specify delimiters for the <code>split</code> function:

<source lang="perl">
@words = split /,/, $line;
</source>

The <code>split</code> function creates a list of the parts of the string that are separated by matches of the regular expression. In this example, a line is divided into a list of its comma-separated parts, and this list is then assigned to the <code>@words</code> array.

==== Syntax ====
=====Modifiers=====
Perl regular expressions can take ''modifiers''. These are single-letter suffixes that modify the meaning of the expression:

<source lang="perl">
$x =~ /abc/i; # case-insensitive pattern match
$x =~ s/abc/aBc/g; # global search and replace
</source>

Because the compact syntax of regular expressions can make them dense and cryptic, the <code>/x</code> modifier was added in Perl to help programmers write more-legible regular expressions. It allows programmers to place whitespace and comments ''inside'' regular expressions:

<source lang="perl">
$x =~ /
 a   # match 'a'
 .   # followed by any character
 c   # then followed by the 'c'character
 /x;
</source>

=====Capturing=====
Portions of a regular expression may be enclosed in parentheses; corresponding portions of a matching string are ''captured''. Captured strings are assigned to the sequential built-in variables <code>$1, $2, $3, ...</code>, and a list of captured strings is returned as the value of the match.

<source lang="perl">
$x =~ /a(.)c/; # capture the character between 'a' and 'c'
</source>

Captured strings <code>$1, $2, $3, ...</code> can be used later in the code.

Perl regular expressions also allow built-in or user-defined functions apply to the captured match, by using the <code>/e</code> modifier:

<source lang="perl">
$x = "Oranges";
$x =~ s/(ge)/uc($1)/e; # OranGEs
$x .= $1; # append $x with the contents of the match in the previous statement: OranGEsge
</source>

===Objects===

{{Expand section|date=March 2010}}
There are many ways to write [[Object-oriented programming|object-oriented]] code in Perl. The most basic is using "blessed" [[Reference (computer science)|references]]. This works by identifying a reference of any type as belonging to a given package, and the package provides the methods for the blessed reference. For example, a two-dimensional point could be defined this way:

<source lang="perl">
sub Point::new {
  # Here, Point->new(4, 5) will result in $class being 'Point'.
  # It's a variable to support subclassing (see the perloop manpage).
  my ($class, $x, $y) = @_;
  bless [$x, $y], $class;   # Implicit return
}

sub Point::distance {
  my ($self, $from) = @_;
  my ($dx, $dy) = ($$self[0] - $$from[0], $$self[1] - $$from[1]);
  sqrt($dx * $dx + $dy * $dy);
}
</source>

This class can be used by invoking <code>new()</code> to construct instances, and invoking <code>distance</code> on those instances.

<source lang="perl">
my $p1 = Point->new(3, 4);
my $p2 = Point->new(0, 0);
print $p1->distance($p2);  # Prints 5
</source>

Many modern Perl applications use the [[Moose (Perl)|Moose]] object system.{{Citation needed|date=June 2010}} Moose is built on top of Class::MOP, a meta-object protocol, providing complete introspection for all Moose-using classes. Thus you can ask classes about their attributes, parents, children, methods, etc. using a simple API.

'''Moose classes:'''
* A class has zero or more attributes.
* A class has zero or more methods.
* A class has zero or more superclasses (aka parent classes). A class inherits from its superclass(es).
* A class does zero or more roles, which add the ability to add pre-defined functionality to classes without subclassing.
* A class has a constructor and a destructor.
* A class has a metaclass.
* A class has zero or more method modifiers. These modifiers can apply to its own methods, methods that are inherited from its ancestors, or methods that are provided by roles.

'''Moose roles:'''
* A role is something that a class does, somewhat like mixins or interfaces in other object-oriented programming languages. Unlike mixins and interfaces, roles can be applied to individual object instances.
* A role has zero or more attributes.
* A role has zero or more methods.
* A role has zero or more method modifiers.
* A role has zero or more required methods.

====Examples====

An example of a class written using the MooseX::Declare<ref>[http://search.cpan.org/perldoc?MooseX::Declare MooseX::Declare documentation]</ref> extension to Moose:

<source lang="perl">
use MooseX::Declare;

class Point3D extends Point {
    has 'z' => (isa => 'Num', is => 'rw');

    after clear {
        $self->z(0);
    }
    method set_to (Num $x, Num $y, Num $z) {
        $self->x($x);
        $self->y($y);
        $self->z($z);
    }
}
</source>



This is a class named <code>Point3D</code> that extends another class named <code>Point</code> explained in [[Moose (Perl)#Examples|Moose examples]]. Id adds to its base class a new attribute <code>z</code>, redefines the method <code>set_to</code> and extends the method <code>clear</code>.


* [http://efreedom.com/Question/1-3164267/Perl-Code [[What does this Perl code do?]]]

sub new {
    my $class = shift;
    my $self = {property => 'u', provider => 'ramesh'};
    bless [[$self]], $class;
    return $self;
}
 
It is a constructor for a Perl object. Perl objects can be made from any Perl reference. This one happens to be made from a hash reference (the {property => …} code creates a hash reference). See the perlobj manpage.

Usually you would find such code in a package, which is the container for the methods of a class and its instances:

package Foo;

sub new {
    my $class = shift;                                   # 2
    my $self = {property => 'u', provider => 'ramesh'};  # 3
    bless $self, $class;                                 # 4
    return $self;                                        # 5
}

sub poll {
    my ($self)=@_;                                       # 7
    $self->{CurrentFile}="data.xml";                     # 8
    return $self->http->get("URL given");                # 9
}

Then in some other code you use it like this:

my $myfoo = Foo->new();                                  # 1

Now $myfoo holds a instance of Foo. You can then invoked the object’s methods:

$myfoo->poll();                                          # 6

Line-by-line description (replace Foo with whatever the actual package name is in the code):

   1.      my $myfoo = Foo->new();
      This calls the the “class method” new of the class Foo and stores the result in the scalar variable $myfoo. This call is technically the same as Foo::new("Foo") (without having to repeat the Foo). See Method Invocation in perlobj.
   
   2.      my $class = shift;
      The argument list provided in the call to new contains only the class name.
      shift removes and returns the first value from the @_ array variable that holds the parameter values given when the method is called. See the perlsub for details on parameter passing and the @_ array.
      So, this statement stores the class name "Foo" in a local scalar variable $class.
   
   3.      my $self = {property => 'u', provider => 'ramesh'};
      Create a reference to a new, anonymous hash {…} with some initial key/value pairs and store it in the local scalar variable $self. See perlref for details on creating references.
   
   4.      bless $self, $class;
      Turn the hash reference stored in $self into a Foo object, by “blessing” it into the Foo class (remember, $class eq "Foo").
  
   5.      return $self;
      Return the newly created object.
   
   6.      $myfoo->poll();
      Call the poll method of the object held in the scalar variable $myfoo.
   
   7.      my ($self)=@_;
      The first parameter to instance methods is the object instance itself.
      This statement stores the first value from the @_ parameter array variable into a new local scalar variable $self.
   
   8.      $self->{CurrentFile}="data.xml";
      We know from new that $self will be a hash reference.
      This statement assigns a value to the CurrentFile key in the hash reference that embodies the object.
   
   9.      return $self->http->get("URL given");
      Call the http method on the $self object.
      On the object return returned from the http method, call the get method (passing "URL given" as an argument).
      Return the result of the call to get.

==Database interfaces==
Perl is widely favored for database applications. Its text-handling facilities are useful for generating [[SQL]] queries; arrays, hashes, and automatic memory management make it easy to collect and process the returned data.

In early versions of Perl, database interfaces were created by relinking the interpreter with a client-side database library. This was sufficiently difficult that it was done for only a few of the most-important and most widely used databases, and it restricted the resulting <code>perl</code> executable to using just one database interface at a time.

In Perl 5, database interfaces are implemented by [[Perl DBI]] modules. The DBI (Database Interface) module presents a single, database-independent interface to Perl applications, while the DBD (Database Driver) modules handle the details of accessing some 50 different databases; there are DBD drivers for most [[American National Standards Institute|ANSI]] [[SQL]] databases.

DBI provides caching for database handles and queries, which can greatly improve performance in long-lived execution environments such as [[mod perl|mod_perl]],<ref>{{cite web | last = Bekman | first = Stas | title = Efficient Work with Databases under mod_perl | url = http://perl.apache.org/docs/1.0/guide/performance.html#Efficient_Work_with_Databases_under_mod_perl | accessdate = 2007-09-01 }}</ref> helping high-volume systems avert load spikes as in the [[Slashdot effect]].

In modern Perl applications, especially those written using [[Web application framework]]s such as [[Catalyst (software)|Catalyst]], the DBI module is often used indirectly via [[object-relational mapper]]s such as [[DBIx::Class]], [[Class::DBI]] or [[Rose::DB::Object]] which generate SQL queries and handle data transparently to the application author.

==Comparative performance==
''The Computer Language Benchmarks Game''<ref>[http://shootout.alioth.debian.org/u32/benchmark.php?test=all&lang=all&d=data&v8=on&lua=on&python=on&php=on&perl=on&ruby=on&calc=calculate Boxplot Summary | The Computer Language Benchmarks Game]</ref> compares the performance of implementations of typical programming problems in several programming languages. The submitted Perl implementations were typically toward the high end of the memory-usage spectrum and had varied speed results. Perl's performance in the benchmarks game is typical for interpreted languages.

Large Perl programs start slower than similar programs in compiled languages because perl has to compile the source every time it runs. In a talk at the [[YAPC|YAPC::Europe 2005]] conference and subsequent article "A Timely Start," Jean-Louis Leroy found that his Perl programs took much longer to run than he expected because the perl interpreter spent much of the time finding modules because of his over-large include path.<ref>{{cite web | url=http://www.perl.com/pub/a/2005/12/21/a_timely_start.html | title=A Timely Start | author=Leroy, Jean-Louis | date=2005-12-01 | publisher=Perl.com }}</ref> Unlike Java, Python, and Ruby, Perl has only experimental support for pre-compiling.<ref>{{cite web | url=http://search.cpan.org/~nwclark/perl-5.8.8/ext/B/B/Bytecode.pm#KNOWN_BUGS | title=B::Bytecode Perl compiler's bytecode backend | author=Beattie, Malcolm and Enache Adrian | year=2003 | publisher=search.cpan.org }}</ref> Therefore Perl programs pay this overhead penalty on every execution. The run phase of typical programs is long enough that [[amortized]] startup time is not substantial, but results in benchmarks that measure very short execution times are likely to be skewed.

A number of tools have been introduced to improve this situation. The first such tool was Apache's [[mod perl|mod_perl]], which sought to address one of the most-common reasons that small Perl programs were invoked rapidly: [[Common Gateway Interface|CGI]] [[World Wide Web|Web]] development. [[ActiveState|ActivePerl]], via Microsoft [[ISAPI]], provides similar performance improvements.

Once Perl code is compiled, there is additional overhead during the execution phase that typically isn't present for programs written in compiled languages such as C or C++. Examples of such overhead include [[bytecode]] interpretation, reference-counting memory management, and dynamic type checking.

===Optimizing===
Like any code, Perl programs can be [[Optimization (computer science)|tuned for performance]] using [[Benchmark (computing)|benchmarks]] and [[Performance analysis|profiles]] after a readable and correct implementation is finished. In part because of Perl's interpreted nature, writing more-efficient Perl will not always be enough to meet one's performance goals for a program.

In such situations, the most-critical routines of a Perl program can be written in other languages such as [[C (programming language)|C]] or [[Assembly language|Assembler]], which can be connected to Perl via simple Inline modules or the more-complex-but-flexible [[XS (Perl)|XS]] mechanism.<ref>http://search.cpan.org/perldoc/Inline/</ref> Nicholas Clark, a Perl core developer, discusses some Perl design trade-offs and some solutions in ''When perl is not quite fast enough''.<ref>[http://www.ccl4.org/~nick/P/Fast_Enough/ When perl is not quite fast enough<!-- Bot generated title -->]</ref>

In extreme cases, optimizing Perl can require intimate knowledge of the interpreter's workings rather than skill with algorithms, the Perl language, or general principles of optimization.{{Citation needed|date=July 2007}}

==Future==
{{Main|Perl 6}}
At the 2000 [[O'Reilly Open Source Convention|Perl Conference]], [[Jon Orwant]] made a case for a major new language initiative.<ref>[http://www.nntp.perl.org/group/perl.perl6.meta/424 Transcription of Larry's talk]. Retrieved on 2006 September 28.</ref> This led to a decision to begin work on a redesign of the language, to be called Perl 6. Proposals for new language features were solicited from the Perl community at large, and more than 300 [[Request for Comments|RFCs]] were submitted. For clarity purposes: Perl6 and Perl5 are different languages, sharing a common ancestry.

[[Larry Wall]] spent the next few years digesting the RFCs and synthesizing them into a coherent framework for Perl 6. He has presented his design for Perl 6 in a series of documents called "apocalypses," which are numbered to correspond to chapters in ''[[Programming Perl]]'' ("The Camel Book"). The current, not-yet-finalized specification of Perl 6 is encapsulated in design documents called Synopses, which are numbered to correspond to Apocalypses.

Perl 6 is not intended to be backward compatible, although there will be a compatibility mode.

Thesis work by [[Bradley M. Kuhn]], overseen by Larry Wall, considered the possible use of the [[Java virtual machine]] as a runtime for Perl.<ref>{{cite paper
  | last = Kuhn
  | first = Bradley
  | authorlink = Bradley M. Kuhn
  | title = Considerations on Porting Perl to the Java Virtual Machine
  | publisher = University of Cincinnati
  | date = January 2001
  | url = http://www.ebb.org/bkuhn/writings/technical/thesis/
  | accessdate = 2008-06-28}}</ref>  Kuhn's thesis showed this approach to be problematic, and in 2001, it was decided that Perl 6 would run on a cross-language [[virtual machine]] called [[Parrot virtual machine|Parrot]]. This will mean that other languages targeting the Parrot will gain native access to [[CPAN]], allowing some level of cross-language development.

In 2005, [[Audrey Tang]] created the [[pugs]] project, an implementation of Perl 6 in [[Haskell (programming language)|Haskell]]. This was, and continues to act as, a test platform for the Perl 6 language (separate from the development of the actual implementation) allowing the language designers to explore. The pugs project spawned an active Perl/Haskell cross-language community centered around the [[freenode]] #perl6 irc channel.

A number of features in the Perl 6 language now show similarities to Haskell.

As of early 2009, Perl 6 development is primarily centred around Rakudo Perl 6, an implementation running on top of the Parrot virtual machine. Another implementation, Mildew, is also under active development and does not use Parrot.

Development of Perl 5 is also continuing. Perl 5.12.0 was released in April 2010 <ref name="latest stable release">[http://www.perl.org/get.html http://www.perl.org/get.html] Perl.org, download Perl distributions page</ref>, with some new features influenced by the design of Perl 6.<ref name="the H open">[http://www.h-online.com/open/news/item/Perl-5-12-0-released-Update-976919.html http://www.h-online.com/open/news/item/Perl-5-12-0-released-Update-976919.html] article about 5.12.0 release on the H open website</ref><ref name="perl 5-12-0 features">[http://search.cpan.org/dist/perl-5.12.0/pod/perl5120delta.pod http://search.cpan.org/dist/perl-5.12.0/pod/perl5120delta.pod] Document describing  the differences between the 5.10.0 release and the 5.12.0 release</ref>. New maintenance versions are scheduled to be released on a monthly basis, the latest one, 5.12.1, was released on May 16, 2010.

==The Perl community==
Perl's culture and community has developed alongside the language itself. [[Usenet]] was the first public venue in which Perl was introduced, but over the course of its evolution, Perl's community was shaped by the growth of broadening Internet-based services including the introduction of the World Wide Web. The community that surrounds Perl was, in fact, the topic of Larry Wall's first "State of the Onion" talk.<ref>{{ cite web | url=http://www.wall.org/~larry/keynote/keynote.html | title=Perl Culture (AKA the first State of the Onion) | first=Larry | last=Wall | authorlink=Larry Wall | date=1997-08-20 }}</ref>

===State of the Onion===
State of the Onion is the name for Larry Wall’s yearly [[keynote]]-style summaries on the progress of Perl and its community.  They are characterized by his hallmark humor, employing references to Perl’s culture, the wider hacker culture, Wall’s linguistic background, sometimes his family life, and occasionally even his [[Christian]] background.

Each talk is first given at various Perl conferences and is eventually also published online.

===Pastimes===
Perl's pastimes have become a defining element of the Perl community{{Citation needed|date=March 2010}}. They include both trivial and complex uses of the language.

====JAPHs====
In email, Usenet, and message-board postings, "[[Just another Perl hacker]]" (JAPH) programs have become a common trend, originated by [[Randal L. Schwartz]], one of the earliest professional Perl trainers.<ref>{{cite newsgroup | author = [[Randal L. Schwartz]] | title = Who is Just another Perl hacker? | id = m1hfpvh2jq.fsf@halfdome.holdit.com | newsgroup = comp.lang.perl.misc | date = 1999-05-02 | url = http://groups.google.com/groups?selm=m1hfpvh2jq.fsf@halfdome.holdit.com | accessdate = 2007-11-12 }}</ref>

In the parlance of Perl culture, Perl programmers are known as Perl hackers, and from this derives the practice of writing short programs to print out the phrase "[[Just another Perl hacker]]",. In the spirit of the original concept, these programs are moderately obfuscated and short enough to fit into the signature of an email or Usenet message. The "canonical" JAPH includes the comma at the end, although this is often omitted.

====Perl golf====
Perl "golf" is the pastime of reducing the number of characters (key "strokes") used in a Perl program to the bare minimum, much as how [[golf]] players seek to take as few shots as possible in a round. This use of the word "golf" originally focused on the [[JAPH]]s used in signatures in Usenet postings and elsewhere, although the same stunts had been an unnamed pastime in the language [[APL (programming language)|APL]] in previous decades. The use of Perl to write a program that performed [[RSA]] encryption prompted a widespread and practical interest in this pastime.<ref>[http://www.cypherspace.org/adam/rsa/story.html The quest for the most diminutive munitions program<!-- Bot generated title -->]</ref> In subsequent years, the term "code golf" has been applied to the pastime in other languages.<ref>{{cite web | url=http://codegolf.com/ | title=Code Golf: What is Code Golf? | publisher=29degrees | year=2007 }}</ref>

A [[Perl Golf Apocalypse]] was held at Perl Conference 4.0 in Monterey, California in July 2000.

====Obfuscation====
As with C, [[obfuscated code]] competitions are a well-known pastime. The annual [[Obfuscated Perl contest]] made an arch virtue of Perl's syntactic flexibility.

====Poetry====
Similar to obfuscated code and golf, but with a different purpose, Perl poetry is the practice of writing poems that can actually be compiled as legal (although generally non-sensical) Perl code, for example the piece known as [[Black Perl]]. This hobby is more or less unique to Perl because of the large number of regular English words that are used in the language. New poems are regularly published in the [[Perl Monks]] site's Perl Poetry section.<ref>[http://www.perlmonks.org/?node_id=1590 Perl Poetry section] on [[Perl Monks]]</ref>

====Perl on IRC====	

There are a couple of channels on [[IRC]] that offer free Perl support for the language and some modules.
	
{| class="wikitable" border="1"	
|-	
! IRC Network	
! Channels	
|-	
| irc.freenode.net
| #perl #cbstream #perlcafe #poe
|-	
| irc.perl.org	
| #moose #poe #catalyst #dbix-class #perl-help #distzilla #epo #corehackers #sdl #win32 #toolchain #padre
|-	
| irc.slashnet.org
| #perlmonks
|-	
| irc.oftc.net	
| #perl	
|-	
| irc.efnet.net	
| #perlhelp	
|-	
| irc.rizon.net	
| #perl	
|-	
| irc.debian.org
| #debian-perl
|-	
|}

====CPAN Acme====
There are also many examples of code written purely for entertainment on the [[CPAN]]. <code>Lingua::Romana::Perligata</code>, for example, allows writing programs in [[Latin]].<ref>{{ cite web | url=http://www.csse.monash.edu.au/~damian/papers/HTML/Perligata.html | title=Lingua::Romana::Perligata -- Perl for the XXI-imum Century | author=Conway, Damian }}</ref> Upon execution of such a program, the module translates its source code into regular Perl and runs it.

The Perl community has set aside the "[[Acme Corporation|Acme]]" [[Namespace (computer science)|namespace]] for modules that are fun in nature (but its scope has widened to include exploratory or experimental code or any other module that is not meant to ever be used in production). Some of the Acme modules are deliberately implemented in amusing ways. This includes <code>Acme::Bleach</code>, one of the first modules in the <code>Acme::</code> namespace,<ref>{{cite web | url=http://use.perl.org/~acme/journal/200 | title=use Perl; Journal of acme | date=2001-05-23 | author=Brocard, Leon }}</ref> which allows the program's source code to be "whitened" (i.e., all characters replaced with whitespace) and yet still work.

==See also==
{{Portal|Free software}}

* [[Comparison of programming languages]]
* [[Just another Perl hacker]]
* [[Perl Data Language]]
* [[Perl Object Environment]]
* [[PerlScript]]
* [[Plain Old Documentation]]

==References==
{{Reflist|2}}

==Further reading==
* ''[[Learning Perl]]'', Fifth Edition (the ''Llama book''), ISBN 0-596-52010-6
* ''[[Perl Cookbook]]'', ISBN 0-596-00313-7
* ''[[Programming Perl]]'' (the ''Camel book''), ISBN 0-596-00027-8
* [http://www.ddj.com/web-development/tpj.jhtml The Perl Journal] published 1996–2006 was the leading publication for and about Perl Programming during this time.
* ''[http://hop.perl.plover.com/book/ Higher Order Perl]'' , ISBN 1-55860-701-3

==External links==
<!-- Before adding any links, make sure you have read the External Links style guide, then stopped and reread it again. If you aren't absolutely sure the link is in compliance, ask on the talk page first -->
{{Wikibooks|Perl Programming}}
{{Wikiversity|at=Topic:Perl}}
* [http://www.perl.org/ Perl.org]—Official Perl website
* [http://perldoc.perl.org/ Perl documentation]
* [http://www.perlfoundation.org/ The Perl Foundation]
* [http://www.perlfoundation.org/perl5/ Official Perl 5 Wiki]
* {{dmoz|Computers/Programming/Languages/Perl|Perl}}
* [http://ironman.enlightenedperl.org/ The Iron Man Contest] Many Perl rss feeds are aggregated together to form a source of information about the Perl community as a whole.
<!-- Before adding any links, make sure you have read the External Links style guide, then stopped and reread it again. If you aren't absolutely sure the link is in compliance, ask on the talk page first -->
{{Perl}}
{{FOSS}}

[[Category:Perl|*]]
[[Category:Dynamic programming languages]]
[[Category:Dynamically-typed programming languages]]
[[Category:Free compilers and interpreters]]
[[Category:Free software programmed in C]]
[[Category:Procedural programming languages]]
[[Category:Object-oriented programming languages]]
[[Category:Scripting languages]]
[[Category:Text-oriented programming languages]]
[[Category:Unix programming tools]]
[[Category:Cross-platform software]]
[[Category:American inventions]]

{{Link GA|de}}

[[als:Perl]]
[[ar:بيرل]]
[[bn:পার্ল (প্রোগ্রামিং ভাষা)]]
[[zh-min-nan:Perl]]
[[bs:Perl]]
[[bg:Пърл (език за програмиране)]]
[[ca:Perl]]
[[cs:Perl]]
[[da:Perl]]
[[pdc:Perl]]
[[de:Perl (Programmiersprache)]]
[[et:Perl]]
[[el:Perl]]
[[es:Perl]]
[[eo:Perl]]
[[eu:Perl]]
[[fa:پرل (زبان برنامه‌نویسی)]]
[[fr:Perl (langage)]]
[[ga:Perl]]
[[gl:Perl]]
[[gu:પર્લ]]
[[ko:펄]]
[[hi:पर्ल]]
[[hr:Perl]]
[[id:Perl]]
[[it:Perl]]
[[he:Perl]]
[[ka:პერლი]]
[[ku:Perl]]
[[la:Perl]]
[[lv:Perl]]
[[lb:Perl (Programméiersprooch)]]
[[lt:Perl]]
[[hu:Perl (programozási nyelv)]]
[[mk:Perl]]
[[ml:പേള്‍]]
[[ms:Perl]]
[[nl:Perl (programmeertaal)]]
[[ja:Perl]]
[[no:Perl]]
[[nn:Perl]]
[[pl:Perl]]
[[pt:Perl]]
[[ro:Perl]]
[[ru:Perl]]
[[sah:Perl]]
[[sq:Perl]]
[[simple:Perl]]
[[sk:Perl]]
[[sl:Perl]]
[[ckb:پێرڵ (وێب داڕشتن)]]
[[sr:Програмски језик Перл]]
[[sh:Perl]]
[[fi:Perl]]
[[sv:Perl]]
[[ta:பெர்ள்]]
[[th:ภาษาเพิร์ล]]
[[tg:Перл (забони барномасозӣ)]]
[[tr:Perl]]
[[uk:Perl]]
[[ur:Perl]]
[[vi:Perl]]
[[bat-smg:Perl]]
[[zh:Perl]]