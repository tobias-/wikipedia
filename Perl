'''Perl''' is a [[programming language]] released by [[Larry Wall]] on [[December 18]], [[1987]] that borrows features from [[C programming language|C]], [[sed]], [[awk]], shell scripting ([[UNIX shell|sh]]), and (to a lesser extent) from many other programming languages as well. "Perl" is sometimes [[backronym]]ed to ''Practical Extraction and Report Language'' or ''Pathologically Eclectic Rubbish Lister'' &mdash; but never "PERL".  The name is normally capitalized ("Perl") when referring to the language, but not capitalized ("perl") when referring to the interpreter (e.g. ''"Only perl properly parses Perl."'')

== Rationale  ==
Perl was designed to be a practical language to extract information from text files and to generate reports from that information. One of its mottos is "There's more than one way to do it" (TMTOWTDI - pronounced 'Tim Toady'). Another is ''Perl: the Swiss Army Chainsaw of Programming Languages''. One stated design goal is to make easy tasks easy and difficult tasks possible. Its versatility permits versions of many programming paradigms: [[procedural programming|procedural]], [[functional programming|functional]], and [[Object Oriented Programming|object-oriented]] (though some claim that Perl is not a cleanly designed language because of its multiple paradigms). Perl has a powerful [[regular expression]] engine built directly into its syntax. Perl is often considered the archetypal [[scripting programming languages|scripting language]] and has been called the "glue that holds the web together", as it is one of the most popular [[Common Gateway Interface|CGI]] languages. Its function as a "glue language" can be described broadly as its ability to tie together different systems and interfaces that were not designed to interoperate.

Perl is one of the [[programming language]] components of [[LAMP]].

Perl is [[free software movement|free software]], available under a combination of the ''[[Artistic License]]'' and the [[GPL]]. 
It is available for most [[operating system|operating systems]] but is particularly prevalent on [[Unix]] and [[Unix-like]] systems (e.g: [[Linux]] and [[FreeBSD]]), and is growing in popularity on [[Microsoft Windows]] systems. As an example of Perl in action, [[Wikipedia]] itself was a [[Common Gateway Interface|CGI]] script written in Perl until January [[2002]]. Another example is [[Slashdot]], which runs on the Perl-based [[Slashcode]] software.
When used on the web, Perl is often used in conjunction with the [[Apache web server]] and its [[mod_perl]] module.

== Implementation ==
A huge collection of freely usable perl modules, ranging from advanced mathematics to database connectivity, networking and more, can be downloaded from a network of sites called [[CPAN]], an [[Acronym|acronym]] for Comprehensive Perl Archive Network. Most or all of the software on CPAN is also available under either the [[Artistic License]], the [[GPL]], or both. CPAN.pm is also the name of the Perl module that downloads and installs other Perl modules from one of the CPAN mirror sites: such installations can be done with interactive prompts, or can be fully automated.

Although Perl has most of the ease-of-use features of an interpreted language, it does not strictly interpret and execute source code one line at a time. Rather, perl (the program) first compiles an entire program to an intermediate [[byte code]] (much like [[Java programming language|Java's]] byte code), optimizing as it goes, and then executes that byte code. It is possible to compile a Perl program to byte code to save the compilation step on later executions, though the "interpreter" is still needed to execute that code.

The current version, 5.8.3, includes [[Unicode]] support. Development of the next major release, Perl 6, is also underway. It will run on [[Parrot virtual machine|Parrot]], a [[virtual machine]] which is being developed as a possible multi-language target architecture.

== Control structures ==
The basic control structures do not differ greatly from those used in the [[C programming language|C]] or [[Java programming language|Java]] programming languages:

''Loops''

 while (''Boolean expression'') {
     ''statement(s)''
 }

 do {
     ''statement(s)''
 } while (''Boolean expression'');

 do {
     ''statement(s)''
 } until (''Boolean expression'');
''for one-line statements, "until" can also be used as follows'':
 ''statement(s)'' until ''Boolean expression'';

 for (''initialisation'' ; ''termination condition'' ; ''incrementing expr'') {
     ''statement(s)''
 }

 foreach ( ''array'' ) {
     ''statement(s)''
 }


''If-then-statements''

 if (''Boolean expression'') {
     ''statement(s)''
 }

 unless (''Boolean expression'') {
     ''statement(s)''
 }
''for one-line statments, "unless" can be used as follows'':
 ''statements'' unless ''Boolean expression'';

 if (''Boolean expression'') {
     ''statement(s)''
 } else {
     ''statement(s)''
 }


 if (''Boolean expression'') {
     ''statement(s)''
 } elsif (''Boolean expression'') {
     ''statement(s)''
 }

== Subroutines ==
Subroutines in Perl can be specified with the keyword 'sub'.  Variables passed to a subroutine appear in the subroutine as elements of the local (to the subroutine) scalar array @_.  Calling a subroutine with three scalar variables results in array elements @_[0], @_[1], and @_[2] within the subroutine.  Note that these elements would be referred to as the scalars $_[0], $_[1], and $_[2].

Changes to elements in the @_ array within the subroutine are reflected in the  elements in the calling program.

Subroutines return the value of the last expression evaluated.

An example subroutine definition and call follows:

 ...

 sub x_cubed
 {
   my $x = $_[0];
   $x = $x * $x * $x;
 }

 ...

 $z = -4;
 $y = x_cubed($z);
 print "$y\n";

 ...

== Perl and [[SQL]] databases == 
[[DBI/DBD]] modules can be used to access most [[ANSI]] [[SQL]] databases,
including [[MySQL]] and [[PostgreSQL]].

== Perl 5 ==
Perl5 is an interpreter which processes the text of a Perl script at runtime. Thus, the [[debugger]] is invoked directly from the command line with
<PRE>
        perl -dw ScriptName.pl Argument1 ... ...
</PRE>
Note that there is no limit to the number of arguments: Perl is polyadic;  any number of arguments can be passed to any Perl subroutine, in general. This concept of "no arbitrary limits" is present in most other parts of the language as well. Perl can read a ten million byte string into a variable, if the machine has the memory for it.
== Perl 6 ==
Perl6 will separate parsing and compilation and runtime, making the virtual machine more attractive to developers looking to port other languages to the architecture.

[[Parrot virtual machine|Parrot]] is the Perl6 runtime, and can be programmed at a low level in [[Parrot assembly language]]. Parrot exists in a limited form as of December, 2003, and an increasing number of languages (BASIC, Befunge, Cola, Forth, Jako, Ook!, a subset of Perl6, Plot, and even Python, Ruby, and Scheme -- all at various early stages of development) exist simply to be 'compiled' down to Parrot assembly language opcodes.


== Code samples ==
The canonical "hello world" program would be:

 #!/usr/bin/perl
 print "Hello world\n";

The first line is the [[shebang]], which indicates the interpreter for Unix-like operating systems. The second line prints the string 'Hello world' and a [[newline]] (like a person pressing 'Return' or 'Enter').

Some people humorously claim that Perl stands for 'Pathologically Eclectic Rubbish Lister' due to the high use of meaningful punctuation characters in the language [[syntax]], as may be seen in this example program to print a greeting:

 <nowiki># A sample Perl program</nowiki>
 $_ =&nbsp;"Hello, world! The magic number is 234542354.\n";
 print;
 s/\d+/-1/;
 print;

and its output:

 Hello, world! The magic number is 234542354.
 Hello, world! The magic number is -1.

The fourth line of the example shows the use of a [[regular expression]].

<center>

===Regular Expressions with Perl Examples===
<p><table BORDER CELLPADDING="5" WIDTH="80%">
<tr>
<th>Regular Expression</th>
<th>Description</th>
<th>Example
<br>Note that all the if statements return a TRUE value</th>
</tr>

<tr>
<td>.</td>
<td>Matches an arbitrary character, but not a newline.</td>
<td>
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/...../) {
  print "$string1 has length >= 5\n";
}
</pre></td>
</tr>
    
<tr>
<td>( )</td>
<td>Groups a series of pattern elements to a single element.  When you match a pattern within parentheses, 
you can use any of $1, $2, 
... $9 later to refer to the previously matched pattern.</td>
<td>
<pre class="output">
<b>Program:</b>
$string1 = "Hello World\n";
if ($string1 =~ m/(H..).(o..)/) {
  print "We matched '$1' and '$2'\n";
}
<B>Output:</B>
We matched 'Hel' and 'o W';
</pre></td>
</tr>

<tr>
<td>+</td>
<td>Matches the preceding pattern element one or more times.</td>
<td>
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/l+/) {
  print "There are one or more consecutive l's in $string1\n";
}
</pre></td>
</tr>

<tr>
<td>?</td>
<td>Matches zero or one times.</td>
<td>
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/H.?e/) {
  print "There is an 'H' and a 'e' separated by ";
  print "0-1 characters (Ex: He Hoe)\n";
}
</pre></td>
</tr>
    
<tr>
<td>?</td>
<td>Matches the *, +, or {M,N}'d regexp that comes before
as few times as possible.</td>
<td>
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/(l+?o)/) {
  print "The non-greedy match with one or more 'l'
  print "followed by an 'o' is 'lo', not 'llo'.\n";
}
</pre></td>
</tr>
    
<tr>
<td>*</td>
<td>Matches zero or more times.</td>
<td>
<pre class="output">
$string1 = "Hello World\n";
if ($string =~ m/el*o/) {
  print "There is a 'e' followed by zero to many";
  print "'l' followed by 'o' (eo, elo, ello, elllo)\n";
}
</pre></td>
</tr>
    
<tr>
<td>{M,N}</td>
<td>Denotes the minimum M and the maximum N match count.</td>
<td>
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/l{1,2}/) {
 print "There exists a substring with at least 1";
 print "and at most 2 l's in $string1\n";
}
</pre>
</td>
</tr>
    
<tr>
<td>[...]</td>
<TD>Denotes a set of possible matches.</TD>
<td>
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/[aeiou]+/) {
  print "$string1 contains a one or more";
  print "vowels\n";
}
</pre></td>
</tr>
    
<tr>
<td>|</td>
<td>Matches one of the left or right operand.</td>
<td>
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/(Hello|Hi)/) {
  print "Hello or Hi is ";
  print "contained in $string1";
}
</pre></td>
</tr>
    
<tr>
<td>\b</td>
<td>Matches a word boundary.</td>
<td>
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/\bllo\b/) {
  print "There is a word that starts with";
  print " 'llo'\n";
} else {
  print "There are no words that start with";

  print "'llo'\n";
}

</pre></td>
</tr>
    
<tr>
<td>\w</td>
<td>Matches alphanumeric, including "_".</td>
<td>
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/\w/) {
  print "There is at least one alpha-";
  print "numeric char in $string1 (A-Z, a-z, 0-9, _)\n";
}
</pre></td>
</tr>
    
<tr>
<td>\W</td>
<td>Matches a non-alphanumeric character.</td>
<td>
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/\W/) {
  print "The space between Hello and ";
  print "World is not alphanumeric\n";
}
</pre></td>
</tr>

<tr>
<td>\s</td>
<td>Matches a whitespace character (space, tab, newline, formfeed)</td>
<td>
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/\s.*\s/) {
  print "There are TWO whitespace ";
  print "characters separated by other characters in $string1";
}
</pre></td>
</tr>
    
<tr>
<td>\S</td>
<td>Matches anything BUT a whitespace.</td>
<td>
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/\S.*\S/) {
  print "There are TWO non-whitespace ";
  print "characters separated by other characters in $string1";
}
</pre></td>
</tr>
    
<tr>
<td>\d</td>
<td>Matches a digit, same as [0-9].</td>
<td>
<pre class="output">
$string1 = "99 bottles of beer on the wall.";
if ($string1 =~ m/(\d+)/) {
  print "$1 is the first number in '$string1'\n";
}
<B>Output:</B>
99 is the first number in '99 bottles of beer on the wall.'
</pre></td>
</tr>
    
<tr>
<td>\D</td>
<td>Matches a non-digit.</td>
<td>
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/\D/) {
  print "There is at least one character in $string1";
  print "that is not a string.\n";
}
</pre></td>
</tr>
    
<tr>
<td>^</td>
<td>Matches the beginning of a line or string.</td>
<td>
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/^He/) {
  print "$string1 starts with the characters 'He'\n";
}
</pre></td>
</tr>
    
<tr>
<td>$</td>
<td>Matches the end of a line or string.</td>
<td>
<pre class="output">
$string1 = "Hello World\n";
if ($string1 =~ m/rld$/) {
  print "$string1 is a line or string";
  print "that ends with 'rld'\n";
}
</pre></td>
</tr>
</table></center>

In common with [[C programming language|C]], [[obfuscated code]] competitions are an interesting feature of the Perl culture.
Similar to [[obfuscated code]] but with a different purpose, Perl [[Poetry]] is the practice of writing poems that can actually be compiled by perl. This practice is fairly unique to Perl, due to the large number of regular English words used in the language. New poems can regularly be seen in http://www.perlmonks.org/index.pl?node=Perl%20Poetry.

== External links ==
* [http://www.perl.com perl.com]
* [http://dmoz.org/Computers/Programming/Languages/Perl/ dmoz on Perl]
* [http://www.perl.org Perl.org]
* [http://www.pm.org Perl Monger user group site]
* [http://www.perlmonks.org The Perl Monastery]
* [http://activestate.com ActiveState - Perl for Microsoft Windows|Windows platforms]
* [http://www.cpan.org/ Comprehensive Perl Archive Network]
* [http://search.cpan.org/ Search the Comprehensive Perl Archive Network]
* [http://dev.perl.org/perl6/ Perl 6 development]
* [http://www.parrotcode.org/ Parrot virtual machine]

* [http://www.perldoc.com/ - Perl POD documentation]
* [http://www.wired.com/wired/archive/8.10/cruise_pr.html ''Scripting on the Lido Deck'' by Steve Silberman, Wired Magazine article about Perl Whirl 2000]

===Books===
*[[Programming Perl]] (often called the ''Camel book'')([http://safari.oreilly.com/JVXSL.asp?x=1&mode=section&sortKey=title&sortOrder=asc&view=&xmlid=0-596-00027-8&open=false&g=&srchText=BOOK+AND+%28AUTHOR+Larry+Wall%29&code=&h=&m=&l=1&catid=&s=1&b=1&f=1&t=1&c=1&u=1&r=&o=1&page=0 read online])
* [[Perl Cookbook]] (read online: [http://safari.oreilly.com/JVXSL.asp?x=1&mode=section&sortKey=title&sortOrder=asc&view=&xmlid=0-596-00313-7&open=false&g=&srchText=BOOK+AND+%28BOOKTITLE+perl+cookbook%29&code=&h=&m=&l=1&catid=&s=1&b=1&f=1&t=1&c=1&u=1&r=&o=1&page=0 2nd edition] [http://safari.oreilly.com/JVXSL.asp?x=1&mode=section&sortKey=title&sortOrder=asc&view=&xmlid=1-56592-243-3&open=false&g=&srchText=BOOK+AND+%28BOOKTITLE+perl+cookbook%29&code=&h=&m=&l=1&catid=&s=1&b=1&f=1&t=1&c=1&u=1&r=&o=1&page=0 1st edition]).
*[[Learning Perl]], also called the ''Llama book''


[[de:Perl]] [[eo:Perl Komputillingvo]] [[es:Perl]] [[fr:Langage de programmation Perl]] [[it:Perl]] [[ja:Perl]] [[nl:Perl]] [[pl:Perl]] [[pt:Perl]] [[sv:Perl]]
 [[fi:Perl]]