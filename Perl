{{otheruses}}
{{Infobox programming language
|name = Perl
|logo = <br>[[Image:Programming-republic-of-perl.gif]]
|paradigm = [[functional programming|functional]], [[object-oriented programming|object-oriented]], [[Procedural programming|procedural]]
|year = 1987
|designer = [[Larry Wall]]
|developer = 
|latest_release_version = 5.8.8
|latest_release_date = [[February 2]], [[2006]]
|typing = dynamic
|implementations = 
|dialects = 
|influenced_by = [[C programming language|C]], [[Unix shell|shell]], [[awk]], [[sed]], [[Lisp programming language|lisp]]
|influenced = [[Python programming language|Python]], [[PHP]], [[Ruby programming language|Ruby]]
|operating_system = [[Cross-platform]]
|license =[[GNU General Public License|GPL]] or [[Artistic License]]
|website =[http://www.perl.org www.perl.org]
}}
'''Perl''', also '''Practical Extraction and Report Language''' (a [[backronym]], see [[#Name|below]]) is a [[dynamic programming language|dynamic]] procedural programming language designed by [[Larry Wall]] and first released in 1987. Perl borrows features from [[C programming language|C]], [[Unix shell|shell]] scripting ([[Bourne shell|sh]]), [[awk]], [[sed]], [[Lisp programming language|Lisp]], and, to a lesser extent, many other programming languages.

==Overview==

The perlintro(1) [[man page]] <!-- sic. 'man' is short for 'manual' --> states:

:Perl is a general-purpose programming language originally developed for text manipulation and now used for a wide range of tasks including system administration, web development, network programming, GUI development, and more.

:The language is intended to be practical (easy to use, efficient, complete) rather than beautiful (tiny, elegant, minimal). Its major features are that it's easy to use, supports both procedural and [[Object-oriented programming|object-oriented]] (OO) programming, has powerful built-in support for text processing, and has a large collection of third-party [[Module (programming)|modules]].

===Design===
The design of Perl can be understood as a response to three broad trends in the computer industry: falling hardware costs, rising labor costs, and improvements in compiler technology. Many earlier computer languages, such as [[Fortran]] and C, were designed to make efficient use of expensive computer hardware. In contrast, Perl  is designed to make efficient use of expensive computer programmers.

Perl has many features that ease the programmer's task at the expense of greater CPU and memory requirements. These include automatic memory management; [[dynamic typing]]; strings, lists, and hashes; regular expressions; introspection and an <tt>eval()</tt> function.

Larry Wall was trained as a linguist, and the design of Perl is very much informed by linguistic principles. Examples include [[Huffman coding]] (common constructions should be short), good end-weighting (the important information should come first), and a large collection of language primitives. Perl favors language constructs that are natural for humans to read and write, even where they complicate the Perl interpreter. 

Perl syntax reflects the idea that "things that are different should look different".  For example, scalars, arrays, and hashes have different leading [[Sigil (computer programming)|sigils]]. Array indices and hash keys use different kinds of braces. Strings and regular expressions have different standard delimiters.  This approach can be contrasted with languages like [[Lisp programming language|Lisp]], where the same [[S-expression]] construct and basic syntax is used for many different purposes.

Perl has features that support a variety of programming paradigms, such as [[Procedural programming|procedural]], [[Functional programming|functional]], and [[Object-oriented programming|object-oriented]]. At the same time, Perl does not enforce any particular paradigm, or even require the programmer to choose among them. 

There is a broad practical bent to both the Perl language and the community and culture that surround it. The preface to ''[[Programming Perl]]'' begins, "Perl is a language for getting your job done." One consequence of this is that Perl is not a tidy language. It includes features if people use them, tolerates exceptions to its rules, and employs heuristics to resolve syntactical ambiguities. Because of the forgiving nature of the compiler bugs can be hard to find sometimes. Discussing the variant behaviour of built-in functions in list and scalar context, the perlfunc(1) man page says "In general, they do what you want, unless you want consistency."

Perl has several mottos that convey aspects of its design and use. One is ''"There's more than one way to do it."'' (TMTOWTDI, usually pronounced 'Tim Toady'). Others are ''"Perl: the Swiss Army Chainsaw of Programming Languages"'' and ''"No unnecessary limits"''. A stated design goal of Perl is to make easy tasks easy and difficult tasks possible.  Perl has also been called ''"The Duct Tape of the Internet"''.

===Features===
The overall structure of Perl derives broadly from the programming language [[C programming language|C]]. Perl is a [[procedural programming language]], with [[variable]]s, [[expression (programming)|expression]]s, [[assignment statement]]s, [[brace]]-delimited [[code block]]s, [[control structure]]s, and [[subroutine]]s.

Perl also takes features from [[shell programming]]. All variables are marked with leading [[Sigil (computer programming)|sigil]]s. Sigils unambiguously identify variable names, allowing Perl to have a rich syntax. Importantly, sigils allow variables to be interpolated directly into strings. Like the Unix shells, Perl has many built-in functions for common tasks, like sorting, and for accessing system facilities.

Perl takes [[list]]s from [[Lisp programming language|Lisp]], [[associative array]]s from [[awk]], and [[regular expressions]] from [[sed]]. These simplify and facilitate all manner of parsing, text handling, and data management tasks.

In Perl 5, features were added that support complex [[data structure]]s, [[first-class function]]s (i.e. [[Closure (computer science)|closures]] as values), and an [[object-oriented programming]] model. These include [[reference (computer science)|reference]]s, packages, and class-based method dispatch. Perl 5 also saw the introduction of [[lexically scoped variables]], which make it easier to write robust code, and modules, which make it practical to write and distribute libraries of Perl code.

All versions of Perl do automatic data typing and [[memory management]]. The interpreter knows the type and storage requirements of every data object in the program; it allocates and frees storage for them as necessary. Legal type conversions are done automatically at run time; illegal type conversions are fatal errors.

===Applications===
Perl has many and varied applications. 

It has been used since the early days of the Web to write [[Common Gateway Interface|CGI]] scripts, and is an integral component of the popular [[LAMP (software bundle)|LAMP]] ([[Linux]] / [[Apache HTTP Server|Apache]] / [[MySQL]] / Perl, [[PHP]], and [[Python programming language|Python]]) platform for web development. Large projects written in Perl include [[Slash (weblog system)|Slash]], early implementations of PHP[http://www.php.net/history], and [[UseModWiki]], the [[wiki]] software used in [[Wikipedia]] until 2002. It's known as one of "the three Ps" (Perl, [[Python_programming_language|Python]], and [[PHP]]), which are the most popular server-side, open source scripting languages for the Web, though open source [[Java programming language|Java]] and [[C#]] implementations as well as [[Ruby programming language|Ruby]] have grown popular in recent years.

Perl is often used as a "[[glue language]]", tying together systems and interfaces that were not specifically designed to interoperate. Systems administrators use Perl as an all-purpose tool; short Perl programs can be entered and run on a single command line.

Perl is widely used in finance and [[bioinformatics]], where it is valued for rapid application development, ability to handle large data sets, and the availability of many standard and third-party modules.

===Implementation===
Perl is implemented as a core interpreter, written in C, together with a large collection of modules, written in Perl and C. The source distribution is, as of 2005, 12 [[megabyte|MB]] when packaged in a [[Tar (file format)|tar file]] and [[data compression|compressed]]. The interpreter is 150,000 lines of C code and compiles to a 1 MB executable on typical machine architectures. Alternatively, the interpreter can be compiled to a link library and embedded in other programs. There are nearly 500 modules in the distribution, comprising 200,000 lines of Perl and an additional 350,000 lines of C code. Much of the C code in the modules consists of character encoding tables.

The interpreter has an object-oriented architecture. All of the elements of the Perl language&mdash;scalars, arrays, hashes, coderefs, file handles&mdash;are represented in the interpreter by C structs. Operations on these structs are defined by a large collection of macros, typedefs and functions; these constitute the Perl C API. The Perl API can be bewildering to the uninitiated, but its entry points follow a consistent naming scheme, which provides guidance to those who use it.

The execution of a Perl program divides broadly into two phases: compile-time and run-time. At compile time, the interpreter parses the program text into a syntax tree. At run time, it executes the program by walking the tree. The text is parsed only once, and the syntax tree is subject to optimization before it is executed, so the execution phase is relatively efficient. Compile-time optimizations on the syntax tree include [[constant folding]], context propagation, and [[peephole optimization]].

Perl is a [[dynamic language]] and has a context-sensitive [[grammar]] that cannot be parsed by a straight [[Lex programming tool|Lex]]/[[Yacc]] lexer/parser combination. Instead, it implements its own lexer, which coordinates with a modified [[GNU bison]] parser to resolve ambiguities in the language. It is said that "only perl can parse Perl", meaning that only the [[Perl interpreter]] (''perl'') can parse the Perl language (''Perl''). The truth of this is attested to by the persistent imperfections of other programs that undertake to parse Perl, such as source code analyzers and auto-indenters.

Maintenance of the Perl interpreter has become increasingly difficult over the years. The code base has been in continuous development since 1994. The code has been optimized for performance at the expense of simplicity, clarity, and strong internal interfaces. New features have been added, yet virtually complete backward compatibility with earlier versions is maintained. The size and complexity of the interpreter is a barrier to developers who wish to work on it.

Perl is distributed with some 90,000 functional tests. These run as part of the normal build process, and extensively exercise the interpreter and its core modules. Perl developers rely on the functional tests to ensure that changes to the interpreter do not introduce bugs; conversely, Perl users who see the interpreter pass its functional tests on their system can have a high degree of confidence that it is working properly.

There is no written specification or standard for the Perl language, and no plans to create one for the current version of Perl. There has only ever been one implementation of the interpreter. That interpreter, together with its functional tests, stands as a de facto specification of the language.

===Availability===
Perl is [[free software]], and is licensed under both the [[Artistic License]] and the [[GNU General Public License]]. [[Perl#Distributions|Distributions]] are available for most [[operating system]]s. It is particularly prevalent on [[Unix]] and [[Unix-like]] systems (such as [[Linux]], [[FreeBSD]], and [[Mac OS X]]), and is growing in popularity on [[Microsoft Windows]] systems.

Perl has been ported to over a hundred different platforms, and can, with only six reported exceptions, be compiled from [[Source code|source]] on all Unix-like, [[POSIX]]-compliant or otherwise Unix-compatible platforms, including [[AmigaOS]], [[BeOS]], [[Cygwin]], and [[Mac OS X]] (See [http://www.cpan.org/ports/ ports]). A special port, [http://www.macperl.com/ MacPerl], is available for [[Mac OS|Mac OS Classic]].

Perl can be compiled from source on Windows, however many Windows installations lack a C compiler, so Windows users typically install a binary distribution, such as  [http://www.activestate.com/Products/ActivePerl/ ActivePerl] or [http://www.indigostar.com/indigoperl.htm IndigoPerl].

==Language structure==
===Example Program===
In Perl, the canonical "[[Hello world]]" program is:

 <nowiki>#</nowiki>!/usr/bin/perl
 print "Hello, world!\n";

The first line is the [[Shebang (Unix)|shebang]], which tells the operating system where to find the Perl interpreter. The second line prints the string ''Hello, world!'' and a [[newline]].

The shebang is the usual way to invoke the interpreter on Unix systems.
Windows systems may rely on the shebang,
or they may associate a <tt>.pl</tt> [[Filename extension|file extension]] with the Perl interpreter.

===Data types===
Perl has three fundamental [[data type]]s: [[scalar]]s, [[Array|lists]], and [[Hash table|hashes]]:
*A scalar is a single value; it may be a number, a [[String (computer science)|string]] or a [[Reference (computer science)|reference]]
*A list is an ordered collection of scalars (a variable that holds a list is called an ''array'')
*A hash, or [[associative array]], is a map from strings to scalars; the strings are called ''keys'' and the scalars are called ''values''.

All variables are marked by a leading [[Sigil (computer programming)|sigil]],
which identifies the data type. The same name may be used for variables of different types, without conflict.

  $foo   # a scalar
  @foo   # a list
  %foo   # a hash

Numbers are written in the usual way; strings are enclosed by quotes of various kinds.

  $n     = 42;
  $name  = "joe";
  $color = 'red';

Perl will decide if your string is a number or not based on the context in which it is used. It tries to convert strings into numbers when using them with numerical operators. In the following example the strings $n and $m are treated as numbers when they are the arguments to the addition operator. This code prints the number '5', discarding non number information for the operation, although the variable values remain the same.

  $n     = "3 apples";
  $m     = "2 oranges";
  print $n + $m;

A list is written by listing its elements, 
separated by commas, and enclosed by parentheses where required by operator precedence.

  @scores = (32, 45, 16, 5);

A hash may be initialized from a list of key/value pairs.

  %favorite = (joe => 'red',
               sam => 'blue');

Individual elements of a list are accessed by providing a numerical
index, in square brackets. Individual values in a hash are
accessed by providing the corresponding key, in curly braces. The
<tt>$</tt> sigil identifies the accessed element as a scalar.

  $scores[2]      # an element of @scores
  $favorite{joe}  # a value in %favorite

Multiple elements may be accessed by using the <tt>@</tt> sigil instead
(identifying the result as a list).

  @scores[2, 3, 1]    # three elements of @scores
  @favorite{'joe', 'sam'} # two values in %favorite

The number of elements in an array can be obtained by evaluating the
array in scalar context or with the help of the <tt>$#</tt> [[Sigil (computer programming)|sigil]].
The latter gives the index of the last element in the array, not the number of elements.

  $count = @friends;
  $#friends       # the index of the last element in @friends
  $#friends+1     # usually the number of elements in @friends
                  # this is one more than $#friends because the first element is at
                  # index 0, not 1

There are a few functions that operate on entire hashes.

  @names     = keys   %address;
  @addresses = values %address;

===Control structures===
{{main|Perl control structures}}

Perl has several kinds of control structures. 

It has block-oriented control structures, similar to those in the C and [[Java programming language|Java]] programming languages. Conditions are surrounded by parentheses, and controlled blocks are surrounded by braces:

 ''label'' while ( ''cond'' ) { ... }
 ''label'' while ( ''cond'' ) { ... } continue { ... }
 ''label'' for ( ''init-expr'' ; ''cond-expr'' ; ''incr-expr'' ) { ... }
 ''label'' foreach ''var'' ( ''list'' ) { ... }
 ''label'' foreach ''var'' ( ''list'' ) { ... } continue { ... }
 if ( ''cond'' ) { ... }
 if ( ''cond'' ) { ... } else { ... } 
 if ( ''cond'' ) { ... } elsif ( ''cond'' ) { ... } else { ... } 

Where only a single statement is being controlled, statement modifiers provide a lighter syntax:

 ''statement'' if      ''cond'' ;
 ''statement'' unless  ''cond'' ;
 ''statement'' while   ''cond'' ;
 ''statement'' until   ''cond'' ;
 ''statement'' foreach ''list'' ;

Short-circuit logical operators are commonly used to effect control flow at the expression level:

 ''expr'' and ''expr''
 ''expr'' or  ''expr''

The flow control keywords <tt>next</tt>, <tt>last</tt>, <tt>return</tt>, and <tt>redo</tt> are expressions, so they can be used with short-circuit operators.

Perl also has two implicit looping constructs:

  ''results'' = grep { ... } ''list''
  ''results'' = map  { ... } ''list''

<tt>grep</tt> returns all elements of ''list'' for which the controlled block evaluates to true. <tt>map</tt> evaluates the controlled block for each element of ''list'' and returns a list of the resulting values. These constructs enable a simple functional programming style.

There is no [[switch statement]] (multi-way branch) in Perl 5. The Perl documentation describes a half-dozen ways to achieve the same effect by using other control structures. There is a <tt>Switch</tt> module, however, which provides functionality modeled on the forthcoming [[Perl 6]] re-design.

Perl includes a <tt>goto ''label''</tt> statement, but it is rarely used. Situations where a <tt>goto</tt> is called for in other languages don't occur as often in Perl due to its breadth of flow control options.

There is also a <tt>goto &''sub''</tt> statement that performs a [[tail call]].
It terminates the current subroutine and immediately calls the specified <tt>''sub''</tt>. This is used in situations where a caller can perform more efficient stack management than Perl itself (typically because no change to the current stack is required), and in deep recursion tail calling can have substantial positive impact on performance because it avoids the overhead of scope/stack management on return.

===Subroutines===
[[Subroutine]]s are defined with the <tt>sub</tt> keyword,
and invoked simply by naming them.
Subroutine definitions may appear anywhere in the program.
Parentheses are required for calls that precede the definition.

 foo();
 sub foo { ... }
 foo;

A list of arguments may be provided after the subroutine name.
Arguments may be scalars, lists, or hashes.

 foo $x, @y, %z;

The parameters to a subroutine need not be declared as to either number or type; in fact, they may vary from call to call.
Arrays are expanded to their elements, hashes are expanded to a list of key/value pairs, and the whole lot is passed into the subroutine as one undifferentiated list of scalars.

Whatever arguments are passed are available to the subroutine in the special array <tt>@_</tt>.
The elements of <tt>@_</tt> are aliased to the actual arguments;
changing an element of <tt>@_</tt> changes the corresponding argument.

Elements of <tt>@_</tt> may be accessed by subscripting it in the usual way.

 $_[0], $_[1]

However, the resulting code can be difficult to read,
and the parameters have [[Evaluation strategy#Call by reference|pass-by-reference]] semantics, 
which may be undesirable.

One common idiom is to assign <tt>@_</tt> to a list of named variables.

 my($x, $y, $z) = @_;

This effects both mnemonic parameter names and [[Evaluation strategy#Call by value|pass-by-value]] semantics.
The <tt>my</tt> keyword indicates that the following variables are lexically scoped to the containing block.

Another idiom is to shift parameters off of <tt>@_</tt>. This is especially common when the subroutine takes only one argument.

 my $x = shift;

Subroutines may return values.

 return 42, $x, @y, %z;

If the subroutine does not exit via a <tt>return</tt> statement,
then it returns the last expression evaluated within the subroutine body. Arrays and hashes in the return value are expanded to lists of scalars, just as they are for arguments.

The returned expression is evaluated in the calling context of the subroutine; this can surprise the unwary.

 sub list  {      (4, 5, 6)     }
 sub array { @x = (4, 5, 6); @x }
 
 $x = list;   # returns 6 - last element of list
 $x = array;  # returns 3 - number of elements in list
 @x = list;   # returns (4, 5, 6)
 @x = array;  # returns (4, 5, 6)

A subroutine can discover its calling context with the <tt>wantarray</tt> function.

 sub either { wantarray ? (1, 2) : "Oranges" }
 
 $x = either;    # returns "Oranges"
 @x = either;    # returns (1, 2)

===Regular expressions===
{{seealso|Perl regular expression examples}}

The Perl language includes a specialized syntax for writing [[regular expression]]s (REs), and the interpreter contains an engine for matching strings to regular expressions. The regular expression engine uses a [[backtracking]] algorithm, extending its capabilities from simple pattern matching to string capture and substitution.

The Perl regular expression syntax was originally taken from Unix Version 8 regular expressions. However, it diverged before the first release of Perl, and has since grown to include many more features. Some other languages and applications are now adopting [[PCRE|Perl compatible regular expressions]] over [[POSIX]] regular expressions.

The <tt>m//</tt> (match) operator introduces a regular expression match. (The leading <tt>m</tt> may be omitted for brevity.) In the simplest case, an expression like

  $x =~ m/abc/

evaluates to true [[if and only if]] the string <tt>$x</tt> matches the regular expression <tt>abc</tt>. 

Portions of a regular expression may be enclosed in parentheses;
corresponding portions of a matching string are ''captured''.
Captured strings are assigned to the sequential built-in variables <tt>$1, $2, $3, ...</tt>,
and a list of captured strings is returned as the value of the match.

  $x =~ m/a(.)c/;  # capture the character between 'a' and 'c'

The <tt>s///</tt> (substitute) operator specifies a search and replace operation:

  $x =~ s/abc/aBc/;   # upcase the b

Perl regular expressions can take ''modifiers''. These are single-letter suffixes that modify the meaning of the expression:

  $x =~ m/abc/i;      # case-insensitive pattern match
  $x =~ s/abc/aBc/g;  # global search and replace

Regular expressions can be dense and cryptic. This is because regular expression syntax is extremely compact, generally using single characters or character pairs to represent its operations. Perl provides some relief from this problem with the <tt>/x</tt> modifer, which allows programmers to place whitespace and comments ''inside'' regular expressions:

  $x =~ m/a     # match 'a'
          .     # match any character
          c     # match 'c'
           /x;

One common use of regular expressions is to specify delimiters for the <tt>split</tt> operator:

  @words = split m/,/, $line;   # divide $line into comma-separated values

The <tt>split</tt> operator complements string capture. String capture returns the parts of a string that match a regular expression; <tt>split</tt> returns the parts that don't match.

===Database interfaces===
Perl is widely favored for database applications. Its text handling facilities are good for generating SQL queries; arrays, hashes and automatic memory management make it easy to collect and process the returned data.

In early versions of Perl, database interfaces were created by relinking the interpreter with a client-side database library. This was somewhat clumsy; a particular problem was that the resulting <tt>perl</tt> executable was restricted to using just the one database interface that it was linked to. Also, relinking the interpreter was sufficiently difficult that it was only done for a few of the most important and widely used databases.

In Perl 5, database interfaces are implemented by [[Perl DBI]] modules. The <tt>DBI</tt> (Database Interface) module presents a single, database-independent interface to Perl applications, while the <tt>DBD::</tt> (Database Driver) modules handle the details of accessing some 50 different databases. There are <tt>DBD::</tt> drivers for most [[ANSI]] [[SQL]] databases.

==Comparative performance==
[[Benchmark (computing)|Benchmarks]] that compare Perl to other languages are often quite difficult, as ''working'' code and the most ''efficient'' code are not always the same thing (a result of the "there's more than one way to do it" philosophy). Combined with the fact that benchmarks almost always favor the languages which the benchmark authors understand the most, this leads to a strong skepticism of such measurements.

The "Computer Language Shootout Benchmarks" [http://shootout.alioth.debian.org/] compares the performance of implementations of typical
programming problems in several programming languages. Their Perl implementations typically took up more memory than implementations in other languages, and had varied speed results. Nicholas Clark, a Perl core developer, discusses some of Perl design trade-offs and why Perl may be slower (along with some solutions) in "When perl is not quite fast enough" [http://www.ccl4.org/~nick/P/Fast_Enough/].

Perl may be slower than other languages doing the same thing because it has to compile the source every time it runs. In "A Timely Start" [http://www.perl.com/pub/a/2005/12/21/a_timely_start.html], Jean-Louis Leroy found that his Perl scripts took much longer to run than he expected because the perl interpreter spent much of the time finding and compiling modules. Since Perl cannot save its intermediate result like Java, Python, and Ruby can, Perl scripts pay this overhead penalty on every execution. Once perl starts the run phase, however, it can be quite fast. The overhead is not such a problem when amortized over a long run phase, but can be a significant performance limiter for very short execution times (as often found in benchmarks).

Optimizing Perl can require intimate knowledge of its workings rather than skill with the language and its syntax, meaning that the problem is with the implementation of Perl itself rather than the language. Perl 6, the next major version, will address some of these lessons that other languages have already learned.

==Opinion==

Perl engenders strong feelings among both its proponents and its
detractors.

===Pro===
Programmers who like Perl typically cite its power, expressiveness, and ease of use. Perl provides infrastructure for many common programming tasks, such as string and list processing. Other tasks, such as memory management, are handled automatically and transparently. Programmers coming from other languages to Perl often find that whole classes of problems that they have struggled with in the past just don't arise in Perl. As Larry Wall put it,

{{cquote|What is the sound of Perl? Is it not the sound of a wall that people have stopped banging their heads against?}}

Besides its practical benefits, many programmers simply seem to enjoy working in Perl. Early issues of [http://www.tpj.com The Perl Journal] had a page titled "What is Perl?" that concluded:

{{cquote|'''Perl is fun.''' In these days of self-serving jargon, conflicting and unpredictable standards, and proprietary systems that discourage peeking under the hood, people have forgotten that programming is supposed to be fun. I don't mean the satisfaction of seeing our well-tuned programs do our bidding, but the literary act of creative writing that yields those programs. With Perl, the journey is as enjoyable as the destination ...}}

Whatever the reasons, there's clearly a broad community of people who are passionate about Perl, helping to make it one of the most popular programming languages. In the [http://www.tiobe.com/tpci.htm TIOBE Programming Community Index for May 2006], which estimates the popularity of 50 programming languages by using special search engine queries, Perl comes out ahead of other popular languages such as C#, Python, and Javascript. However, TIOBE clearly shows its bias when it changes it methodology when it looks like Java, the language they commercially support, appears to drop in popularity. The neutrality and methodology of their conclusions is suspect.   

Perl's popularity is also evidenced by the thousands of modules that have been contributed to the CPAN, and the hundreds of design proposals that were submitted as [[Request for Comments|RFCs]] for Perl 6.

===Con===
A common complaint is that Perl is ugly. In particular, its prodigious use of punctuation puts off some people; Perl source code is sometimes likened to "line noise". In ''The Python Paradox'', [[Paul Graham]] both acknowledges and responds to this:

{{cquote|
At the mention of ugly source code, people will of course think of
Perl. But the superficial ugliness of Perl is not the sort I mean.
Real ugliness is not harsh-looking syntax, but having to build
programs out of the wrong concepts. Perl may look like a cartoon character swearing, but there are cases where it surpasses Python conceptually.[http://www.paulgraham.com/pypar.html]
}}

Another criticism is that Perl is excessively complex and compact, and that it leads to "write-only" code, that is, to code that is virtually impossible to understand after it has been written.

In a [[2003]] study titled ''Are Scripting Languages Any Good? A Validation of Perl, Python, Rexx, and Tcl against C, C++, and Java'', Lutz Prechelt wrote:

{{cquote|
...the potential uglyness of any aspect of Perl has carefully been balanced with the power that can be derived from it. Nevertheless, Perl makes it relatively easy to shoot oneself in the foot or to produce programs that are very short but also very difficult to understand. For this reason, somewhat like for C++, writing good Perl programs depends more strongly on the knowledge and discipline of the programmer than in most other languages.[http://page.mi.fu-berlin.de/~prechelt/Biblio/jccpprt2_advances2003.pdf] (PDF)
}}

In [[2000]], [[Eric Raymond]] echoed the "write-only" code sentiment:

{{cquote|
The syntax that had seemed merely eccentric at a hundred lines began to seem like a nigh-impenetrable hedge of thorns at a thousand. "More than one way to do it" lent flavor and expressiveness at a small scale, but made it significantly harder to maintain consistent style across a wider code base. And many of the features that were later patched into Perl to address the complexity-control needs of bigger programs (objects, lexical scoping, "use strict", etc.) had a fragile, jerry-rigged feel about them. [http://www.linuxjournal.com/article/3882]
}}

Although taken out of context, Python programmers and authors[http://www.mindview.net/Books/Python/ThinkingInPython.html][http://www.linuxjournal.com/article/7721] are often fond of repeating this quote from [[Larry Wall]]:

{{cquote|
Perl is worse than Python because people wanted it worse. [http://xrl.us/mv4q]
}}

On the less technical side, TIOBE claims with its search engine polling in May 2006 that Perl's popularity is at its lowest since June, 2001.  <ref>[http://www.tiobe.com/tpci.htm TCPI Long Term Trends chart]</ref>

==Origins==

===General===
Larry Wall began work on Perl in 1987, and released version 1.0 to the comp.sources.misc [[newsgroup]] on [[December 18]], [[1987]]. The language expanded rapidly over the next few years. Perl 2, released in 1988, featured a better regular expression engine. Perl 3, released in 1989, added support for binary data.

Until 1991, the only documentation for Perl was a single (increasingly lengthy) [[Unix manual|man page]]. In 1991, ''[[Programming Perl]]'' (the Camel Book) was published, and became the ''de facto'' reference for the language. At the same time, the Perl version number was bumped to 4, not to mark a major change in the language, but to identify the version that was documented by the book.

Perl 4 went through a series of maintenance releases, culminating in Perl 4.036 in 1993. At that point, Larry Wall abandoned Perl 4 to begin work on Perl 5. Perl 4 remains at version 4.036 to this day.

Development of Perl 5 continued into 1994. The perl5-porters mailing list was established in May 1994 to coordinate work on porting Perl 5 to different platforms. It remains the primary forum for development, maintenance, and porting of Perl 5.

Perl 5 was released on [[October 17]], [[1994]]. It was a nearly complete rewrite of the interpreter, and added many new features to the language, including objects, references, packages, and modules. Importantly, modules provided a mechanism for extending the language without modifying the interpreter. This allowed the core interpreter to stabilize, even as it enabled ordinary Perl programmers to add new language features.

On [[October 26]], [[1995]], the [[Comprehensive Perl Archive Network]] (the CPAN) was established. The CPAN is a collection of web sites that archive and distribute Perl sources, binary distributions, documentation, scripts, and modules. Originally, each CPAN site had to be accessed through its own URL. Today, the single URL [http://www.cpan.org http://www.cpan.org] automatically redirects to a CPAN site.

As of 2006, Perl 5 is still being actively maintained. It now includes [[Unicode]] support. The latest stable release is Perl 5.8.8.

===Name===
Perl was originally named "Pearl", after "the pearl of great price" of [[Gospel of Matthew|Matthew]] 13:46. Larry Wall wanted to give the language a short name with positive connotations; he claims that he looked at (and rejected) every three- and four-letter word in the dictionary. He also considered naming it after his wife Gloria. Wall discovered before the language's official release that there was already a programming language named [[PEARL programming language|PEARL]] and changed the spelling of the name.

The name is normally capitalized (''Perl'') when referring to the language and uncapitalized (''perl'') when referring to the interpreter program itself since Unix-like filesystems are case sensitive. Before the release of the first edition of ''Programming Perl'' it was common to refer to the language as ''perl''; [[Randal L. Schwartz]], however, forced the uppercase language name in the book to make the name stand out better when typeset.  The case distinction was subsequently adopted by the community.

It is not appropriate to write "PERL", as it is not an [[acronym]]. The spelling of PERL in all caps is therefore used as a [[Shibboleth#Modern usage|shibboleth]] for detecting community outsiders.
However, several [[backronym]]s have been suggested, including the humorous ''Pathologically Eclectic Rubbish Lister''. The more serious ''Practical Extraction and Report Language'' has prevailed in many of today's manuals, including the official Perl man page. It is also consistent with the old name "Pearl": ''Practical Extraction And Report Language''.

===The camel symbol===

Perl is generally symbolized by a camel, which was a result of the picture chosen by publisher [[O'Reilly Media]] for the cover of ''Programming Perl'', which consequently acquired the name ''The Camel Book''. O'Reilly owns the symbol as a trademark, but claims to use their legal rights only to protect the ''"integrity and impact of that symbol"'' [http://perl.oreilly.com/usage/]. 
O'Reilly allows non-commercial use of the symbol, and provides [http://www.oreillynet.com/images/perl/sm_perl_id_bk_wt.gif Programming Republic of Perl] logos (see above) and [http://www.oreillynet.com/images/perl/powered_by_perl.gif Powered by Perl] buttons.

===Related links===
*[http://groups.google.com/groups?selm=4628%40sdcrdcf.UUCP First reference to "Perl" on Usenet]
*[http://dev.perl.org/perl1/ The origin of Perl] &ndash; "Stability. Speed. Simplicity. perl1 is here."
*[http://history.perl.org/PerlTimeline.html The Perl Timeline]

==Future==
{{main|Perl 6}}
At the 2000 [[Perl Conference]], [[Jon Orwant]] made a case for a major new language initiative. This led to a decision to begin work on a redesign of the language, to be called Perl 6. Proposals for new language features were solicited from the Perl community at large, and over 300 RFCs were submitted.

Larry Wall spent the next few years digesting the RFCs and synthesizing them into a coherent framework for Perl 6. He has presented his design for Perl 6 in a series of documents called [[Apocalypse (perl)|apocalypse]]s, which are numbered to correspond to chapters in ''[[Programming Perl]]'' ("The Camel Book").  The current, unfinalized specification of Perl 6 is encapsulated in design documents called Synopses, which are numbered to correspond to Apocalypses.

Perl 6 is not intended to be backward compatible, though there will be a compatibility mode.

In 2001, it was decided that Perl 6 would run on a cross-language [[virtual machine]] called [[Parrot virtual machine|Parrot]]. This will mean that other languages targeting the Parrot will gain native access to [[CPAN]] and will allow some level of cross-language development.

In 2005 [[Audrey Tang]] created the [[pugs]] project, an implementation of Perl 6 in [[Haskell_programming_language|Haskell]]. This was and continues to act as a test platform for the Perl 6 language (separate from the development of the actual implementation) allowing the language designers to explore. The pugs project resulted in an active Perl/Haskell cross-language community centred around the [[Freenode]] #perl6 irc channel.

A number of features in the Perl 6 language now show similarities with Haskell, and Perl 6 has been embraced by the Haskell community as a potential scripting language.

As of 2006 Perl 6, Parrot, and pugs are under active development.

==CPAN==
{{main|CPAN}}

[[CPAN]], the Comprehensive Perl Archive Network, is a collection of mirrored web sites that serve as a primary archive and distribution channel for Perl sources, distributions, documentation, scripts, and&mdash;especially&mdash;modules.  It is commonly browsed with the search engine [http://search.cpan.org/ http://search.cpan.org/].

There are currently over 10,000 modules available on the CPAN, contributed by over 5,000 authors. Modules are available for a wide variety of tasks, including advanced mathematics, database connectivity, and networking. Essentially everything on the CPAN is freely available; much of the software is licensed under either the [[Artistic License]], the [[GNU General Public License|GPL]], or both. Anyone can upload software to the CPAN via [http://pause.perl.org PAUSE], the Perl Authors Upload Server.

Modules on the CPAN can be downloaded and installed by hand. However, it is common for modules to depend on other modules, and following module dependencies by hand can be tedious. Both the [http://search.cpan.org/Perldoc?CPAN CPAN.pm] module (included in the Perl distribution) and the improved [http://search.cpan.org/Perldoc?CPANPLUS CPANPLUS] module offer command line installers that understand module dependencies; they can be configured to automatically download and install a module and, recursively, all modules that it requires.

Users without a C compiler are limited to pure Perl modules when downloading from the CPAN. ActiveState, a company that commercially supports Perl on Windows, provides packages of pre-compiled Perl modules, called PPMs, for use with their ActivePerl. Some pre-built modules are available as part of the MacPerl distribution for Mac Classic.

==Fun with Perl==
As with C, [[obfuscated code]] competitions are a popular feature of Perl culture. The annual [[Obfuscated Perl contest]] makes an arch virtue of Perl's [[syntax|syntactic]] flexibility. The following program prints the text "Just another Perl / Unix hacker", using 32 concurrent processes coordinated by pipes. A complete explanation is available on the [http://perl.plover.com/obfuscated/ author's Web site].

<!-- This code is used with permission. See Talk: page. -->
 <nowiki>
 @P=split//,".URRUU\c8R";@d=split//,"\nrekcah xinU / lreP rehtona tsuJ";sub p{
 @p{"r$p","u$p"}=(P,P);pipe"r$p","u$p";++$p;($q*=2)+=$f=!fork;map{$P=$P[$f^ord
 ($p{$_})&6];$p{$_}=/ ^$P/ix?$P:close$_}keys%p}p;p;p;p;p;map{$p{$_}=~/^[P.]/&&
 close$_}%p;wait until$?;map{/^r/&&<$_>}%p;$_=$d[$q];sleep rand(2)if/\S/;print</nowiki>

Similar to obfuscated code but with a different purpose, "Perl Poetry" is the practice of writing poems that can actually be compiled as legal (although generally non-sensical) Perl code. This hobby is more or less unique to Perl due to the large number of regular English words used in the language. New poems are regularly published in the [[Perl Monks]] site's [http://www.perlmonks.org/index.pl?node=Perl%20Poetry Perl Poetry] section.

Another popular pastime is "Perl Golf." As with [[Golf|the physical sport]], the goal is to reduce the number of strokes that it takes to complete a particular objective, but here "strokes" refers to keystrokes rather than swings of a golf club. A task, such as "scan an input string and return the longest [[palindrome]] that it contains", is proposed and participants try to outdo each other by writing solutions that require fewer and fewer characters of Perl source code.

Another tradition among Perl [[hacker]]s is writing JAPHs, which are short obfuscated programs that print out the phrase "[[Just another Perl hacker]],". The "canonical" JAPH includes the comma at the end, although this is often omitted, and many variants on the theme have been created (example: [http://www.perlmonks.org/index.pl?node_id=292135], which prints "Just Another Perl Pirate!").

One interesting Perl module is Lingua::Romana::Perligata. This module translates the source code of a script that uses it from Latin into Perl, allowing the programmer to write executable programs in Latin.

The Perl community has set aside the "[[Acme]]" namespace for modules that are fun or experimental in nature.  Some of the Acme modules are deliberately implemented in amusing ways.  Some examples:
*[http://search.cpan.org/dist/Acme-Bleach/ Acme::Bleach], one of the [http://use.perl.org/~acme/journal/200 first modules in the Acme:: namespace], allows the program's source code to be "whitened" (i.e., all characters replaced with whitespace) and yet still work.  This is an example of a [[source filter]].  There are also a number of other source filters in the Acme namespace.
*[http://search.cpan.org/dist/Acme-Hello/ Acme::Hello] simplifies the process of writing a "Hello, World!" program
*[http://search.cpan.org/dist/Acme-Currency/ Acme::Currency] allows you to change the "$" prefix for scalar variables to some other character
*[http://search.cpan.org/dist/Acme-ProgressBar/ Acme::ProgressBar] is a horribly inefficient way to indicate progress for a task
*[http://search.cpan.org/dist/Acme-VerySign/ Acme::VerySign] satirizes the widely-criticized [[VeriSign]] [[Site Finder]] service
*[http://search.cpan.org/~dconway/Acme-Don-t-1.01/t.pm Acme::Don't] implements the logical opposite of the <tt>do</tt> keyword&mdash;<tt>don't</tt>, which does not execute the provided block.

===Related links===
*[http://wikibooks.org/wiki/Programming:Perl_humour Perl humour on Wikibooks]
*[http://www.cmpe.boun.edu.tr/~kosar/other/lwall.html Larry Wall quotes]
*[http://search.cpan.org/perldoc?Lingua::Romana::Perligata Lingua::Romana::Perligata - Write Perl in Latin!]
*[http://www.perlmonks.org/index.pl?node_id=253797 A tutorial on Perligata]
*[http://www.softpanorama.org/Bulletin/Humor/humor092.html Perl Purity Test]

==See also==
{{portalpar|Free software}}
*[[Perl 6]]
*[[CPAN]]
*[[The Perl Foundation]]
*[[Larry Wall]]
*[[Perl Object Environment|POE]]- the Perl Object Environment
*[[Perl Data Language|PDL]]- the Perl Data Language
*[[Just another Perl hacker]]
*[[Obfuscated Perl contest]]
*[[Perl Mongers]]
*[[Comparison of programming languages]]

==Notes==
<references />

===Books===
{{book}}

*[[Programming Perl]] (the ''Camel book''), ISBN 0-596-00027-8
*[[Learning Perl]], Fourth Edition (the ''Llama book''), ISBN 0-596-10105-8
*[[Perl Cookbook]], ISBN 0-596-00313-7
(Also see <i>Books</i> under <i>External links</i>, below.)

===Perl man pages===
The Perl man pages are included in the Perl [http://www.cpan.org/src/stable.tar.gz source distribution]. They are available on the web from http://perldoc.perl.org/. Some good starting points are:

*[http://perldoc.perl.org/perlintro.html perlintro]- a brief introduction and overview of Perl
*[http://perldoc.perl.org/perlsyn.html perlsyn]- Perl syntax
*[http://perldoc.perl.org/perlre.html perlre]- Perl regular expressions
*[http://perldoc.perl.org/perldelta.html perl5''xy''delta]- what is new for perl v5.''x''.''y''

===Web pages===
*[http://history.perl.org/PerlTimeline.html The Timeline of Perl and its Culture v3.0_0505]
*[http://www.nntp.perl.org/group/perl.perl6.meta/424 Transcription of Larry's talk]

==External links==
===Major Resources===
*[http://www.perl.org/ Perl.org] &ndash; The Perl Directory
*[http://www.perl.com/ Perl.com] &ndash; Perl on [[O'Reilly Network]]
*[http://perldoc.perl.org/ Perldoc at Perl.org] &ndash; online Perl documentation

===Development===
*[http://dev.perl.org/perl5/ Perl 5 development]
*[http://dev.perl.org/perl6/ Perl 6 development]
*[http://www.parrotcode.org/ Parrot virtual machine]
*[http://www.poniecode.org/ Project Ponie] &ndash; Perl 5 running on top of Parrot
*[http://www.pugscode.org/ Pugs] &ndash; Perl 6 running on top of Haskell

===Books===
*[http://books.perl.org/ books.perl.org] - Perl books and book reviews 
*[http://www.techbooksforfree.com/perlpython.shtml A collection of other free Perl books]
*[http://www.computer-books.us/perl.php Computer-Books.us] - A collection of Perl books available for free download.
(Also see <i>Books</i> under <i>References</i>, above.)

===Support===
*[http://www.pm.org/ Perl Mongers] &ndash; local user groups in cities worldwide
*[http://www.perlmonks.org/ PerlMonks] &ndash; [[The Perl Foundation]]-affiliated discussion forum and resources
*[http://use.perl.org/ use Perl;] &ndash; Perl news and community discussion

===Distributions===
*[http://www.cpan.org/ The CPAN] &ndash; Comprehensive Perl Archive Network, Perl source distribution
*[http://www.activestate.com/ ActiveState ActivePerl] &ndash; Perl for [[Microsoft Windows]] and many other platforms
*[http://www.indigostar.com/indigoperl.htm IndigoPerl] &ndash; another distribution of Perl for Microsoft Windows
*[http://cygwin.com/ Cygwin] also distributes Perl on Windows

===Miscellaneous===
*[http://dmoz.org/Computers/Programming/Languages/Perl/ Perl related websites] in the [[Open Directory Project]]
*[http://www.theperlreview.com The Perl Review] - print magazine about Perl
*[http://www.tpj.com/ The Perl Journal] online only magazine about Perl
*[http://perlcast.com Perlcast] - Perl Podcast
*[http://www.perl.com/pub/a/2000/01/10PerlMyths.html Ten Perl Myths] - O'Reilly
*[http://fortunes.quotationsbook.com/fortunes/collection/52/PERL Perl fortunes collected from Larry Wall message identifiers]
*Google Video: Beginning Perl for Nonprogrammers [http://video.google.com/videoplay?docid=8352356480985227225 Part 1] [http://video.google.com/videoplay?docid=3416163466891342908 Part 2]
*[http://bioperl.org BioPerl] - a large package of Perl modules used for [[bioinformatics]]
*[http://shootout.alioth.debian.org/ The Programming Language Shootout]

{{Major programming languages small}}

[[Category:Perl|*]]
[[Category:Curly bracket programming languages]]
[[Category:Dynamically-typed programming languages]]
[[Category:Free programming languages]]
[[Category:.NET programming languages]]
[[Category:Procedural programming languages]]
[[Category:Programming languages]]
[[Category:Scripting languages]]
[[Category:Text-oriented programming languages]]
[[Category:Unix software]]

<!-- Interwiki finder http://vs.aka-online.de/globalwpsearch/ -->
[[bs:Perl]] 
[[bg:Perl]]
[[ca:Perl]]
[[cs:Perl]]
[[cy:Perl]]
[[da:Perl]]
[[de:Perl]]
[[eo:Perl (programlingvo)]]
[[es:Perl]]
[[et:Perl]]
[[fa:پرل]]
[[fi:Perl]]
[[fr:Perl (langage)]]
[[gl:Perl]] 
[[he:Perl]]
[[hr:Perl]]
[[hu:Perl programozási nyelv]]
[[id:Perl]]
[[it:Perl]]
[[ja:Perl]]
[[ka:პერლი]]
[[ko:펄]]
[[ku:Perl]] 
[[la:Perl]]
[[lb:Perl (Programméiersprooch)]]
[[lt:Perl]]
[[nl:Perl (programmeertaal)]]
[[nn:Perl]] 
[[no:Perl]]
[[pl:Perl]]
[[pt:Perl]]
[[ru:Перл (язык программирования)]]
[[sk:Perl]]
[[sl:Perl]]
[[sr:Perl]]
[[sv:Perl]]
[[th:ภาษาเพิร์ล]]
[[tr:Perl]]
[[zh:Perl]]
<!-- END OF PAGE -->