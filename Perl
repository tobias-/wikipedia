'''Perl''', also '''Practical Extraction and Report Language''' (a [[backronym]], see [[#Name|below]]), is an interpreted procedural [[programming language]] designed by [[Larry Wall]]. Perl borrows features from [[C programming language|C]], [[Unix shell|shell]] scripting ([[Bourne shell|sh]]), [[awk]], [[sed]], and (to a lesser extent) many other programming languages.

== Overview ==

{{TOCleft}}

[[Image:Programming-republic-of-perl.gif|right|framed|Programming Republic of Perl logo]]

The perlintro(1) [[man page]] states:

"Perl is a general-purpose programming language originally developed for text manipulation and now used for a wide range of tasks including system administration, web development, network programming, GUI development, and more.

The language is intended to be practical (easy to use, efficient, complete) rather than beautiful (tiny, elegant, minimal). Its major features are that it's easy to use, supports both procedural and [[Object-oriented programming|object-oriented]] (OO) programming, has powerful built-in support for text processing, and has one of the world's most impressive collections of third-party modules."

=== Language features ===

The overall structure of Perl derives broadly from [[C programming language|C]]. Perl is a procedural programming language, with variables, expressions, assignment statements, brace-delimited code blocks, control structures, and subroutines.

Perl also takes features from [[Operating system shell|shell]] programming. Perl programs are [[Interpreter (computing)|interpreted]]. All variables are marked with leading [[Sigil_(computer_programming)|sigil]]s. Sigils unambiguously identify variable names, thus allowing Perl to have a rich syntax. Importantly, sigils allow variables to be interpolated directly into strings. Like the Unix shells, Perl has many built-in functions for common tasks, like sorting, and for accessing system facilities.

Perl takes [[associative array]]s (known as 'hashes' in newer versions of perl) from [[awk]] and [[regular expressions]] from [[sed]]. These simplify and facilitate all manner of parsing, text handling, and data management tasks.

In Perl 5, features were added that support complex data structures, first-class functions (i.e. [[Closure (computer science)|closures]] as values), and an object-oriented programming model. These include [[reference (computer science)|reference]]s, packages, and class-based method dispatch. Perl 5 also saw the introduction of lexically scoped variables, which make it easier to write robust code, and modules, which make it practical to write and distribute libraries of Perl code.

All versions of Perl do automatic data typing and memory management. The interpreter knows the type and storage requirements of every data object in the program; it allocates and frees storage for them as necessary. Legal type conversions are done automatically at run time; illegal type conversions are fatal errors.

=== Applications ===

Perl has many applications. It has been used since the early days of the web to write [[Common Gateway Interface|CGI]] scripts, and is a component of the popular [[LAMP (software bundle)|LAMP]] ([[Linux]] / [[Apache HTTP Server|Apache]] / [[MySQL]] / (Perl / [[PHP]] / [[Python programming language|Python]])) platform for web development. Perl has been called "the glue that holds the web together". <!-- a source for this quote would be nice --> Large projects written in Perl include [[Slashdot]] and early implementations of [[PHP]] [http://www.php.net/history] and [[UseModWiki]], the [[wiki]] software used in [[Wikipedia]] until [[2002]].

Perl is often used as a "glue language", tying together systems and interfaces that were not specifically designed to interoperate. Systems administrators use Perl as an all-purpose tool; short Perl programs can be entered and run on a single command line.

Perl is widely used in [[finance]] and [[bioinformatics]], where it is valued for rapid application development, ability to handle large data sets, and the availability of many standard and 3rd-party modules.

=== Implementation ===

Perl is implemented as a core interpreter, written in C, together with a large collection of modules, written in Perl and C. The source distribution is, [[as of 2005]], 12 [[megabyte|MB]] when packaged in a [[Tar (file format)|tar file]] and [[data compression|compressed]]. The interpreter is 150,000 lines of C code and compiles to a 1 MB executable on typical machine architectures. Alternately, the interpreter can be compiled to a link library and embedded in other programs. There are nearly 500 modules in the distribution, comprising 200,000 lines of Perl and an additional 350,000 lines of C code. Much of the C code in the modules consists of character encoding tables.

The interpreter has an object-oriented architecture. All the elements of the Perl language&mdash;scalars, arrays, hashes, coderefs, file handles&mdash;are represented in the interpreter by C structs. Operations on these structs are defined by a large collection of macros, typedefs and functions; these constitute the Perl C API. The Perl API can be bewildering to the uninitiated, but its entry points follow a consistent naming scheme, which provides guidance to those who use it.

The execution of a Perl program divides broadly into two phases: compile-time and run-time. At compile time, the interpreter parses the program text into a syntax tree. At run time, it executes the program by walking the tree. The text is parsed only once, and the syntax tree is subject to optimization before it is executed, so the execution phase is relatively efficient. Compile-time optimizations on the syntax tree include [[constant folding]], context propagation, and [[peephole optimizer|peephole optimization]].

Perl has a context-free [[formal grammar|grammar]]; however, it cannot be parsed by a straight [[Yacc]]/[[Lex]] parser/lexer combination. Instead, it implements its own lexer, which coordinates with a modified [[GNU bison]] parser to resolve ambiguities in the language. It is said that "only perl can parse Perl", meaning that only the [[perl interpreter]] can parse the Perl language. The truth of this is attested by the imperfections of other programs that undertake to parse Perl, such as source code analyzers and auto-indenters.

Maintenance of the Perl interpreter has become increasingly difficult over the years. The code base has been in continuous development since 1994. The code has been optimized for performance at the expense of simplicity, clarity, and strong internal interfaces. New features have been added, yet virtually complete backwards compatibility with earlier versions is maintained. The size and complexity of the interpreter is a barrier to developers who wish to work on it.

Perl is distributed with some 90,000 functional tests. These run as part of the normal build process, and extensively exercise the interpreter and its core modules. Perl developers rely on the functional tests to ensure that changes to the interpreter do not introduce bugs; conversely, Perl users who see the interpreter pass its functional tests on their system can have a high degree of confidence that it is working properly.

There is no written specification or standard for the Perl language, and no plans to create one for the current version of Perl. There has only ever been one implementation of the interpreter. That interpreter, together with its functional tests, stands as a de facto specification of the language.

=== Availability ===

Perl is [[free software movement|free software]], and may be distributed under either the [[Artistic License]] or the [[GNU General Public License]]. It is available for most [[operating system|operating systems]]. It is particularly prevalent on [[Unix]] and [[Unix-like]] systems (such as [[Linux]], [[FreeBSD]], and [[Mac OS X]]), and is growing in popularity on [[Microsoft Windows]] systems.

Perl has been ported to over a hundred different platforms. Perl can, with only six reported exceptions, be compiled from [[source code|source]] on all Unix-like, [[POSIX]]-compliant or otherwise Unix-compatible platforms, including [[AmigaOS]], [[BeOS]], [[Cygwin]], and [[Mac OS X]]. It can be compiled from source on [[Microsoft Windows|Windows]]; however, many Windows installations lack a C compiler, so Windows users typically install a binary distribution, such as  [http://www.activestate.com/Products/ActivePerl/ ActivePerl] or [http://www.indigostar.com/indigoperl.htm IndigoPerl]. A custom port, [http://www.ptf.com/macperl/ MacPerl], is also available for [[Mac OS|Mac OS Classic]]. [http://www.perl.com/CPAN/ports/]

== Language structure ==

=== Example Program ===

In Perl, the canonical "[[hello world]]" program is:

 <nowiki>#</nowiki>!/usr/bin/perl -w
 print "Hello, world!\n";

The first line is the [[shebang]], which indicates the path to the location of the interpreter in the file system.  The second line prints the string 'Hello, world!' and a [[newline]] (like a person pressing 'Return' or 'Enter').

The [[shebang]] shown in the above example is typical of a [[unix-like]] system. On [[Windows]] systems, assuming that the perl executable is in the [[path (computing)|command path]], one could use the following shebang line:
 <nowiki>#</nowiki>!perl
The shebang is the most common, but not the only way of ensuring that the perl interpreter runs the program.  Another way to associate the file with the interpreter in Windows would be to associate .pl file types with the Perl interpreter, which is automatically done in some installations of Perl.

Here is a one-line, throw-away Perl program that does [[ROT13]] encoding/decoding.
It is entered and run directly on the command line:

 perl -pe 'tr/A-Za-z/N-ZA-Mn-za-m/' < input_file > output_file

=== Data types ===

Perl has three fundamental [[data type]]s: [[scalar]]s, [[array|lists]], and [[hash table|hashes]]:
*A scalar is a single value (i.e. a [[number]], [[String (computer science)|string]] or [[Reference (computer science)|reference]])
*A list is an ordered collection of scalars (a variable that holds a list is called an ''array'')
*A hash, or [[associative array]], is a map from strings to scalars; the strings are called ''keys'' and the scalars are called ''values''.

All variables are marked by a leading [[Sigil (computer programming)|sigil]],
which identifies the data type.
The same name may be used for variables of different types,
without conflict.

  $foo   # a scalar
  @foo   # a list
  %foo   # a hash

Numbers are written in the usual way;
strings are enclosed by quotes of various kinds.

  $n     = 42;
  $name  = "joe";
  $color = 'red';

A list may be written by listing its elements, 
separated by commas,
and enclosed by parentheses where required by operator precedence.

  @scores = (32, 45, 16, 5);

A hash may be initialized from a list of key/value pairs.

  %favorite = (joe => 'red',
               sam => 'blue');

Individual elements of a list are accessed by providing a numerical
index, in square brackets. Individual values in a hash are
accessed by providing the corresponding key, in curly braces. The
<tt>$</tt> sigil identifies the accessed element as a scalar.

  $scores[2]      # an element of @scores
  $favorite{joe}  # a value in %favorite

The number of elements in an array can be obtained by evalulating the
array in scalar context.

  $count = @friends;

There are a few functions that operate on entire hashes.

  @names     = keys   %address;
  @addresses = values %address;

=== Control structures ===
{{main|Perl control structures}}

Perl has several kinds of control structures. It has block-oriented control structures, similar to those in the C and [[Java programming language|Java]] programming languages. Conditions are surrounded by parentheses, and controlled blocks are surrounded by braces:

 ''label'' while ( ''cond'' ) { ... }
 ''label'' while ( ''cond'' ) { ... } continue { ... }
 ''label'' for ( ''init-expr'' ; ''cond-expr'' ; ''incr-expr'' ) { ... }
 ''label'' foreach ''var'' ( ''list'' ) { ... }
 ''label'' foreach ''var'' ( ''list'' ) { ... } continue { ... }
 if ( ''cond'' ) { ... }
 if ( ''cond'' ) { ... } else { ... } 
 if ( ''cond'' ) { ... } elsif ( ''cond'' ) { ... } else { ... } 

Where only a single statement is being controlled, statement modifiers provide a lighter syntax:

 ''statement'' if      ''cond'' ;
 ''statement'' unless  ''cond'' ;
 ''statement'' while   ''cond'' ;
 ''statement'' until   ''cond'' ;
 ''statement'' foreach ''list'' ;

Short-circuit logical operators are commonly used to effect control flow at the expression level:

 ''expr'' and ''expr''
 ''expr'' or  ''expr''

Perl also has two implicit looping constructs:

  ''results'' = grep { ... } ''list''
  ''results'' = map  { ... } ''list''

<tt>grep</tt> returns all elements of ''list'' for which the controlled block evaluates to true.
<tt>map</tt> evaluates the controlled block for each element of ''list'' and returns a list of the resulting values. These constructs enable a simple functional programming style.

There is no switch (multi-way branch) statement in Perl 5. The Perl documentation describes a half-dozen ways to achieve the same effect by using other control structures, none entirely satisfactory.
A very general and flexible switch statement has been designed for [[Perl 6]].  The <tt>Switch</tt> module makes most of the functionality of the Perl 6 switch available to Perl 5 programs.

Perl includes a <tt>goto ''label''</tt> statement, but it is virtually never used. It is considered poor coding practise, the implementation is slow, and situations where a <tt>goto</tt> is called for in other languages either tend not to occur in Perl or are better handled with other control structures, such as labeled loops.

There is also a <tt>goto &''sub''</tt> statement that performs a [[tail call]].
It terminates the current subroutine and immediately calls the specified <tt>''sub''</tt>.  
Use of this form is culturally accepted but unusual because it is rarely needed.

=== Subroutines ===

[[Subroutine]]s are defined with the <tt>sub</tt> [[keyword]],
and invoked simply by naming them.
Subroutine definitions may appear anywhere in the program.
Parentheses are required for calls that precede the definition.

 foo();
 sub foo { ... }
 foo;

A list of arguments may be provided after the subroutine name.
Arguments may be scalars, lists, or hashes.

 foo $a, @b, %c;

The parameters to a subroutine need not be declared as to either number or type;
in fact, they may vary from call to call.
Arrays are expanded to their elements, 
hashes are expanded to a list of key/value pairs,
and the whole lot is passed into the subroutine as one undifferentiated list of scalars.

Whatever arguments are passed are available to the subroutine in the special array <tt>@_</tt>.
The elements of <tt>@_</tt> are aliased to the actual arguments;
changing an element of <tt>@_</tt> changes the corresponding argument.

Elements of <tt>@_</tt> may be accessed by subscripting it in the usual way.

 $_[0], $_[1]

However, the resulting code can be difficult to read,
and the parameters have pass-by-reference semantics, 
which may be undesirable.

One common idiom is to assign <tt>@_</tt> to a list of named variables.

 ($a, $b, $c) = @_;

This affects both mnemonic parameter names and pass-by-value sematics.
Another idiom is to shift parameters off of <tt>@_</tt>.
This is especially common when the subroutine takes only one argument.

 $a = shift;

Subroutines may return values.

 return 42, $x, @y, %z;

If the subroutine does not exit via a <tt>return</tt> statement,
then it returns the last expression evaluated within the subroutine body.
Arrays and hashes in the return value are expanded to lists of scalars, 
just as they are for arguments.

The returned expression is evaluated in the calling context of the subroutine;
this can surprise the unwary.

 sub list  {      (4, 5, 6)     }
 sub array { @a = (4, 5, 6); @a }
 
 $a = list;   # returns 6 - last element of list
 $a = array;  # returns 3 - number of elements in list
 @a = list;   # returns (4, 5, 6)
 @a = array;  # returns (4, 5, 6)

The <tt>wantarray</tt> keyword can detect the type of context the function is called in.

 sub either { wantarray ? (1, 2) : "Oranges" }
 
 $a = either;    # returns "Oranges"
 @a = either;    # returns (1, 2)

=== Regular expressions ===

The Perl language includes a specialized syntax for writing [[regular expression]]s (REs), and the interpreter contains an engine for matching strings to regular expressions. The regular expression engine uses a [[backtracking]] algorithm, extending its capabilities from simple pattern matching to string capture and substitution.

The Perl regular expression syntax was originally taken from Unix Version 8 regular expressions. However, it diverged before the first release of Perl, and has since grown to include many more features.

The <tt>m//</tt> (match) operator introduces a regular expression match. (The leading <tt>m</tt> may be omitted for brevity.) In the simplest case, an expression like

  $x =~ m/abc/

evaluates to true [[iff]] the string <tt>$x</tt> matches the regular expression <tt>abc</tt>. Capturing a matched string can be done by surrounding part of the regular expression with parentheses and evaluating it in list context. This is more interesting for patterns that can match multiple strings:

  ($matched) = $x =~ m/a(.)c/;   # capture the character between 'a' and 'c'

The <tt>s///</tt> (substitute) operator specifies a search and replace operation:

  $x =~ s/abc/aBc/;   # upcase the b

Perl regular expressions can take ''modifiers''. These are single-letter suffixes that modify the meaning of the expression:

  $x =~ m/abc/i;      # case-insensitive pattern match
  $x =~ s/abc/aBc/g;  # global search and replace

Regular expressions can be dense and cryptic. This is because regular expression syntax is extremely compact, generally using single characters or character pairs to represent its operations. Perl provides relief from the problem with the <tt>/x</tt> modifer, which allows programmers to place whitespace and comments ''inside'' regular expressions:

  $x =~ m/a     # match 'a'
          .     # match any character
          c     # match 'c'
           /x;

One common use of regular expressions is to specify delimiters for the <tt>split</tt> operator:

  @words = split m/,/, $line;   # divide $line into comma-separated values

The <tt>split</tt> operator complements string capture. String capture returns strings that match the regular expression, <tt>split</tt> returns strings that don't match the RE.

''See also [[Perl regular expression examples]].''

=== Database interfaces ===

Perl is widely favored for database applications.
Its text handling facilities are good for generating SQL queries;
arrays, hashes and automatic memory management make it easy to collect and process the returned data.

In early versions of Perl, database interfaces were created by relinking the interpreter with a client-side database library. This was somewhat clumsy; a particular problem was that the resulting <tt>perl</tt> executable was restricted to using just the one database interface that it was linked to. Also, relinking the interpreter was sufficiently difficult that it was only done for a few of the most important and widely used databases.

In Perl 5, database interfaces are implemented by [[Perl DBI]] modules. The <tt>DBI</tt> (Database Interface) module presents a single, database-independent interface to Perl applications, while the <tt>DBD::</tt> (Database Driver) modules handle the details of accessing some 50 different databases. There are <tt>DBD::</tt> drivers for most [[ANSI]] [[SQL]] databases.

== Language design ==

The design of Perl can be understood as a response to three broad trends in the computer industry: falling hardware costs, rising labor costs, and advancing compiler technology. Many earlier computer languages, such as [[Fortran]] and C, were designed to make efficient use of expensive computer hardware. In contrast, Perl  is designed to make efficient use of expensive computer programmers.

Perl has many features that ease the programmer's task at the expense of greater CPU and memory requirements. These include automatic memory management; [[dynamic typing]]; strings, lists, and hashes; regular expressions, and interpreted execution.

Larry Wall was trained as a linguist, and the design of Perl is very much informed by linguistic principles. Examples include [[Huffman coding]] (common constructions should be short), good end-weighting (the important information should come first), and a large collection of language primitives. Perl favors language constructs that are natural for humans to read and write, even where they complicate the Perl interpreter.

Perl has features that support a variety of programming paradigms, such as [[procedural programming|procedural]], [[functional programming|functional]], and object-oriented. At the same time, Perl does not enforce any particular paradigm, or even require the programmer to choose among them. 

There is a broad practical bent to both the Perl language and the community and culture that surround it. The preface to [[Programming Perl]] begins, "Perl is a language for getting your job done". One consequence of this is that Perl is not a tidy language. It includes features if people use them, tolerates exceptions to its rules, and employs heuristics to resolve syntactical ambiguities.
Discussing the variant behaviour of built-in functions in list and scalar context, the perlfunc(1) man page says,
<blockquote>
In general, they do what you want, unless you want consistency.
</blockquote>

Perl has several mottos that convey aspects of its design and use. One is ''There's more than one way to do it'' (TMTOWTDI - usually pronounced 'Tim Toady'). Another is ''Perl: the Swiss Army Chainsaw of Programming Languages''. A stated design goal of Perl is to make easy tasks easy and difficult tasks possible.  Perl has also been called ''The Duct Tape of the Internet''.

== Opinion ==

Perl engenders strong feelings among both its proponents and its
detractors.

=== Pro ===

Programmers who like Perl typically cite its power, expressiveness,
and ease of use. Perl provides infrastructure for many common
programming tasks, such as string and list processing. Other tasks,
such as memory management, are handled automatically and
transparently. Programmers coming from other languages to Perl often
find that whole classes of problems that they have struggled with in the
past just don't arise in Perl. As Larry Wall put it,
<blockquote>
  What is the sound of Perl? Is it not the sound of a wall that people
  have stopped banging their heads against?
</blockquote>

Besides its practical benefits, many programmers simply seem to enjoy working in Perl. Early issues of [http://www.tpj.com The Perl Journal] had a page titled "What is Perl?" that concluded

<blockquote>
  '''Perl is fun.''' In these days of self-serving jargon, conflicting and unpredictable
  standards, and proprietary systems that discourage peeking under the
  hood, people have forgotten that programming is supposed to be
  fun. I don't mean the satisfaction of seeing our well-tuned programs
  do our bidding, but the literary act of creative writing that yields
  those programs. With Perl, the journey is as enjoyable as the destination ...
</blockquote>

Whatever the reasons, there is clearly a broad community of people who
are passionate about Perl, as evidenced by the thousands of modules
that have been contributed to CPAN, and the hundreds of design proposals that were
submitted as RFCs for Perl 6.

=== Con ===

One common complaint against Perl is its syntax; in particular, its prodigious use of punctuation which some people claim make it look like "line noise". In [http://www.paulgraham.com/pypar.html The Python Paradox], [[Paul Graham]] both acknowledges and responds to this:

<blockquote>
At the mention of ugly source code, people will of course think of
Perl. But the superficial ugliness of Perl is not the sort I mean.
Real ugliness is not harsh-looking syntax, but having to build
programs out of the wrong concepts.
</blockquote>

Another criticism is that Perl is excessively complex and compact, and that it leads to "write-only" code, that is, to code that is virtually impossible to understand after it has been written. It is, of course, possible to write obscure code in any language, but Perl has perhaps more than the usual share of terse, complex and arcane language constructs to exacerbate the problem. Perl supports many such features for backwards compatibility, and for use where maintainability is expressly not a concern, such as programs that are entered and run directly on the command line.

The freewheeling language style that delights some Perl programmers concerns others. For example, as of Perl 5, Perl's native implementation of object-oriented programming features has weak enforcement of data security. Access to private data is restricted only by convention, not the language itself. An object created in one place may easily be modified in another; there may not be any single place where its state is definitively established. Although not native to the language, a stronger approach to object security can however be simulated through proper development practices and the use of infrastructure classes available on the [[CPAN]].

On a different level, one of the early Unix engineers from Bell Labs has expressed surprise that anyone could write important applications in a language for which there is no published specification. <!-- This was in an interview, and I can't remember who or where. We need to find out who and cite the interview. -->

Some worry that Perl is licensed under terms that are incompatible with commercial use. However, Perl is used successfully by many businesses.

Although its performance is adequate for many applications, Perl is not a good language for [[CPU bound|processor-bound]] tasks. A rule of thumb is that if resources to run Java are available, then Perl can certainly be used<!-- more quantitative analysis might be appropriate here... -->.

== History ==

Larry Wall began work on Perl in [[1987]], and released version 1.0 to the comp.sources.misc newsgroup on [[December 18]], [[1987]]. The language expanded rapidly over the next few years. Perl 2, released in [[1988]], featured a better regular expression engine. Perl 3, released in [[1989]], added support for binary data.

Until [[1991]], the only documentation for Perl was a single (increasingly lengthy) man page. In 1991, [[Programming Perl]] (the Camel Book) was published, and became the de facto reference for the language. At the same time, the Perl version number was bumped to 4, not to mark a major change in the language, but to identify the version that was documented by the book.

Perl 4 went through a series of maintenance releases, culminating in Perl 4.036 in [[1993]]. At that point, Larry Wall abandoned Perl 4 to begin work on Perl 5. Perl 4 remains at version 4.036 to this day.

Development of Perl 5 continued into [[1994]]. The perl5-porters mailing list was established in [[May]] [[1994]] to coordinate work on porting Perl 5 to different platforms. It remains the primary forum for development, maintenance, and porting of Perl 5.

Perl 5 was released on [[October 17]], [[1994]]. It was a nearly complete rewrite of the interpreter, and added many new features to the language, including objects, references, packages, and modules. Importantly, modules provided a mechanism for extending the language without modifying the interpreter. This allowed the core interpreter to stablize, even as it enabled ordinary Perl programmers to add new language features.

On [[October 26]], [[1995]], the [[Comprehensive Perl Archive Network]] (CPAN) was established. CPAN is a collection of web sites that archive and distribute Perl sources, binary distributions, documentation, scripts, and modules. Originally, each CPAN site had to be accessed through its own URL; today, the single URL http://www.cpan.org automatically redirects to a CPAN site.

As of [[2005]], Perl 5 is still being actively maintained. It now includes [[Unicode]] support. The latest production release is Perl 5.8.7.

At the [[2000]] [[Perl Conference]] [[Jon Orwant]] made a case for a major new language initiative. This led to a decision to begin work on a redesign of the language, to be called [[Perl 6]]. Proposals for new language features were solicited from the Perl community at large, and over 300 RFCs were submitted.

Larry Wall spent the next few years digesting the RFCs and synthesizing them into a coherent framework for Perl 6. He has presented his design for Perl 6 in a series of documents called [[apocalypse (perl)|apocalypse]]s.

In [[2001]], it was decided that Perl 6 would run on a cross-language [[virtual machine]] called [[Parrot virtual machine|Parrot]]. As of 2005, both Perl 6 and Parrot are under active development.

== CPAN ==
{{main|CPAN}}

[[CPAN]], the Comprehensive Perl Archive Network, is a collection of mirrored web sites that serve as a primary archive and distribution channel for Perl sources, distributions, documentation, scripts, and&mdash;especially&mdash;modules.  It is commonly browsed with the search engine http://search.cpan.org/.

There are currently over 7,000 modules available on CPAN, contributed by nearly 4,000 authors. Modules are available for a wide variety of tasks, including advanced mathematics, database connectivity, and networking. Essentially everything on CPAN is freely available; much of the software is licensed under either the [[Artistic License]], the [[GPL]], or both. Anyone can upload software to CPAN via [http://pause.perl.org PAUSE], the Perl Authors Upload Server.

Modules on CPAN can be downloaded and installed by hand. However, it is common for modules to depend on other modules, and following module dependencies by hand can be tedious. Both the [http://search.cpan.org/Perldoc?CPAN CPAN.pm] module (included in the Perl distribution) and the improved [http://search.cpan.org/Perldoc?CPANPLUS CPANPLUS] module offers command lines installers that understand module dependencies; They can be configured to automatically download and install a module and, recursively, all modules that it requires.

==Name==
Perl was originally named "Pearl", after "the pearl of great price" of [[Gospel of Matthew|Matthew]] 13:46. Larry Wall wanted to give the language a short name with positive connotations and claims he looked at (and rejected) every three- and four-letter word in the dictionary. He even thought of naming it after his wife Gloria. Wall discovered before the language's official release that there was already a programming language named [[PEARL programming language|PEARL]] and changed the spelling of the name.

The name is normally capitalized (''Perl'') when referring to the language and uncapitalized (''perl'') when referring to the interpreter program itself since Unix-like filesystems are case sensitive. (There is a saying in the Perl community: "Only perl can parse Perl.") (Before the release of the first edition of [[Programming Perl]] it was common to refer to the language as ''perl''; [[Randal L. Schwartz]], however, forced the uppercase language name in the book to make the name stand out better when typeset.  The case distinction was subsequently adopted by the community.) It is not appropriate to write "PERL" as it is not really an [[acronym]], although several [[backronym]]s have been suggested, including the humorous ''Pathologically Eclectic Rubbish Lister''.  The spelling of ''PERL'' in all caps is therefore used as a [[Shibboleth#Modern_usage|shibboleth]] for detecting community outsiders.
''Practical Extraction and Report Language'' has prevailed in many of today's manuals, including the official Perl [[man page]]. It is also consistent with the old name "Pearl": ''Practical Extraction And Report Language''.

===The Camel Symbol===
Perl is generally symbolized by a camel, which was a result of the picture of camel book publishers [[O'Reilly Media]] chose as the cover picture of ''Programming Perl'', which consequently acquired the name ''The Camel Book''. O'Reilly owns the symbol as a trademark, but claims to use their legal rights only as a measure of protecting the ''"integrity and impact of that symbol"'' [http://perl.oreilly.com/usage/]. Use of the symbol for non-commercial purposes is allowed and a ''Programming Republic of Perl'' logo (see above) is provided for this purpose.

== Fun with Perl ==
As with C, [[obfuscated code]] competitions are a popular feature of Perl culture. The annual [[Obfuscated Perl contest]] makes an arch virtue of Perl's [[syntax|syntactic]] flexibility. The following program prints the text "Just another Perl / Unix hacker", using 32 concurrent processes coordinated by pipes. A complete explanation is available on the [http://perl.plover.com/obfuscated/ author's Web site].

<!-- This code is used with permission. See Talk: page. -->
 <nowiki>
 @P=split//,".URRUU\c8R";@d=split//,"\nrekcah xinU / lreP rehtona tsuJ";sub p{
 @p{"r$p","u$p"}=(P,P);pipe"r$p","u$p";++$p;($q*=2)+=$f=!fork;map{$P=$P[$f^ord
 ($p{$_})&6];$p{$_}=/ ^$P/ix?$P:close$_}keys%p}p;p;p;p;p;map{$p{$_}=~/^[P.]/&&
 close$_}%p;wait until$?;map{/^r/&&<$_>}%p;$_=$d[$q];sleep rand(2)if/\S/;print</nowiki>

Similar to obfuscated code but with a different purpose, Perl [[Poetry]] is the practice of writing poems that can actually be compiled by perl. This hobby is more or less unique to Perl due to the large number of regular English words used in the language. New poems are regularly published in the [[Perl Monks]] site's [http://www.perlmonks.org/index.pl?node=Perl%20Poetry Perl Poetry] section.

Another popular pastime is Perl golf. As with [[golf|the physical sport]] the goal is to reduce the number of strokes that it takes to complete a particular objective, but here "strokes" refers to keystrokes rather than swings of a golf club. A task, such as "scan an input string and return the longest [[palindrome]] that it contains", is proposed and participants try to outdo each other by writing solutions that require fewer and fewer characters of Perl source code.

Another tradition among Perl [[hacker]]s is writing JAPHs, which are short obfuscated programs that print out the phrase "[[Just another Perl hacker]],". The "canonical" JAPH includes the comma at the end, although this is often omitted, and many variants on the theme have been created (example: [http://www.perlmonks.org/index.pl?node_id=292135], which prints "Just Another Perl Pirate!").

One interesting Perl module is Lingua::Romana::Perligata. This module translates the source code of a script that uses it from Latin into Perl, allowing the programmer to write executable programs in Latin.

The Perl community has set aside the "[[Acme]]" namespace for modules that are fun or experimental in nature.  Some of the Acme modules are deliberately implemented in amusing ways.  Some examples:
* [http://search.cpan.org/dist/Acme-Hello/ Acme::Hello] simplifies the process of writing a "Hello, World!" program
* [http://search.cpan.org/dist/Acme-Currency/ Acme::Currency] allows you to change the "$" prefix for scalar variables to some other character
* [http://search.cpan.org/dist/Acme-ProgressBar/ Acme::ProgressBar] is a horribly inefficient way to indicate progress for a task
* [http://search.cpan.org/dist/Acme-VerySign/ Acme::VerySign] satirizes the widely-criticized [[VeriSign]] [[Site Finder]] service
* [http://search.cpan.org/~dconway/Acme-Don-t-1.01/t.pm Acme::Don't] implements the logical opposite of the <tt>do</tt> keyword&mdash;<tt>don't</tt>, which does not execute the provided block.

See also
*[http://wikibooks.org/wiki/Programming:Perl_humour Perl humour on wikibooks]
*[http://www.cmpe.boun.edu.tr/~kosar/other/lwall.html Larry Wall quotes]
*[http://search.cpan.org/perldoc?Lingua::Romana::Perligata Lingua::Romana::Perligata - Write Perl in Latin!]
*[http://www.perlmonks.org/index.pl?node_id=253797 A tutorial on Perligata]
*[http://www.softpanorama.org/Bulletin/Humor/humor092.html Perl Purity Test]

== See also ==
* [[CPAN]]
* [[Just another Perl hacker]]
* [[Larry Wall]]
* [[Obfuscated Perl contest]]
* [[POE]] the [[Perl Object Environment]]
* [[Perl 6]]

==External links==

*[http://www.perl.org/ Perl.org] &ndash; The Perl Directory
*[http://www.perl.com/ Perl.com] &ndash; Perl on [[O'Reilly Network]]
*[http://perldoc.perl.org/ Perldoc at Perl.org] &ndash; online Perl documentation

===User groups===

*[http://www.pm.org/ Perl Mongers] &ndash; local user groups in cities worldwide
*[http://www.perlmonks.org/ PerlMonks] &ndash; an active and popular online user group and discussion forum
*[http://use.perl.org/ use Perl;] &ndash; Perl news and community discussion

===Distributions===

*[http://www.cpan.org/ CPAN] &ndash; Comprehensive Perl Archive Network, Perl source distribution
*[http://www.activestate.com/ ActiveState ActivePerl] &ndash; Perl for [[Microsoft Windows]] platforms
*[http://www.indigostar.com/indigoperl.htm IndigoPerl] &ndash; another distribution of Perl for Microsoft Windows
*[http://cygwin.com/ Cygwin] also distributes Perl on Windows

===Development===

*[http://dev.perl.org/perl5/ Perl 5 development]
*[http://dev.perl.org/perl6/ Perl 6 development]
*[http://www.parrotcode.org/ Parrot virtual machine]
*[http://www.poniecode.org/ Project Ponie] &ndash; Perl 5 running on top of Parrot
*[http://www.pugscode.org/ Pugs] &ndash; Perl 6 running on top of Haskell

===History===

*[http://groups.google.com/groups?selm=4628%40sdcrdcf.UUCP First reference to "Perl" on Usenet]
*[http://dev.perl.org/perl1/ The origin of Perl] &ndash; "Stability. Speed. Simplicity. perl1 is here."
*[http://history.perl.org/PerlTimeline.html The Perl Timeline]

===Miscellaneous===
*[http://dmoz.org/Computers/Programming/Languages/Perl/ Perl related websites] in the [[Open Directory Project]]
*[http://www.theperlreview.com The Perl Review] - print magazine about Perl
*[http://www.tpj.com/ The Perl Journal] online only magazine about Perl
*[http://books.perl.org/ Perl Book reviews]
*[http://perlcast.com Perlcast] - Perl Podcast
*[http://www.perl.com/pub/a/2000/01/10PerlMyths.html Ten Perl Myths] - O'Reilly
*[http://fortunes.quotationsbook.com/fortunes/collection/52/PERL Perl fortunes collected from Larry Wall message identifiers]



==Books==
{{book}}

The Perl Foundation keeps a list of books available covering Perl on http://books.perl.org/.  Some notable books are:
*[[Programming Perl]] (also known as the ''Camel book'')
*[[Perl Cookbook]]
*[[Learning Perl]] (also called the ''Llama book'')
*[http://www.techbooksforfree.com/perlpython.shtml A collection of other free Perl books]

==References==

===Perl man pages===

The Perl man pages are included in the Perl [http://www.cpan.org/src/stable.tar.gz source distribution]. They are available on the web from http://perldoc.perl.org/. Some good starting points may be:

* [http://perldoc.perl.org/perlintro.html perlintro] - a brief introduction and overview of Perl
* [http://perldoc.perl.org/perlsyn.html perlsyn] - Perl syntax
* [http://perldoc.perl.org/perlre.html perlre] - Perl regular expressions
* [http://perldoc.perl.org/perldelta.html perl5''xy''delta] - what is new for perl v5.''x''.''y''

===Web pages===

* [http://history.perl.org/PerlTimeline.html The Timeline of Perl and its Culture v3.0_0505]
* [http://www.nntp.perl.org/group/perl.perl6.meta/424 Transcription of Larry's talk]

{{Major programming languages small}}

[[Category:Perl|*]]
[[Category:Curly bracket programming languages]]
[[Category:Free software]]
[[Category:.NET programming languages]]
[[Category:Procedural programming languages]]
[[Category:Scripting languages]]
[[Category:Text-oriented programming languages]]
[[Category:Programming languages]]

[[ca:Perl]]
[[cs:Perl]]
[[da:Perl]]
[[de:Perl]]
[[et:Perl]]
[[es:Perl]]
[[eo:Perl (programlingvo)]]
[[fr:Perl (langage)]]
[[ko:펄]]
[[hr:Perl]]
[[id:Perl]]
[[it:Perl]]
[[he:Perl]]
[[lt:Perl]]
[[lb:Perl]]
[[hu:Perl programozási nyelv]]
[[nl:Perl]]
[[ja:Perl]]
[[no:Perl]]
[[pl:Perl]]
[[pt:Perl]]
[[ru:Перл (язык программирования)]]
[[sl:Perl]]
[[sr:Perl]]
[[fi:Perl]]
[[sv:Perl]]
[[tr:Perl]]
[[zh:Perl]]